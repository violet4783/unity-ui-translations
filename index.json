{
  "api/UnityEngine.UI.Selectable.html": {
    "href": "api/UnityEngine.UI.Selectable.html",
    "title": "Class Selectable | Unity UI | 1.0.0",
    "keywords": "Class Selectable Inheritance Object UIBehaviour Selectable Button Dropdown InputField Scrollbar Slider Toggle Inherited Members UIBehaviour.Start() UIBehaviour.OnDestroy() UIBehaviour.IsActive() UIBehaviour.OnRectTransformDimensionsChange() UIBehaviour.OnBeforeTransformParentChanged() UIBehaviour.OnCanvasHierarchyChanged() UIBehaviour.IsDestroyed() Namespace : UnityEngine.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class Selectable : UIBehaviour, IMoveHandler, IPointerDownHandler, IPointerUpHandler, IPointerEnterHandler, IPointerExitHandler, ISelectHandler, IDeselectHandler, IEventSystemHandler Constructors Selectable() Declaration protected Selectable() Fields m_CurrentIndex Declaration protected int m_CurrentIndex Field Value Type Description Int32 s_SelectableCount Declaration protected static int s_SelectableCount Field Value Type Description Int32 s_Selectables Declaration protected static Selectable[] s_Selectables Field Value Type Description Selectable [] Properties allSelectableCount How many selectable elements are currently active. Declaration public static int allSelectableCount { get; } Property Value Type Description Int32 allSelectables A List instance of the allSelectablesArray to maintain API compatibility. Declaration [Obsolete(\"Replaced with allSelectablesArray to have better performance when disabling a element\", false)] public static List<Selectable> allSelectables { get; } Property Value Type Description List < Selectable > allSelectablesArray Copy of the array of all the selectable objects currently active in the scene. Declaration public static Selectable[] allSelectablesArray { get; } Property Value Type Description Selectable [] Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // required when using UI elements in scripts public class Example : MonoBehaviour { //Displays the names of all selectable elements in the scene public void GetNames() { foreach (Selectable selectableUI in Selectable.allSelectablesArray) { Debug.Log(selectableUI.name); } } } animationTriggers The AnimationTriggers for this selectable object. Declaration public AnimationTriggers animationTriggers { get; set; } Property Value Type Description AnimationTriggers Remarks Modifications will not be visible if transition is not Animation. colors The ColorBlock for this selectable object. Declaration public ColorBlock colors { get; set; } Property Value Type Description ColorBlock Remarks Modifications will not be visible if transition is not ColorTint. Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class ExampleClass : MonoBehaviour { public Button button; void Start() { //Resets the colors in the buttons transitions. button.colors = ColorBlock.defaultColorBlock; } } currentSelectionState Declaration protected Selectable.SelectionState currentSelectionState { get; } Property Value Type Description Selectable.SelectionState image Convenience function that converts the referenced Graphic to a Image, if possible. Declaration public Image image { get; set; } Property Value Type Description Image interactable Declaration public bool interactable { get; set; } Property Value Type Description Boolean navigation The Navigation setting for this selectable object. Declaration public Navigation navigation { get; set; } Property Value Type Description Navigation Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class ExampleClass : MonoBehaviour { public Button button; void Start() { //Set the navigation to the default value. (\"Automatic\" is the default value). button.navigation = Navigation.defaultNavigation; } } spriteState Declaration public SpriteState spriteState { get; set; } Property Value Type Description SpriteState targetGraphic Graphic that will be transitioned upon. Declaration public Graphic targetGraphic { get; set; } Property Value Type Description Graphic Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class ExampleClass : MonoBehaviour { public Image newImage; public Button btnMain; void SomeFunction() { //Displays the sprite transitions on the image when the transition to Highlighted,pressed or disabled is made. btnMain.targetGraphic = newImage; } } transition The type of transition that will be applied to the targetGraphic when the state changes. Declaration public Selectable.Transition transition { get; set; } Property Value Type Description Selectable.Transition Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class ExampleClass : MonoBehaviour { public Button btnMain; void SomeFunction() { //Sets the main button's transition setting to \"Color Tint\". btnMain.transition = Selectable.Transition.ColorTint; } } Methods AllSelectablesNoAlloc(Selectable[]) Declaration public static int AllSelectablesNoAlloc(Selectable[] selectables) Parameters Type Name Description Selectable [] selectables Returns Type Description Int32 Awake() Convenience function to get the Animator component on the GameObject. Declaration protected override void Awake() Overrides UIBehaviour.Awake() Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class ExampleClass : MonoBehaviour { private Animator buttonAnimator; public Button button; void Start() { //Assigns the \"buttonAnimator\" with the button's animator. buttonAnimator = button.animator; } } DoStateTransition(Selectable.SelectionState, Boolean) Transition the Selectable to the entered state. Declaration protected virtual void DoStateTransition(Selectable.SelectionState state, bool instant) Parameters Type Name Description Selectable.SelectionState state State to transition to Boolean instant Should the transition occur instantly. FindSelectable(Vector3) Finds the selectable object next to this one. Declaration public Selectable FindSelectable(Vector3 dir) Parameters Type Name Description Vector3 dir The direction in which to search for a neighbouring Selectable object. Returns Type Description Selectable The neighbouring Selectable object. Null if none found. Remarks The direction is determined by a Vector3 variable. Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // required when using UI elements in scripts public class ExampleClass : MonoBehaviour { //Sets the direction as \"Up\" (Y is in positive). public Vector3 direction = new Vector3(0, 1, 0); public Button btnMain; public void Start() { //Finds and assigns the selectable above the main button Selectable newSelectable = btnMain.FindSelectable(direction); Debug.Log(newSelectable.name); } } FindSelectableOnDown() Find the selectable object below this one. Declaration public virtual Selectable FindSelectableOnDown() Returns Type Description Selectable Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // required when using UI elements in scripts public class Example : MonoBehaviour { public Button startButton; // Disables the selectable UI element directly below the Start Button public void IgnoreSelectables() { //Finds the selectable UI element below the start button and assigns it to a variable of type \"Selectable\" Selectable secondButton = startButton.FindSelectableOnDown(); //Disables interaction with the selectable UI element secondButton.interactable = false; } } FindSelectableOnLeft() Find the selectable object to the left of this one. Declaration public virtual Selectable FindSelectableOnLeft() Returns Type Description Selectable Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // required when using UI elements in scripts public class ExampleClass : MonoBehaviour { public Button btnMain; // Disables the selectable UI element directly to the left of the Start Button public void IgnoreSelectables() { //Finds the selectable UI element to the left the start button and assigns it to a variable of type \"Selectable\" Selectable secondButton = startButton.FindSelectableOnLeft(); //Disables interaction with the selectable UI element secondButton.interactable = false; } } FindSelectableOnRight() Find the selectable object to the right of this one. Declaration public virtual Selectable FindSelectableOnRight() Returns Type Description Selectable Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // required when using UI elements in scripts public class ExampleClass : MonoBehaviour { public Button btnMain; // Disables the selectable UI element directly to the right the Start Button public void IgnoreSelectables() { //Finds the selectable UI element to the right the start button and assigns it to a variable of type \"Selectable\" Selectable secondButton = startButton.FindSelectableOnRight(); //Disables interaction with the selectable UI element secondButton.interactable = false; } } FindSelectableOnUp() The Selectable object above current Declaration public virtual Selectable FindSelectableOnUp() Returns Type Description Selectable Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // required when using UI elements in scripts public class ExampleClass : MonoBehaviour { public Button btnMain; // Disables the selectable UI element directly above the Start Button public void IgnoreSelectables() { //Finds the selectable UI element above the start button and assigns it to a variable of type \"Selectable\" Selectable secondButton = startButton.FindSelectableOnUp(); //Disables interaction with the selectable UI element secondButton.interactable = false; } } InstantClearState() Clear any internal state from the Selectable (used when disabling). Declaration protected virtual void InstantClearState() IsHighlighted() Returns whether the selectable is currently 'highlighted' or not. Declaration protected bool IsHighlighted() Returns Type Description Boolean Remarks Use this to check if the selectable UI element is currently highlighted. Examples //Create a UI element. To do this go to Create>UI and select from the list. Attach this script to the UI GameObject to see this script working. The script also works with non-UI elements, but highlighting works better with UI. using UnityEngine; using UnityEngine.Events; using UnityEngine.EventSystems; using UnityEngine.UI; //Use the Selectable class as a base class to access the IsHighlighted method public class Example : Selectable { //Use this to check what Events are happening BaseEventData m_BaseEvent; void Update() { //Check if the GameObject is being highlighted if (IsHighlighted()) { //Output that the GameObject was highlighted, or do something else Debug.Log(\"Selectable is Highlighted\"); } } } IsInteractable() Is the object interactable. Declaration public virtual bool IsInteractable() Returns Type Description Boolean Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // required when using UI elements in scripts public class Example : MonoBehaviour { public Button startButton; void Update() { if (!startButton.IsInteractable()) { Debug.Log(\"Start Button has been Disabled\"); } } } IsPressed() Whether the current selectable is being pressed. Declaration protected bool IsPressed() Returns Type Description Boolean OnCanvasGroupChanged() Declaration protected override void OnCanvasGroupChanged() Overrides UIBehaviour.OnCanvasGroupChanged() OnDeselect(BaseEventData) Unset selection and transition to appropriate state. Declaration public virtual void OnDeselect(BaseEventData eventData) Parameters Type Name Description BaseEventData eventData Implements IDeselectHandler.OnDeselect(BaseEventData) Examples using UnityEngine; using System.Collections; using UnityEngine.UI; using UnityEngine.EventSystems;// Required when using Event data. public class ExampleClass : MonoBehaviour, IDeselectHandler //This Interface is required to receive OnDeselect callbacks. { public void OnDeselect(BaseEventData data) { Debug.Log(\"Deselected\"); } } OnDidApplyAnimationProperties() Declaration protected override void OnDidApplyAnimationProperties() Overrides UIBehaviour.OnDidApplyAnimationProperties() OnDisable() Declaration protected override void OnDisable() Overrides UIBehaviour.OnDisable() OnEnable() Declaration protected override void OnEnable() Overrides UIBehaviour.OnEnable() OnMove(AxisEventData) Determine in which of the 4 move directions the next selectable object should be found. Declaration public virtual void OnMove(AxisEventData eventData) Parameters Type Name Description AxisEventData eventData Implements IMoveHandler.OnMove(AxisEventData) Examples using UnityEngine; using System.Collections; using UnityEngine.UI; using UnityEngine.EventSystems;// Required when using Event data. public class ExampleClass : MonoBehaviour, IMoveHandler { //When the focus moves to another selectable object, Invoke this Method. public void OnMove(AxisEventData eventData) { //Assigns the move direction and the raw input vector representing the direction from the event data. MoveDirection moveDir = eventData.moveDir; Vector2 moveVector = eventData.moveVector; //Displays the information in the console Debug.Log(moveDir + \", \" + moveVector); } } OnPointerDown(PointerEventData) Evaluate current state and transition to pressed state. Declaration public virtual void OnPointerDown(PointerEventData eventData) Parameters Type Name Description PointerEventData eventData Implements IPointerDownHandler.OnPointerDown(PointerEventData) Examples using UnityEngine; using System.Collections; using UnityEngine.UI; using UnityEngine.EventSystems;// Required when using Event data. public class ExampleClass : MonoBehaviour, IPointerDownHandler// required interface when using the OnPointerDown method. { //Do this when the mouse is clicked over the selectable object this script is attached to. public void OnPointerDown(PointerEventData eventData) { Debug.Log(this.gameObject.name + \" Was Clicked.\"); } } OnPointerEnter(PointerEventData) Evaluate current state and transition to appropriate state. New state could be pressed or hover depending on pressed state. Declaration public virtual void OnPointerEnter(PointerEventData eventData) Parameters Type Name Description PointerEventData eventData Implements IPointerEnterHandler.OnPointerEnter(PointerEventData) Examples using UnityEngine; using System.Collections; using UnityEngine.UI; using UnityEngine.EventSystems;// Required when using Event data. public class ExampleClass : MonoBehaviour, IPointerEnterHandler// required interface when using the OnPointerEnter method. { //Do this when the cursor enters the rect area of this selectable UI object. public void OnPointerEnter(PointerEventData eventData) { Debug.Log(\"The cursor entered the selectable UI element.\"); } } OnPointerExit(PointerEventData) Evaluate current state and transition to normal state. Declaration public virtual void OnPointerExit(PointerEventData eventData) Parameters Type Name Description PointerEventData eventData Implements IPointerExitHandler.OnPointerExit(PointerEventData) Examples using UnityEngine; using System.Collections; using UnityEngine.UI; using UnityEngine.EventSystems;// Required when using Event data. public class ExampleClass : MonoBehaviour, IPointerExitHandler// required interface when using the OnPointerExit method. { //Do this when the cursor exits the rect area of this selectable UI object. public void OnPointerExit(PointerEventData eventData) { Debug.Log(\"The cursor exited the selectable UI element.\"); } } OnPointerUp(PointerEventData) Evaluate eventData and transition to appropriate state. Declaration public virtual void OnPointerUp(PointerEventData eventData) Parameters Type Name Description PointerEventData eventData Implements IPointerUpHandler.OnPointerUp(PointerEventData) Examples using UnityEngine; using System.Collections; using UnityEngine.UI; using UnityEngine.EventSystems;// Required when using Event data. public class ExampleClass : MonoBehaviour, IPointerUpHandler, IPointerDownHandler// These are the interfaces the OnPointerUp method requires. { //OnPointerDown is also required to receive OnPointerUp callbacks public void OnPointerDown(PointerEventData eventData) { } //Do this when the mouse click on this selectable UI object is released. public void OnPointerUp(PointerEventData eventData) { Debug.Log(\"The mouse click was released\"); } } OnSelect(BaseEventData) Set selection and transition to appropriate state. Declaration public virtual void OnSelect(BaseEventData eventData) Parameters Type Name Description BaseEventData eventData Implements ISelectHandler.OnSelect(BaseEventData) Examples using UnityEngine; using System.Collections; using UnityEngine.UI; using UnityEngine.EventSystems;// Required when using Event data. public class ExampleClass : MonoBehaviour, ISelectHandler// required interface when using the OnSelect method. { //Do this when the selectable UI object is selected. public void OnSelect(BaseEventData eventData) { Debug.Log(this.gameObject.name + \" was selected\"); } } OnTransformParentChanged() Declaration protected override void OnTransformParentChanged() Overrides UIBehaviour.OnTransformParentChanged() Select() Selects this Selectable. Declaration public virtual void Select() Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // required when using UI elements in scripts using UnityEngine.EventSystems;// Required when using Event data. public class ExampleClass : MonoBehaviour// required interface when using the OnSelect method. { public InputField myInputField; //Do this OnClick. public void SaveGame() { //Makes the Input Field the selected UI Element. myInputField.Select(); } } Extension Methods UIBehaviourExtensions.InvokeOnEnable(UIBehaviour) UIBehaviourExtensions.InvokeOnDisable(UIBehaviour) UIBehaviourExtensions.InvokeAwake(UIBehaviour) UIBehaviourExtensions.InvokeRebuild(UIBehaviour, CanvasUpdate) UIBehaviourExtensions.InvokeLateUpdate(UIBehaviour) UIBehaviourExtensions.InvokeUpdate(UIBehaviour) UIBehaviourExtensions.InvokeOnRectTransformDimensionsChange(UIBehaviour) UIBehaviourExtensions.InvokeOnCanvasGroupChanged(UIBehaviour) UIBehaviourExtensions.InvokeOnDidApplyAnimationProperties(UIBehaviour) SelectableExtensions.InvokeOnPointerDown(Selectable, PointerEventData) SelectableExtensions.InvokeOnPointerUp(Selectable, PointerEventData) SelectableExtensions.InvokeOnPointerEnter(Selectable, PointerEventData) SelectableExtensions.InvokeOnPointerExit(Selectable, PointerEventData) SelectableExtensions.InvokeTriggerAnimation(Selectable, String)"
  },
  "api/UnityEditor.UI.ToggleEditor.html": {
    "href": "api/UnityEditor.UI.ToggleEditor.html",
    "title": "Class ToggleEditor | Unity UI | 1.0.0",
    "keywords": "Class ToggleEditor Inheritance Object SelectableEditor ToggleEditor Inherited Members SelectableEditor.OnDisable() Namespace : UnityEditor.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class ToggleEditor : SelectableEditor Methods OnEnable() Declaration protected override void OnEnable() Overrides SelectableEditor.OnEnable() OnInspectorGUI() Declaration public override void OnInspectorGUI() Overrides SelectableEditor.OnInspectorGUI()"
  },
  "api/UnityEngine.UI.Toggle.ToggleTransition.html": {
    "href": "api/UnityEngine.UI.Toggle.ToggleTransition.html",
    "title": "Enum Toggle.ToggleTransition | Unity UI | 1.0.0",
    "keywords": "Enum Toggle.ToggleTransition Display settings for when a toggle is activated or deactivated. Namespace : UnityEngine.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public enum ToggleTransition Fields Name Description Fade Fade the toggle in / out smoothly. None Show / hide the toggle instantly"
  },
  "api/UnityEngine.EventSystems.PointerInputModule.html": {
    "href": "api/UnityEngine.EventSystems.PointerInputModule.html",
    "title": "Class PointerInputModule | Unity UI | 1.0.0",
    "keywords": "Class PointerInputModule A BaseInputModule for pointer input. Inheritance Object UIBehaviour BaseInputModule PointerInputModule StandaloneInputModule TouchInputModule Inherited Members BaseInputModule.m_RaycastResultCache BaseInputModule.m_InputOverride BaseInputModule.input BaseInputModule.inputOverride BaseInputModule.eventSystem BaseInputModule.OnEnable() BaseInputModule.OnDisable() BaseInputModule.Process() BaseInputModule.FindFirstRaycast(List<RaycastResult>) BaseInputModule.DetermineMoveDirection(Single, Single) BaseInputModule.DetermineMoveDirection(Single, Single, Single) BaseInputModule.FindCommonRoot(GameObject, GameObject) BaseInputModule.HandlePointerExitAndEnter(PointerEventData, GameObject) BaseInputModule.GetAxisEventData(Single, Single, Single) BaseInputModule.GetBaseEventData() BaseInputModule.ShouldActivateModule() BaseInputModule.DeactivateModule() BaseInputModule.ActivateModule() BaseInputModule.UpdateModule() BaseInputModule.IsModuleSupported() UIBehaviour.Awake() UIBehaviour.Start() UIBehaviour.OnDestroy() UIBehaviour.IsActive() UIBehaviour.OnRectTransformDimensionsChange() UIBehaviour.OnBeforeTransformParentChanged() UIBehaviour.OnTransformParentChanged() UIBehaviour.OnDidApplyAnimationProperties() UIBehaviour.OnCanvasGroupChanged() UIBehaviour.OnCanvasHierarchyChanged() UIBehaviour.IsDestroyed() Namespace : UnityEngine.EventSystems <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public abstract class PointerInputModule : BaseInputModule Fields kFakeTouchesId Touch id for when simulating touches on a non touch device. Declaration public const int kFakeTouchesId = -4 Field Value Type Description Int32 kMouseLeftId Id of the cached left mouse pointer event. Declaration public const int kMouseLeftId = -1 Field Value Type Description Int32 kMouseMiddleId Id of the cached middle mouse pointer event. Declaration public const int kMouseMiddleId = -3 Field Value Type Description Int32 kMouseRightId Id of the cached right mouse pointer event. Declaration public const int kMouseRightId = -2 Field Value Type Description Int32 m_PointerData Declaration protected Dictionary<int, PointerEventData> m_PointerData Field Value Type Description Dictionary < Int32 , PointerEventData > Methods ClearSelection() Clear all pointers and deselect any selected objects in the EventSystem. Declaration protected void ClearSelection() CopyFromTo(PointerEventData, PointerEventData) Copy one PointerEventData to another. Declaration protected void CopyFromTo(PointerEventData from, PointerEventData to) Parameters Type Name Description PointerEventData from PointerEventData to DeselectIfSelectionChanged(GameObject, BaseEventData) Deselect the current selected GameObject if the currently pointed-at GameObject is different. Declaration protected void DeselectIfSelectionChanged(GameObject currentOverGo, BaseEventData pointerEvent) Parameters Type Name Description GameObject currentOverGo The GameObject the pointer is currently over. BaseEventData pointerEvent Current event data. GetLastPointerEventData(Int32) Return the last PointerEventData for the given touch / mouse id. Declaration protected PointerEventData GetLastPointerEventData(int id) Parameters Type Name Description Int32 id Returns Type Description PointerEventData GetMousePointerEventData() Return the current MouseState. Using the default pointer. Declaration protected virtual PointerInputModule.MouseState GetMousePointerEventData() Returns Type Description PointerInputModule.MouseState GetMousePointerEventData(Int32) Return the current MouseState. Declaration protected virtual PointerInputModule.MouseState GetMousePointerEventData(int id) Parameters Type Name Description Int32 id Returns Type Description PointerInputModule.MouseState GetPointerData(Int32, out PointerEventData, Boolean) Search the cache for currently active pointers, return true if found. Declaration protected bool GetPointerData(int id, out PointerEventData data, bool create) Parameters Type Name Description Int32 id Touch ID PointerEventData data Found data Boolean create If not found should it be created Returns Type Description Boolean True if pointer is found. GetTouchPointerEventData(Touch, out Boolean, out Boolean) Given a touch populate the PointerEventData and return if we are pressed or released. Declaration protected PointerEventData GetTouchPointerEventData(Touch input, out bool pressed, out bool released) Parameters Type Name Description Touch input Touch being processed Boolean pressed Are we pressed this frame Boolean released Are we released this frame Returns Type Description PointerEventData IsPointerOverGameObject(Int32) Declaration public override bool IsPointerOverGameObject(int pointerId) Parameters Type Name Description Int32 pointerId Returns Type Description Boolean Overrides BaseInputModule.IsPointerOverGameObject(Int32) ProcessDrag(PointerEventData) Process the drag for the current frame with the given pointer event. Declaration protected virtual void ProcessDrag(PointerEventData pointerEvent) Parameters Type Name Description PointerEventData pointerEvent ProcessMove(PointerEventData) Process movement for the current frame with the given pointer event. Declaration protected virtual void ProcessMove(PointerEventData pointerEvent) Parameters Type Name Description PointerEventData pointerEvent RemovePointerData(PointerEventData) Remove the PointerEventData from the cache. Declaration protected void RemovePointerData(PointerEventData data) Parameters Type Name Description PointerEventData data StateForMouseButton(Int32) Given a mouse button return the current state for the frame. Declaration protected PointerEventData.FramePressState StateForMouseButton(int buttonId) Parameters Type Name Description Int32 buttonId Mouse button ID Returns Type Description PointerEventData.FramePressState ToString() Declaration public override string ToString() Returns Type Description String Extension Methods UIBehaviourExtensions.InvokeOnEnable(UIBehaviour) UIBehaviourExtensions.InvokeOnDisable(UIBehaviour) UIBehaviourExtensions.InvokeAwake(UIBehaviour) UIBehaviourExtensions.InvokeRebuild(UIBehaviour, CanvasUpdate) UIBehaviourExtensions.InvokeLateUpdate(UIBehaviour) UIBehaviourExtensions.InvokeUpdate(UIBehaviour) UIBehaviourExtensions.InvokeOnRectTransformDimensionsChange(UIBehaviour) UIBehaviourExtensions.InvokeOnCanvasGroupChanged(UIBehaviour) UIBehaviourExtensions.InvokeOnDidApplyAnimationProperties(UIBehaviour)"
  },
  "api/UnityEngine.UI.Mask.html": {
    "href": "api/UnityEngine.UI.Mask.html",
    "title": "Class Mask | Unity UI | 1.0.0",
    "keywords": "Class Mask Inheritance Object UIBehaviour Mask Inherited Members UIBehaviour.Awake() UIBehaviour.Start() UIBehaviour.OnDestroy() UIBehaviour.IsActive() UIBehaviour.OnRectTransformDimensionsChange() UIBehaviour.OnBeforeTransformParentChanged() UIBehaviour.OnTransformParentChanged() UIBehaviour.OnDidApplyAnimationProperties() UIBehaviour.OnCanvasGroupChanged() UIBehaviour.OnCanvasHierarchyChanged() UIBehaviour.IsDestroyed() Namespace : UnityEngine.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class Mask : UIBehaviour, ICanvasRaycastFilter, IMaterialModifier Constructors Mask() Declaration protected Mask() Properties graphic The graphic associated with the Mask. Declaration public Graphic graphic { get; } Property Value Type Description Graphic rectTransform Declaration public RectTransform rectTransform { get; } Property Value Type Description RectTransform showMaskGraphic Show the graphic that is associated with the Mask render area. Declaration public bool showMaskGraphic { get; set; } Property Value Type Description Boolean Methods GetModifiedMaterial(Material) Declaration public virtual Material GetModifiedMaterial(Material baseMaterial) Parameters Type Name Description Material baseMaterial Returns Type Description Material Implements IMaterialModifier.GetModifiedMaterial(Material) IsRaycastLocationValid(Vector2, Camera) Declaration public virtual bool IsRaycastLocationValid(Vector2 sp, Camera eventCamera) Parameters Type Name Description Vector2 sp Camera eventCamera Returns Type Description Boolean MaskEnabled() Declaration public virtual bool MaskEnabled() Returns Type Description Boolean OnDisable() Declaration protected override void OnDisable() Overrides UIBehaviour.OnDisable() OnEnable() Declaration protected override void OnEnable() Overrides UIBehaviour.OnEnable() OnSiblingGraphicEnabledDisabled() Declaration [Obsolete(\"Not used anymore.\")] public virtual void OnSiblingGraphicEnabledDisabled() Extension Methods UIBehaviourExtensions.InvokeOnEnable(UIBehaviour) UIBehaviourExtensions.InvokeOnDisable(UIBehaviour) UIBehaviourExtensions.InvokeAwake(UIBehaviour) UIBehaviourExtensions.InvokeRebuild(UIBehaviour, CanvasUpdate) UIBehaviourExtensions.InvokeLateUpdate(UIBehaviour) UIBehaviourExtensions.InvokeUpdate(UIBehaviour) UIBehaviourExtensions.InvokeOnRectTransformDimensionsChange(UIBehaviour) UIBehaviourExtensions.InvokeOnCanvasGroupChanged(UIBehaviour) UIBehaviourExtensions.InvokeOnDidApplyAnimationProperties(UIBehaviour)"
  },
  "api/UnityEngine.UI.Image.Origin90.html": {
    "href": "api/UnityEngine.UI.Image.Origin90.html",
    "title": "Enum Image.Origin90 | Unity UI | 1.0.0",
    "keywords": "Enum Image.Origin90 Origin for the Image.FillMethod.Radial90. Namespace : UnityEngine.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public enum Origin90 Fields Name Description BottomLeft Radial starting at the Bottom Left corner. BottomRight Radial starting at the Bottom Right corner. TopLeft Radial starting at the Top Left corner. TopRight Radial starting at the Top Right corner."
  },
  "api/UnityEditor.UI.AspectRatioFitterEditor.html": {
    "href": "api/UnityEditor.UI.AspectRatioFitterEditor.html",
    "title": "Class AspectRatioFitterEditor | Unity UI | 1.0.0",
    "keywords": "Class AspectRatioFitterEditor Inheritance Object SelfControllerEditor AspectRatioFitterEditor Namespace : UnityEditor.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class AspectRatioFitterEditor : SelfControllerEditor Methods OnEnable() Declaration protected virtual void OnEnable() OnInspectorGUI() Declaration public override void OnInspectorGUI() Overrides SelfControllerEditor.OnInspectorGUI()"
  },
  "api/UnityEngine.UI.ScrollRect.html": {
    "href": "api/UnityEngine.UI.ScrollRect.html",
    "title": "Class ScrollRect | Unity UI | 1.0.0",
    "keywords": "Class ScrollRect Inheritance Object UIBehaviour ScrollRect Inherited Members UIBehaviour.Awake() UIBehaviour.Start() UIBehaviour.OnDestroy() UIBehaviour.OnBeforeTransformParentChanged() UIBehaviour.OnTransformParentChanged() UIBehaviour.OnDidApplyAnimationProperties() UIBehaviour.OnCanvasGroupChanged() UIBehaviour.OnCanvasHierarchyChanged() UIBehaviour.IsDestroyed() Namespace : UnityEngine.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class ScrollRect : UIBehaviour, IInitializePotentialDragHandler, IBeginDragHandler, IEndDragHandler, IDragHandler, IScrollHandler, IEventSystemHandler, ICanvasElement, ILayoutElement, ILayoutGroup, ILayoutController Constructors ScrollRect() Declaration protected ScrollRect() Fields m_ContentBounds Declaration protected Bounds m_ContentBounds Field Value Type Description Bounds m_ContentStartPosition Declaration protected Vector2 m_ContentStartPosition Field Value Type Description Vector2 Properties content The content that can be scrolled. It should be a child of the GameObject with ScrollRect on it. Declaration public RectTransform content { get; set; } Property Value Type Description RectTransform Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class ExampleClass : MonoBehaviour { public ScrollRect myScrollRect; public RectTransform scrollableContent; //Do this when the Save button is selected. public void Start() { // assigns the contect that can be scrolled using the ScrollRect. myScrollRect.content = scrollableContent; } } decelerationRate The rate at which movement slows down. Declaration public float decelerationRate { get; set; } Property Value Type Description Single Remarks The deceleration rate is the speed reduction per second. A value of 0.5 halves the speed each second. The default is 0.135. The deceleration rate is only used when inertia is enabled. Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class ExampleClass : MonoBehaviour { public ScrollRect myScrollRect; public void Start() { // assigns a new value to the decelerationRate of the scroll rect. // The higher the number the longer it takes to decelerate. myScrollRect.decelerationRate = 5.0f; } } elasticity The amount of elasticity to use when the content moves beyond the scroll rect. Declaration public float elasticity { get; set; } Property Value Type Description Single Examples using UnityEngine; using System.Collections; using UnityEngine.UI; public class ExampleClass : MonoBehaviour { public ScrollRect myScrollRect; public void Start() { // assigns a new value to the elasticity of the scroll rect. // The higher the number the longer it takes to snap back. myScrollRect.elasticity = 3.0f; } } flexibleHeight Called by the layout system. Declaration public virtual float flexibleHeight { get; } Property Value Type Description Single Implements ILayoutElement.flexibleHeight flexibleWidth Called by the layout system. Declaration public virtual float flexibleWidth { get; } Property Value Type Description Single Implements ILayoutElement.flexibleWidth horizontal Should horizontal scrolling be enabled? Declaration public bool horizontal { get; set; } Property Value Type Description Boolean Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class ExampleClass : MonoBehaviour { public ScrollRect myScrollRect; public void Start() { // Is horizontal scrolling enabled? if (myScrollRect.horizontal == true) { Debug.Log(\"Horizontal Scrolling is Enabled!\"); } } } horizontalNormalizedPosition The horizontal scroll position as a value between 0 and 1, with 0 being at the left. Declaration public float horizontalNormalizedPosition { get; set; } Property Value Type Description Single Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class ExampleClass : MonoBehaviour { public ScrollRect myScrollRect; public Scrollbar newScrollBar; public void Start() { //Change the current horizontal scroll position. myScrollRect.horizontalNormalizedPosition = 0.5f; } } horizontalScrollbar Optional Scrollbar object linked to the horizontal scrolling of the ScrollRect. Declaration public Scrollbar horizontalScrollbar { get; set; } Property Value Type Description Scrollbar Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class ExampleClass : MonoBehaviour { public ScrollRect myScrollRect; public Scrollbar newScrollBar; public void Start() { // Assigns a scroll bar element to the ScrollRect, allowing you to scroll in the horizontal axis. myScrollRect.horizontalScrollbar = newScrollBar; } } horizontalScrollbarSpacing The space between the scrollbar and the viewport. Declaration public float horizontalScrollbarSpacing { get; set; } Property Value Type Description Single horizontalScrollbarVisibility The mode of visibility for the horizontal scrollbar. Declaration public ScrollRect.ScrollbarVisibility horizontalScrollbarVisibility { get; set; } Property Value Type Description ScrollRect.ScrollbarVisibility inertia Should movement inertia be enabled? Declaration public bool inertia { get; set; } Property Value Type Description Boolean Remarks Inertia means that the scrollrect content will keep scrolling for a while after being dragged. It gradually slows down according to the decelerationRate. layoutPriority Called by the layout system. Declaration public virtual int layoutPriority { get; } Property Value Type Description Int32 Implements ILayoutElement.layoutPriority minHeight Called by the layout system. Declaration public virtual float minHeight { get; } Property Value Type Description Single Implements ILayoutElement.minHeight minWidth Called by the layout system. Declaration public virtual float minWidth { get; } Property Value Type Description Single Implements ILayoutElement.minWidth movementType The behavior to use when the content moves beyond the scroll rect. Declaration public ScrollRect.MovementType movementType { get; set; } Property Value Type Description ScrollRect.MovementType normalizedPosition The scroll position as a Vector2 between (0,0) and (1,1) with (0,0) being the lower left corner. Declaration public Vector2 normalizedPosition { get; set; } Property Value Type Description Vector2 Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class ExampleClass : MonoBehaviour { public ScrollRect myScrollRect; public Vector2 myPosition = new Vector2(0.5f, 0.5f); public void Start() { //Change the current scroll position. myScrollRect.normalizedPosition = myPosition; } } onValueChanged Declaration public ScrollRect.ScrollRectEvent onValueChanged { get; set; } Property Value Type Description ScrollRect.ScrollRectEvent preferredHeight Called by the layout system. Declaration public virtual float preferredHeight { get; } Property Value Type Description Single Implements ILayoutElement.preferredHeight preferredWidth Called by the layout system. Declaration public virtual float preferredWidth { get; } Property Value Type Description Single Implements ILayoutElement.preferredWidth scrollSensitivity The sensitivity to scroll wheel and track pad scroll events. Declaration public float scrollSensitivity { get; set; } Property Value Type Description Single Remarks Higher values indicate higher sensitivity. velocity The current velocity of the content. Declaration public Vector2 velocity { get; set; } Property Value Type Description Vector2 Remarks The velocity is defined in units per second. vertical Should vertical scrolling be enabled? Declaration public bool vertical { get; set; } Property Value Type Description Boolean Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class ExampleClass : MonoBehaviour { public ScrollRect myScrollRect; public void Start() { // Is Vertical scrolling enabled? if (myScrollRect.vertical == true) { Debug.Log(\"Vertical Scrolling is Enabled!\"); } } } verticalNormalizedPosition The vertical scroll position as a value between 0 and 1, with 0 being at the bottom. Declaration public float verticalNormalizedPosition { get; set; } Property Value Type Description Single Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class ExampleClass : MonoBehaviour { public ScrollRect myScrollRect; public Scrollbar newScrollBar; public void Start() { //Change the current vertical scroll position. myScrollRect.verticalNormalizedPosition = 0.5f; } } verticalScrollbar Optional Scrollbar object linked to the vertical scrolling of the ScrollRect. Declaration public Scrollbar verticalScrollbar { get; set; } Property Value Type Description Scrollbar Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class ExampleClass : MonoBehaviour { public ScrollRect myScrollRect; public Scrollbar newScrollBar; public void Start() { // Assigns a scroll bar element to the ScrollRect, allowing you to scroll in the vertical axis. myScrollRect.verticalScrollbar = newScrollBar; } } verticalScrollbarSpacing The space between the scrollbar and the viewport. Declaration public float verticalScrollbarSpacing { get; set; } Property Value Type Description Single verticalScrollbarVisibility The mode of visibility for the vertical scrollbar. Declaration public ScrollRect.ScrollbarVisibility verticalScrollbarVisibility { get; set; } Property Value Type Description ScrollRect.ScrollbarVisibility viewport Reference to the viewport RectTransform that is the parent of the content RectTransform. Declaration public RectTransform viewport { get; set; } Property Value Type Description RectTransform viewRect Declaration protected RectTransform viewRect { get; } Property Value Type Description RectTransform Methods CalculateLayoutInputHorizontal() Called by the layout system. Declaration public virtual void CalculateLayoutInputHorizontal() Implements ILayoutElement.CalculateLayoutInputHorizontal() CalculateLayoutInputVertical() Called by the layout system. Declaration public virtual void CalculateLayoutInputVertical() Implements ILayoutElement.CalculateLayoutInputVertical() GraphicUpdateComplete() Declaration public virtual void GraphicUpdateComplete() Implements ICanvasElement.GraphicUpdateComplete() IsActive() See member in base class. Declaration public override bool IsActive() Returns Type Description Boolean Overrides UIBehaviour.IsActive() Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class ExampleClass : MonoBehaviour { public ScrollRect myScrollRect; public void Start() { //Checks if the ScrollRect called \"myScrollRect\" is active. if (myScrollRect.IsActive()) { Debug.Log(\"The Scroll Rect is active!\"); } } } LateUpdate() Declaration protected virtual void LateUpdate() LayoutComplete() Declaration public virtual void LayoutComplete() Implements ICanvasElement.LayoutComplete() OnBeginDrag(PointerEventData) Handling for when the content is beging being dragged. Declaration public virtual void OnBeginDrag(PointerEventData eventData) Parameters Type Name Description PointerEventData eventData Implements IBeginDragHandler.OnBeginDrag(PointerEventData) Examples using UnityEngine; using System.Collections; using UnityEngine.EventSystems; // Required when using event data public class ExampleClass : MonoBehaviour, IBeginDragHandler // required interface when using the OnBeginDrag method. { //Do this when the user starts dragging the element this script is attached to.. public void OnBeginDrag(PointerEventData data) { Debug.Log(\"They started dragging \" + this.name); } } OnDisable() Declaration protected override void OnDisable() Overrides UIBehaviour.OnDisable() OnDrag(PointerEventData) Handling for when the content is dragged. Declaration public virtual void OnDrag(PointerEventData eventData) Parameters Type Name Description PointerEventData eventData Implements IDragHandler.OnDrag(PointerEventData) Examples using UnityEngine; using System.Collections; using UnityEngine.EventSystems; // Required when using event data public class ExampleClass : MonoBehaviour, IDragHandler // required interface when using the OnDrag method. { //Do this while the user is dragging this UI Element. public void OnDrag(PointerEventData data) { Debug.Log(\"Currently dragging \" + this.name); } } OnEnable() Declaration protected override void OnEnable() Overrides UIBehaviour.OnEnable() OnEndDrag(PointerEventData) Handling for when the content has finished being dragged. Declaration public virtual void OnEndDrag(PointerEventData eventData) Parameters Type Name Description PointerEventData eventData Implements IEndDragHandler.OnEndDrag(PointerEventData) Examples using UnityEngine; using System.Collections; using UnityEngine.EventSystems; // Required when using event data public class ExampleClass : MonoBehaviour, IEndDragHandler // required interface when using the OnEndDrag method. { //Do this when the user stops dragging this UI Element. public void OnEndDrag(PointerEventData data) { Debug.Log(\"Stopped dragging \" + this.name + \"!\"); } } OnInitializePotentialDrag(PointerEventData) Declaration public virtual void OnInitializePotentialDrag(PointerEventData eventData) Parameters Type Name Description PointerEventData eventData Implements IInitializePotentialDragHandler.OnInitializePotentialDrag(PointerEventData) OnRectTransformDimensionsChange() Declaration protected override void OnRectTransformDimensionsChange() Overrides UIBehaviour.OnRectTransformDimensionsChange() OnScroll(PointerEventData) Declaration public virtual void OnScroll(PointerEventData data) Parameters Type Name Description PointerEventData data Implements IScrollHandler.OnScroll(PointerEventData) Rebuild(CanvasUpdate) Rebuilds the scroll rect data after initialization. Declaration public virtual void Rebuild(CanvasUpdate executing) Parameters Type Name Description CanvasUpdate executing The current step in the rendering CanvasUpdate cycle. Implements ICanvasElement.Rebuild(CanvasUpdate) SetContentAnchoredPosition(Vector2) Sets the anchored position of the content. Declaration protected virtual void SetContentAnchoredPosition(Vector2 position) Parameters Type Name Description Vector2 position SetDirty() Override to alter or add to the code that keeps the appearance of the scroll rect synced with its data. Declaration protected void SetDirty() SetDirtyCaching() Override to alter or add to the code that caches data to avoid repeated heavy operations. Declaration protected void SetDirtyCaching() SetLayoutHorizontal() Called by the layout system. Declaration public virtual void SetLayoutHorizontal() Implements ILayoutController.SetLayoutHorizontal() SetLayoutVertical() Called by the layout system. Declaration public virtual void SetLayoutVertical() Implements ILayoutController.SetLayoutVertical() SetNormalizedPosition(Single, Int32) Set the horizontal or vertical scroll position as a value between 0 and 1, with 0 being at the left or at the bottom. Declaration protected virtual void SetNormalizedPosition(float value, int axis) Parameters Type Name Description Single value The position to set, between 0 and 1. Int32 axis The axis to set: 0 for horizontal, 1 for vertical. StopMovement() Sets the velocity to zero on both axes so the content stops moving. Declaration public virtual void StopMovement() UpdateBounds() Calculate the bounds the ScrollRect should be using. Declaration protected void UpdateBounds() UpdatePrevData() Helper function to update the previous data fields on a ScrollRect. Call this before you change data in the ScrollRect. Declaration protected void UpdatePrevData() Extension Methods UIBehaviourExtensions.InvokeOnEnable(UIBehaviour) UIBehaviourExtensions.InvokeOnDisable(UIBehaviour) UIBehaviourExtensions.InvokeAwake(UIBehaviour) UIBehaviourExtensions.InvokeRebuild(UIBehaviour, CanvasUpdate) UIBehaviourExtensions.InvokeLateUpdate(UIBehaviour) UIBehaviourExtensions.InvokeUpdate(UIBehaviour) UIBehaviourExtensions.InvokeOnRectTransformDimensionsChange(UIBehaviour) UIBehaviourExtensions.InvokeOnCanvasGroupChanged(UIBehaviour) UIBehaviourExtensions.InvokeOnDidApplyAnimationProperties(UIBehaviour)"
  },
  "api/UnityEngine.EventSystems.html": {
    "href": "api/UnityEngine.EventSystems.html",
    "title": "Namespace UnityEngine.EventSystems | Unity UI | 1.0.0",
    "keywords": "Namespace UnityEngine.EventSystems Classes AbstractEventData A class that can be used for sending simple events via the event system. AxisEventData Event Data associated with Axis Events (Controller / Keyboard). BaseEventData A class that contains the base event data that is common to all event types in the new EventSystem. BaseInput Interface to the Input system used by the BaseInputModule. With this it is possible to bypass the Input system with your own but still use the same InputModule. For example this can be used to feed fake input into the UI or interface with a different input system. BaseInputModule BaseRaycaster Base class for any RayCaster. EventSystem EventTrigger EventTrigger.Entry EventTrigger.TriggerEvent ExecuteEvents Physics2DRaycaster Simple event system using physics raycasts. PhysicsRaycaster Simple event system using physics raycasts. PointerEventData Each touch event creates one of these containing all the relevant information. PointerInputModule A BaseInputModule for pointer input. PointerInputModule.ButtonState PointerInputModule.MouseButtonEventData Information about a mouse button event. PointerInputModule.MouseState StandaloneInputModule TouchInputModule UIBehaviour Base behaviour that has protected implementations of Unity lifecycle functions. Structs RaycastResult A hit result from a BaseRaycaster. Interfaces IBeginDragHandler Interface to implement if you wish to receive OnBeginDrag callbacks. Note: You need to implement IDragHandler in addition to IBeginDragHandler. ICancelHandler Interface to implement if you wish to receive OnCancel callbacks. IDeselectHandler Interface to implement if you wish to receive OnDeselect callbacks. IDragHandler IDropHandler Interface to implement if you wish to receive OnDrop callbacks. IEndDragHandler Interface to implement if you wish to receive OnEndDrag callbacks. Note: You need to implement IDragHandler in addition to IEndDragHandler. IEventSystemHandler Base class that all EventSystem events inherit from. IInitializePotentialDragHandler Interface to implement if you wish to receive OnInitializePotentialDrag callbacks. IMoveHandler Interface to implement if you wish to receive OnMove callbacks. IPointerClickHandler Interface to implement if you wish to receive OnPointerClick callbacks. IPointerDownHandler Interface to implement if you wish to receive OnPointerDown callbacks. IPointerEnterHandler Interface to implement if you wish to receive OnPointerEnter callbacks. IPointerExitHandler Interface to implement if you wish to receive OnPointerExit callbacks. IPointerUpHandler Interface to implement if you wish to receive OnPointerUp callbacks. Note: In order to receive OnPointerUp callbacks, you must also implement the EventSystems.IPointerDownHandler|IPointerDownHandler interface IScrollHandler Interface to implement if you wish to receive OnScroll callbacks. ISelectHandler Interface to implement if you wish to receive OnSelect callbacks. ISubmitHandler Interface to implement if you wish to receive OnSubmit callbacks. IUpdateSelectedHandler Interface to implement if you wish to receive OnUpdateSelected callbacks. Enums EventHandle EventTriggerType This class is capable of triggering one or more remote functions from a specified event. Usage: Attach it to an object with a collider, or to a GUI Graphic of your choice. NOTE: Doing this will make this object intercept ALL events, and no event bubbling will occur from this object! MoveDirection PointerEventData.FramePressState The state of a press for the given frame. PointerEventData.InputButton Input press tracking. StandaloneInputModule.InputMode Delegates ExecuteEvents.EventFunction<T1>"
  },
  "api/UnityEngine.EventSystems.PointerInputModule.ButtonState.html": {
    "href": "api/UnityEngine.EventSystems.PointerInputModule.ButtonState.html",
    "title": "Class PointerInputModule.ButtonState | Unity UI | 1.0.0",
    "keywords": "Class PointerInputModule.ButtonState Inheritance Object PointerInputModule.ButtonState Namespace : UnityEngine.EventSystems <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax protected class ButtonState Properties button Declaration public PointerEventData.InputButton button { get; set; } Property Value Type Description PointerEventData.InputButton eventData Declaration public PointerInputModule.MouseButtonEventData eventData { get; set; } Property Value Type Description PointerInputModule.MouseButtonEventData"
  },
  "api/UnityEditor.EventSystems.html": {
    "href": "api/UnityEditor.EventSystems.html",
    "title": "Namespace UnityEditor.EventSystems | Unity UI | 1.0.0",
    "keywords": "Namespace UnityEditor.EventSystems Classes EventSystemEditor EventTriggerEditor Physics2DRaycasterEditor PhysicsRaycasterEditor"
  },
  "api/InputfieldTests.TouchInputFieldTests.CharValidationTestData.html": {
    "href": "api/InputfieldTests.TouchInputFieldTests.CharValidationTestData.html",
    "title": "Struct TouchInputFieldTests.CharValidationTestData | Unity UI | 1.0.0",
    "keywords": "Struct TouchInputFieldTests.CharValidationTestData Namespace : InputfieldTests <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct CharValidationTestData Constructors CharValidationTestData(String, String, InputField.CharacterValidation) Declaration public CharValidationTestData(string input, string output, InputField.CharacterValidation validation) Parameters Type Name Description String input String output InputField.CharacterValidation validation Fields input Declaration public string input Field Value Type Description String output Declaration public string output Field Value Type Description String validation Declaration public InputField.CharacterValidation validation Field Value Type Description InputField.CharacterValidation Methods ToString() Declaration public override string ToString() Returns Type Description String Overrides ValueType.ToString()"
  },
  "api/InputfieldTests.html": {
    "href": "api/InputfieldTests.html",
    "title": "Namespace InputfieldTests | Unity UI | 1.0.0",
    "keywords": "Namespace InputfieldTests Classes BaseInputFieldTests DesktopInputFieldTests FakeInputModule GenericInputFieldTests TouchInputFieldTests Structs TouchInputFieldTests.CharValidationTestData"
  },
  "api/UnityEngine.UI.Tests.ConcreteGraphic.html": {
    "href": "api/UnityEngine.UI.Tests.ConcreteGraphic.html",
    "title": "Class ConcreteGraphic | Unity UI | 1.0.0",
    "keywords": "Class ConcreteGraphic Inheritance Object UIBehaviour Graphic ConcreteGraphic Inherited Members Graphic.s_DefaultUI Graphic.s_WhiteTexture Graphic.defaultGraphicMaterial Graphic.m_Material Graphic.m_SkipLayoutUpdate Graphic.m_SkipMaterialUpdate Graphic.color Graphic.raycastTarget Graphic.raycastPadding Graphic.m_OnDirtyLayoutCallback Graphic.m_OnDirtyVertsCallback Graphic.m_OnDirtyMaterialCallback Graphic.s_Mesh Graphic.m_CachedMesh Graphic.m_CachedUvs Graphic.useLegacyMeshGeneration Graphic.SetAllDirty() Graphic.SetLayoutDirty() Graphic.SetVerticesDirty() Graphic.SetMaterialDirty() Graphic.OnRectTransformDimensionsChange() Graphic.OnBeforeTransformParentChanged() Graphic.OnTransformParentChanged() Graphic.depth Graphic.rectTransform Graphic.canvas Graphic.canvasRenderer Graphic.defaultMaterial Graphic.material Graphic.materialForRendering Graphic.mainTexture Graphic.OnEnable() Graphic.OnDisable() Graphic.OnDestroy() Graphic.OnCanvasHierarchyChanged() Graphic.OnCullingChanged() Graphic.Rebuild(CanvasUpdate) Graphic.LayoutComplete() Graphic.GraphicUpdateComplete() Graphic.UpdateMaterial() Graphic.UpdateGeometry() Graphic.workerMesh Graphic.OnFillVBO(List<UIVertex>) Graphic.OnPopulateMesh(Mesh) Graphic.OnPopulateMesh(VertexHelper) Graphic.OnDidApplyAnimationProperties() Graphic.SetNativeSize() Graphic.Raycast(Vector2, Camera) Graphic.PixelAdjustPoint(Vector2) Graphic.GetPixelAdjustedRect() Graphic.CrossFadeColor(Color, Single, Boolean, Boolean) Graphic.CrossFadeColor(Color, Single, Boolean, Boolean, Boolean) Graphic.CrossFadeAlpha(Single, Single, Boolean) Graphic.RegisterDirtyLayoutCallback(UnityAction) Graphic.UnregisterDirtyLayoutCallback(UnityAction) Graphic.RegisterDirtyVerticesCallback(UnityAction) Graphic.UnregisterDirtyVerticesCallback(UnityAction) Graphic.RegisterDirtyMaterialCallback(UnityAction) Graphic.UnregisterDirtyMaterialCallback(UnityAction) UIBehaviour.Awake() UIBehaviour.Start() UIBehaviour.IsActive() UIBehaviour.OnCanvasGroupChanged() UIBehaviour.IsDestroyed() Namespace : UnityEngine.UI.Tests <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class ConcreteGraphic : Graphic, ICanvasElement Methods ToString() Declaration public override string ToString() Returns Type Description String Extension Methods UIBehaviourExtensions.InvokeOnEnable(UIBehaviour) UIBehaviourExtensions.InvokeOnDisable(UIBehaviour) UIBehaviourExtensions.InvokeAwake(UIBehaviour) UIBehaviourExtensions.InvokeRebuild(UIBehaviour, CanvasUpdate) UIBehaviourExtensions.InvokeLateUpdate(UIBehaviour) UIBehaviourExtensions.InvokeUpdate(UIBehaviour) UIBehaviourExtensions.InvokeOnRectTransformDimensionsChange(UIBehaviour) UIBehaviourExtensions.InvokeOnCanvasGroupChanged(UIBehaviour) UIBehaviourExtensions.InvokeOnDidApplyAnimationProperties(UIBehaviour) GraphicExtension.InvokeOnPopulateMesh(Graphic, VertexHelper)"
  },
  "api/UnityEngine.UI.StencilMaterial.html": {
    "href": "api/UnityEngine.UI.StencilMaterial.html",
    "title": "Class StencilMaterial | Unity UI | 1.0.0",
    "keywords": "Class StencilMaterial Dynamic material class makes it possible to create custom materials on the fly on a per-Graphic basis, and still have them get cleaned up correctly. Inheritance Object StencilMaterial Namespace : UnityEngine.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class StencilMaterial Methods Add(Material, Int32) Declaration [Obsolete(\"Use Material.Add instead.\", true)] public static Material Add(Material baseMat, int stencilID) Parameters Type Name Description Material baseMat Int32 stencilID Returns Type Description Material Add(Material, Int32, StencilOp, CompareFunction, ColorWriteMask) Add a new material using the specified base and stencil ID. Declaration public static Material Add(Material baseMat, int stencilID, StencilOp operation, CompareFunction compareFunction, ColorWriteMask colorWriteMask) Parameters Type Name Description Material baseMat Int32 stencilID StencilOp operation CompareFunction compareFunction ColorWriteMask colorWriteMask Returns Type Description Material Add(Material, Int32, StencilOp, CompareFunction, ColorWriteMask, Int32, Int32) Add a new material using the specified base and stencil ID. Declaration public static Material Add(Material baseMat, int stencilID, StencilOp operation, CompareFunction compareFunction, ColorWriteMask colorWriteMask, int readMask, int writeMask) Parameters Type Name Description Material baseMat Int32 stencilID StencilOp operation CompareFunction compareFunction ColorWriteMask colorWriteMask Int32 readMask Int32 writeMask Returns Type Description Material ClearAll() Declaration public static void ClearAll() Remove(Material) Remove an existing material, automatically cleaning it up if it's no longer in use. Declaration public static void Remove(Material customMat) Parameters Type Name Description Material customMat"
  },
  "api/UnityEngine.UI.AnimationTriggers.html": {
    "href": "api/UnityEngine.UI.AnimationTriggers.html",
    "title": "Class AnimationTriggers | Unity UI | 1.0.0",
    "keywords": "Class AnimationTriggers Structure that stores the state of an animation transition on a Selectable. Inheritance Object AnimationTriggers Namespace : UnityEngine.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] public class AnimationTriggers Properties disabledTrigger Trigger to send to animator when entering disabled state. Declaration public string disabledTrigger { get; set; } Property Value Type Description String Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class ExampleClass : MonoBehaviour { public Animator buttonAnimator; public Button button; void SomeFunction() { //Sets the button to the Disabled state (Useful when making tutorials). buttonAnimator.SetTrigger(button.animationTriggers.disabledTrigger); } } highlightedTrigger Trigger to send to animator when entering highlighted state. Declaration public string highlightedTrigger { get; set; } Property Value Type Description String Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class ExampleClass : MonoBehaviour { public Animator buttonAnimator; public Button button; void SomeFunction() { //Sets the button to the Highlighted state (Useful when making tutorials). buttonAnimator.SetTrigger(button.animationTriggers.highlightedTrigger); } } normalTrigger Trigger to send to animator when entering normal state. Declaration public string normalTrigger { get; set; } Property Value Type Description String Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class ExampleClass : MonoBehaviour { public Animator buttonAnimator; public Button button; void SomeFunction() { //Sets the button to the Normal state (Useful when making tutorials). buttonAnimator.SetTrigger(button.animationTriggers.normalTrigger); } } pressedTrigger Trigger to send to animator when entering pressed state. Declaration public string pressedTrigger { get; set; } Property Value Type Description String Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class ExampleClass : MonoBehaviour { public Animator buttonAnimator; public Button button; void SomeFunction() { //Sets the button to the Pressed state (Useful when making tutorials). buttonAnimator.SetTrigger(button.animationTriggers.pressedTrigger); } } selectedTrigger Trigger to send to animator when entering selected state. Declaration public string selectedTrigger { get; set; } Property Value Type Description String Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class ExampleClass : MonoBehaviour { public Animator buttonAnimator; public Button button; void SomeFunction() { //Sets the button to the Selected state (Useful when making tutorials). buttonAnimator.SetTrigger(button.animationTriggers.selectedTrigger); } }"
  },
  "api/UnityEngine.EventSystems.ISubmitHandler.html": {
    "href": "api/UnityEngine.EventSystems.ISubmitHandler.html",
    "title": "Interface ISubmitHandler | Unity UI | 1.0.0",
    "keywords": "Interface ISubmitHandler Interface to implement if you wish to receive OnSubmit callbacks. Namespace : UnityEngine.EventSystems <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public interface ISubmitHandler : IEventSystemHandler Remarks Criteria for this event is implementation dependent. For example see StandAloneInputModule. Methods OnSubmit(BaseEventData) Declaration void OnSubmit(BaseEventData eventData) Parameters Type Name Description BaseEventData eventData"
  },
  "api/UnityEngine.EventSystems.ICancelHandler.html": {
    "href": "api/UnityEngine.EventSystems.ICancelHandler.html",
    "title": "Interface ICancelHandler | Unity UI | 1.0.0",
    "keywords": "Interface ICancelHandler Interface to implement if you wish to receive OnCancel callbacks. Namespace : UnityEngine.EventSystems <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public interface ICancelHandler : IEventSystemHandler Remarks Criteria for this event is implementation dependent. For example see StandAloneInputModule. Methods OnCancel(BaseEventData) Declaration void OnCancel(BaseEventData eventData) Parameters Type Name Description BaseEventData eventData"
  },
  "api/UnityEngine.EventSystems.BaseRaycaster.html": {
    "href": "api/UnityEngine.EventSystems.BaseRaycaster.html",
    "title": "Class BaseRaycaster | Unity UI | 1.0.0",
    "keywords": "Class BaseRaycaster Base class for any RayCaster. Inheritance Object UIBehaviour BaseRaycaster PhysicsRaycaster GraphicRaycaster Inherited Members UIBehaviour.Awake() UIBehaviour.Start() UIBehaviour.OnDestroy() UIBehaviour.IsActive() UIBehaviour.OnRectTransformDimensionsChange() UIBehaviour.OnBeforeTransformParentChanged() UIBehaviour.OnDidApplyAnimationProperties() UIBehaviour.OnCanvasGroupChanged() UIBehaviour.IsDestroyed() Namespace : UnityEngine.EventSystems <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public abstract class BaseRaycaster : UIBehaviour Remarks A Raycaster is responsible for raycasting against scene elements to determine if the cursor is over them. Default Raycasters include PhysicsRaycaster, Physics2DRaycaster, GraphicRaycaster. Custom raycasters can be added by extending this class. Properties eventCamera The camera that will generate rays for this raycaster. Declaration public abstract Camera eventCamera { get; } Property Value Type Description Camera priority Declaration [Obsolete(\"Please use sortOrderPriority and renderOrderPriority\", false)] public virtual int priority { get; } Property Value Type Description Int32 renderOrderPriority Priority of the raycaster based upon render order. Declaration public virtual int renderOrderPriority { get; } Property Value Type Description Int32 rootRaycaster Raycaster on root canvas Declaration public BaseRaycaster rootRaycaster { get; } Property Value Type Description BaseRaycaster sortOrderPriority Priority of the raycaster based upon sort order. Declaration public virtual int sortOrderPriority { get; } Property Value Type Description Int32 Methods OnCanvasHierarchyChanged() Declaration protected override void OnCanvasHierarchyChanged() Overrides UIBehaviour.OnCanvasHierarchyChanged() OnDisable() Declaration protected override void OnDisable() Overrides UIBehaviour.OnDisable() OnEnable() Declaration protected override void OnEnable() Overrides UIBehaviour.OnEnable() OnTransformParentChanged() Declaration protected override void OnTransformParentChanged() Overrides UIBehaviour.OnTransformParentChanged() Raycast(PointerEventData, List<RaycastResult>) Raycast against the scene. Declaration public abstract void Raycast(PointerEventData eventData, List<RaycastResult> resultAppendList) Parameters Type Name Description PointerEventData eventData Current event data. List < RaycastResult > resultAppendList List of hit Objects. ToString() Declaration public override string ToString() Returns Type Description String Extension Methods UIBehaviourExtensions.InvokeOnEnable(UIBehaviour) UIBehaviourExtensions.InvokeOnDisable(UIBehaviour) UIBehaviourExtensions.InvokeAwake(UIBehaviour) UIBehaviourExtensions.InvokeRebuild(UIBehaviour, CanvasUpdate) UIBehaviourExtensions.InvokeLateUpdate(UIBehaviour) UIBehaviourExtensions.InvokeUpdate(UIBehaviour) UIBehaviourExtensions.InvokeOnRectTransformDimensionsChange(UIBehaviour) UIBehaviourExtensions.InvokeOnCanvasGroupChanged(UIBehaviour) UIBehaviourExtensions.InvokeOnDidApplyAnimationProperties(UIBehaviour)"
  },
  "api/UnityEngine.UI.Toggle.ToggleEvent.html": {
    "href": "api/UnityEngine.UI.Toggle.ToggleEvent.html",
    "title": "Class Toggle.ToggleEvent | Unity UI | 1.0.0",
    "keywords": "Class Toggle.ToggleEvent Inheritance Object Toggle.ToggleEvent Namespace : UnityEngine.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] public class ToggleEvent : UnityEvent<bool>"
  },
  "api/UnityEngine.UI.ILayoutController.html": {
    "href": "api/UnityEngine.UI.ILayoutController.html",
    "title": "Interface ILayoutController | Unity UI | 1.0.0",
    "keywords": "Interface ILayoutController Base interface to be implemented by components that control the layout of RectTransforms. Namespace : UnityEngine.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public interface ILayoutController Remarks If a component is driving its own RectTransform it should implement the interface [[ILayoutSelfController]]. If a component is driving the RectTransforms of its children, it should implement [[ILayoutGroup]]. The layout system will first invoke SetLayoutHorizontal and then SetLayoutVertical. In the SetLayoutHorizontal call it is valid to call LayoutUtility.GetMinWidth, LayoutUtility.GetPreferredWidth, and LayoutUtility.GetFlexibleWidth on the RectTransform of itself or any of its children. In the SetLayoutVertical call it is valid to call LayoutUtility.GetMinHeight, LayoutUtility.GetPreferredHeight, and LayoutUtility.GetFlexibleHeight on the RectTransform of itself or any of its children. The component may use this information to determine the width and height to use for its own RectTransform or the RectTransforms of its children. Methods SetLayoutHorizontal() Callback invoked by the auto layout system which handles horizontal aspects of the layout. Declaration void SetLayoutHorizontal() SetLayoutVertical() Callback invoked by the auto layout system which handles vertical aspects of the layout. Declaration void SetLayoutVertical()"
  },
  "api/UnityEngine.EventSystems.UIBehaviour.html": {
    "href": "api/UnityEngine.EventSystems.UIBehaviour.html",
    "title": "Class UIBehaviour | Unity UI | 1.0.0",
    "keywords": "Class UIBehaviour Base behaviour that has protected implementations of Unity lifecycle functions. Inheritance Object UIBehaviour BaseInput BaseInputModule BaseRaycaster EventSystem AspectRatioFitter BaseMeshEffect CanvasScaler ContentSizeFitter Graphic LayoutElement LayoutGroup Mask RectMask2D ScrollRect Selectable ToggleGroup Namespace : UnityEngine.EventSystems <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public abstract class UIBehaviour : MonoBehaviour Methods Awake() Declaration protected virtual void Awake() IsActive() Returns true if the GameObject and the Component are active. Declaration public virtual bool IsActive() Returns Type Description Boolean IsDestroyed() Returns true if the native representation of the behaviour has been destroyed. Declaration public bool IsDestroyed() Returns Type Description Boolean Remarks When a parent canvas is either enabled, disabled or a nested canvas's OverrideSorting is changed this function is called. You can for example use this to modify objects below a canvas that may depend on a parent canvas - for example, if a canvas is disabled you may want to halt some processing of a UI element. OnBeforeTransformParentChanged() Declaration protected virtual void OnBeforeTransformParentChanged() OnCanvasGroupChanged() Declaration protected virtual void OnCanvasGroupChanged() OnCanvasHierarchyChanged() Called when the state of the parent Canvas is changed. Declaration protected virtual void OnCanvasHierarchyChanged() OnDestroy() Declaration protected virtual void OnDestroy() OnDidApplyAnimationProperties() Declaration protected virtual void OnDidApplyAnimationProperties() OnDisable() Declaration protected virtual void OnDisable() OnEnable() Declaration protected virtual void OnEnable() OnRectTransformDimensionsChange() This callback is called when the dimensions of an associated RectTransform change. It is always called before Awake, OnEnable, or Start. The call is also made to all child RectTransforms, regardless of whether their dimensions change (which depends on how they are anchored). Declaration protected virtual void OnRectTransformDimensionsChange() OnTransformParentChanged() Declaration protected virtual void OnTransformParentChanged() Start() Declaration protected virtual void Start() Extension Methods UIBehaviourExtensions.InvokeOnEnable(UIBehaviour) UIBehaviourExtensions.InvokeOnDisable(UIBehaviour) UIBehaviourExtensions.InvokeAwake(UIBehaviour) UIBehaviourExtensions.InvokeRebuild(UIBehaviour, CanvasUpdate) UIBehaviourExtensions.InvokeLateUpdate(UIBehaviour) UIBehaviourExtensions.InvokeUpdate(UIBehaviour) UIBehaviourExtensions.InvokeOnRectTransformDimensionsChange(UIBehaviour) UIBehaviourExtensions.InvokeOnCanvasGroupChanged(UIBehaviour) UIBehaviourExtensions.InvokeOnDidApplyAnimationProperties(UIBehaviour)"
  },
  "api/UnityEngine.EventSystems.PointerEventData.html": {
    "href": "api/UnityEngine.EventSystems.PointerEventData.html",
    "title": "Class PointerEventData | Unity UI | 1.0.0",
    "keywords": "Class PointerEventData Each touch event creates one of these containing all the relevant information. Inheritance Object AbstractEventData BaseEventData PointerEventData Inherited Members BaseEventData.currentInputModule BaseEventData.selectedObject AbstractEventData.m_Used AbstractEventData.Reset() AbstractEventData.Use() AbstractEventData.used Namespace : UnityEngine.EventSystems <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class PointerEventData : BaseEventData Constructors PointerEventData(EventSystem) Declaration public PointerEventData(EventSystem eventSystem) Parameters Type Name Description EventSystem eventSystem Fields hovered Declaration public List<GameObject> hovered Field Value Type Description List < GameObject > Properties button The EventSystems.PointerEventData.InputButton for this event. Declaration public PointerEventData.InputButton button { get; set; } Property Value Type Description PointerEventData.InputButton clickCount Number of clicks in a row. Declaration public int clickCount { get; set; } Property Value Type Description Int32 Examples using UnityEngine; using System.Collections; using UnityEngine.UI; using UnityEngine.EventSystems;// Required when using Event data. public class ExampleClass : MonoBehaviour, IPointerDownHandler { public void OnPointerDown(PointerEventData eventData) { //Grab the number of consecutive clicks and assign it to an integer varible. int i = eventData.clickCount; //Display the click count. Debug.Log(i); } } clickTime The last time a click event was sent. Used for double click Declaration public float clickTime { get; set; } Property Value Type Description Single delta Pointer delta since last update. Declaration public Vector2 delta { get; set; } Property Value Type Description Vector2 dragging Is a drag operation currently occuring. Declaration public bool dragging { get; set; } Property Value Type Description Boolean eligibleForClick Is it possible to click this frame Declaration public bool eligibleForClick { get; set; } Property Value Type Description Boolean enterEventCamera The camera associated with the last OnPointerEnter event. Declaration public Camera enterEventCamera { get; } Property Value Type Description Camera lastPress The raw GameObject for the last press event. This means that it is the 'pressed' GameObject even if it can not receive the press event itself. Declaration public GameObject lastPress { get; } Property Value Type Description GameObject pointerClick The object that should receive the 'OnPointerClick' event. Declaration public GameObject pointerClick { get; set; } Property Value Type Description GameObject pointerCurrentRaycast RaycastResult associated with the current event. Declaration public RaycastResult pointerCurrentRaycast { get; set; } Property Value Type Description RaycastResult pointerDrag The object that is receiving 'OnDrag'. Declaration public GameObject pointerDrag { get; set; } Property Value Type Description GameObject pointerEnter The object that received 'OnPointerEnter'. Declaration public GameObject pointerEnter { get; set; } Property Value Type Description GameObject pointerId Id of the pointer (touch id). Declaration public int pointerId { get; set; } Property Value Type Description Int32 pointerPress The GameObject that received the OnPointerDown. Declaration public GameObject pointerPress { get; set; } Property Value Type Description GameObject pointerPressRaycast RaycastResult associated with the pointer press. Declaration public RaycastResult pointerPressRaycast { get; set; } Property Value Type Description RaycastResult position Current pointer position. Declaration public Vector2 position { get; set; } Property Value Type Description Vector2 pressEventCamera The camera associated with the last OnPointerPress event. Declaration public Camera pressEventCamera { get; } Property Value Type Description Camera pressPosition Position of the press. Declaration public Vector2 pressPosition { get; set; } Property Value Type Description Vector2 rawPointerPress The object that the press happened on even if it can not handle the press event. Declaration public GameObject rawPointerPress { get; set; } Property Value Type Description GameObject scrollDelta The amount of scroll since the last update. Declaration public Vector2 scrollDelta { get; set; } Property Value Type Description Vector2 useDragThreshold Should a drag threshold be used? Declaration public bool useDragThreshold { get; set; } Property Value Type Description Boolean Remarks If you do not want a drag threshold set this to false in IInitializePotentialDragHandler.OnInitializePotentialDrag. worldNormal World-space normal where a ray cast into the screen hits something Declaration [Obsolete(\"Use either pointerCurrentRaycast.worldNormal or pointerPressRaycast.worldNormal\")] public Vector3 worldNormal { get; set; } Property Value Type Description Vector3 worldPosition World-space position where a ray cast into the screen hits something Declaration [Obsolete(\"Use either pointerCurrentRaycast.worldPosition or pointerPressRaycast.worldPosition\")] public Vector3 worldPosition { get; set; } Property Value Type Description Vector3 Methods IsPointerMoving() Is the pointer moving. Declaration public bool IsPointerMoving() Returns Type Description Boolean IsScrolling() Is scroll being used on the input device. Declaration public bool IsScrolling() Returns Type Description Boolean ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString()"
  },
  "api/UnityEngine.EventSystems.IMoveHandler.html": {
    "href": "api/UnityEngine.EventSystems.IMoveHandler.html",
    "title": "Interface IMoveHandler | Unity UI | 1.0.0",
    "keywords": "Interface IMoveHandler Interface to implement if you wish to receive OnMove callbacks. Namespace : UnityEngine.EventSystems <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public interface IMoveHandler : IEventSystemHandler Remarks Criteria for this event is implementation dependent. For example see StandAloneInputModule. Methods OnMove(AxisEventData) Called by a BaseInputModule when a move event occurs. Declaration void OnMove(AxisEventData eventData) Parameters Type Name Description AxisEventData eventData"
  },
  "api/UnityEngine.EventSystems.ExecuteEvents.EventFunction-1.html": {
    "href": "api/UnityEngine.EventSystems.ExecuteEvents.EventFunction-1.html",
    "title": "Delegate ExecuteEvents.EventFunction<T1> | Unity UI | 1.0.0",
    "keywords": "Delegate ExecuteEvents.EventFunction<T1> Namespace : UnityEngine.EventSystems <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void EventFunction<T1>(T1 handler, BaseEventData eventData); Parameters Type Name Description T1 handler BaseEventData eventData Type Parameters Name Description T1"
  },
  "api/UnityEngine.UI.BaseVertexEffect.html": {
    "href": "api/UnityEngine.UI.BaseVertexEffect.html",
    "title": "Class BaseVertexEffect | Unity UI | 1.0.0",
    "keywords": "Class BaseVertexEffect Inheritance Object BaseVertexEffect Namespace : UnityEngine.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Obsolete(\"Use BaseMeshEffect instead\", true)] public abstract class BaseVertexEffect Methods ModifyVertices(List<UIVertex>) Declaration [Obsolete(\"Use BaseMeshEffect.ModifyMeshes instead\", true)] public abstract void ModifyVertices(List<UIVertex> vertices) Parameters Type Name Description List < UIVertex > vertices"
  },
  "api/UnityEngine.EventSystems.MoveDirection.html": {
    "href": "api/UnityEngine.EventSystems.MoveDirection.html",
    "title": "Enum MoveDirection | Unity UI | 1.0.0",
    "keywords": "Enum MoveDirection Namespace : UnityEngine.EventSystems <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public enum MoveDirection Fields Name Description Down Left None Right Up"
  },
  "api/UnityEngine.EventSystems.IDeselectHandler.html": {
    "href": "api/UnityEngine.EventSystems.IDeselectHandler.html",
    "title": "Interface IDeselectHandler | Unity UI | 1.0.0",
    "keywords": "Interface IDeselectHandler Interface to implement if you wish to receive OnDeselect callbacks. Namespace : UnityEngine.EventSystems <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public interface IDeselectHandler : IEventSystemHandler Remarks Criteria for this event is implementation dependent. For example see StandAloneInputModule. Methods OnDeselect(BaseEventData) Called by the EventSystem when a new object is being selected. Declaration void OnDeselect(BaseEventData eventData) Parameters Type Name Description BaseEventData eventData"
  },
  "api/UnityEditor.UI.ScrollbarEditor.html": {
    "href": "api/UnityEditor.UI.ScrollbarEditor.html",
    "title": "Class ScrollbarEditor | Unity UI | 1.0.0",
    "keywords": "Class ScrollbarEditor Inheritance Object SelectableEditor ScrollbarEditor Inherited Members SelectableEditor.OnDisable() Namespace : UnityEditor.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class ScrollbarEditor : SelectableEditor Methods OnEnable() Declaration protected override void OnEnable() Overrides SelectableEditor.OnEnable() OnInspectorGUI() Declaration public override void OnInspectorGUI() Overrides SelectableEditor.OnInspectorGUI()"
  },
  "api/UnityEngine.EventSystems.IPointerUpHandler.html": {
    "href": "api/UnityEngine.EventSystems.IPointerUpHandler.html",
    "title": "Interface IPointerUpHandler | Unity UI | 1.0.0",
    "keywords": "Interface IPointerUpHandler Interface to implement if you wish to receive OnPointerUp callbacks. Note: In order to receive OnPointerUp callbacks, you must also implement the EventSystems.IPointerDownHandler|IPointerDownHandler interface Namespace : UnityEngine.EventSystems <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public interface IPointerUpHandler : IEventSystemHandler Remarks Criteria for this event is implementation dependent. For example see StandAloneInputModule. Methods OnPointerUp(PointerEventData) Use this callback to detect pointer up events. Declaration void OnPointerUp(PointerEventData eventData) Parameters Type Name Description PointerEventData eventData"
  },
  "api/UnityEngine.EventSystems.EventSystem.html": {
    "href": "api/UnityEngine.EventSystems.EventSystem.html",
    "title": "Class EventSystem | Unity UI | 1.0.0",
    "keywords": "Class EventSystem Inheritance Object UIBehaviour EventSystem Inherited Members UIBehaviour.Awake() UIBehaviour.Start() UIBehaviour.OnDestroy() UIBehaviour.IsActive() UIBehaviour.OnRectTransformDimensionsChange() UIBehaviour.OnBeforeTransformParentChanged() UIBehaviour.OnTransformParentChanged() UIBehaviour.OnDidApplyAnimationProperties() UIBehaviour.OnCanvasGroupChanged() UIBehaviour.OnCanvasHierarchyChanged() UIBehaviour.IsDestroyed() Namespace : UnityEngine.EventSystems <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class EventSystem : UIBehaviour Constructors EventSystem() Declaration protected EventSystem() Properties alreadySelecting Returns true if the EventSystem is already in a SetSelectedGameObject. Declaration public bool alreadySelecting { get; } Property Value Type Description Boolean current Return the current EventSystem. Declaration public static EventSystem current { get; set; } Property Value Type Description EventSystem currentInputModule The currently active EventSystems.BaseInputModule. Declaration public BaseInputModule currentInputModule { get; } Property Value Type Description BaseInputModule currentSelectedGameObject The GameObject currently considered active by the EventSystem. Declaration public GameObject currentSelectedGameObject { get; } Property Value Type Description GameObject firstSelectedGameObject Only one object can be selected at a time. Think: controller-selected button. Declaration public GameObject firstSelectedGameObject { get; set; } Property Value Type Description GameObject isFocused Flag to say whether the EventSystem thinks it should be paused or not based upon focused state. Declaration public bool isFocused { get; } Property Value Type Description Boolean Remarks Used to determine inside the individual InputModules if the module should be ticked while the application doesnt have focus. lastSelectedGameObject Declaration [Obsolete(\"lastSelectedGameObject is no longer supported\")] public GameObject lastSelectedGameObject { get; } Property Value Type Description GameObject pixelDragThreshold The soft area for dragging in pixels. Declaration public int pixelDragThreshold { get; set; } Property Value Type Description Int32 sendNavigationEvents Should the EventSystem allow navigation events (move / submit / cancel). Declaration public bool sendNavigationEvents { get; set; } Property Value Type Description Boolean Methods IsPointerOverGameObject() Is the pointer with the given ID over an EventSystem object? Declaration public bool IsPointerOverGameObject() Returns Type Description Boolean IsPointerOverGameObject(Int32) Is the pointer with the given ID over an EventSystem object? Declaration public bool IsPointerOverGameObject(int pointerId) Parameters Type Name Description Int32 pointerId Returns Type Description Boolean Remarks If you use IsPointerOverGameObject() without a parameter, it points to the \"left mouse button\" (pointerId = -1); therefore when you use IsPointerOverGameObject for touch, you should consider passing a pointerId to it Note that for touch, IsPointerOverGameObject should be used with ''OnMouseDown()'' or ''Input.GetMouseButtonDown(0)'' or ''Input.GetTouch(0).phase == TouchPhase.Began''. Examples using UnityEngine; using System.Collections; using UnityEngine.EventSystems; public class MouseExample : MonoBehaviour { void Update() { // Check if the left mouse button was clicked if (Input.GetMouseButtonDown(0)) { // Check if the mouse was clicked over a UI element if (EventSystem.current.IsPointerOverGameObject()) { Debug.Log(\"Clicked on the UI\"); } } } } OnApplicationFocus(Boolean) Declaration protected virtual void OnApplicationFocus(bool hasFocus) Parameters Type Name Description Boolean hasFocus OnDisable() Declaration protected override void OnDisable() Overrides UIBehaviour.OnDisable() OnEnable() Declaration protected override void OnEnable() Overrides UIBehaviour.OnEnable() RaycastAll(PointerEventData, List<RaycastResult>) Raycast into the scene using all configured BaseRaycasters. Declaration public void RaycastAll(PointerEventData eventData, List<RaycastResult> raycastResults) Parameters Type Name Description PointerEventData eventData Current pointer data. List < RaycastResult > raycastResults List of 'hits' to populate. SetSelectedGameObject(GameObject) Set the object as selected. Will send an OnDeselect the the old selected object and OnSelect to the new selected object. Declaration public void SetSelectedGameObject(GameObject selected) Parameters Type Name Description GameObject selected GameObject to select. SetSelectedGameObject(GameObject, BaseEventData) Set the object as selected. Will send an OnDeselect the the old selected object and OnSelect to the new selected object. Declaration public void SetSelectedGameObject(GameObject selected, BaseEventData pointer) Parameters Type Name Description GameObject selected GameObject to select. BaseEventData pointer Associated EventData. ToString() Declaration public override string ToString() Returns Type Description String Update() Declaration protected virtual void Update() UpdateModules() Recalculate the internal list of BaseInputModules. Declaration public void UpdateModules() Extension Methods UIBehaviourExtensions.InvokeOnEnable(UIBehaviour) UIBehaviourExtensions.InvokeOnDisable(UIBehaviour) UIBehaviourExtensions.InvokeAwake(UIBehaviour) UIBehaviourExtensions.InvokeRebuild(UIBehaviour, CanvasUpdate) UIBehaviourExtensions.InvokeLateUpdate(UIBehaviour) UIBehaviourExtensions.InvokeUpdate(UIBehaviour) UIBehaviourExtensions.InvokeOnRectTransformDimensionsChange(UIBehaviour) UIBehaviourExtensions.InvokeOnCanvasGroupChanged(UIBehaviour) UIBehaviourExtensions.InvokeOnDidApplyAnimationProperties(UIBehaviour)"
  },
  "api/UnityEditor.UI.HorizontalOrVerticalLayoutGroupEditor.html": {
    "href": "api/UnityEditor.UI.HorizontalOrVerticalLayoutGroupEditor.html",
    "title": "Class HorizontalOrVerticalLayoutGroupEditor | Unity UI | 1.0.0",
    "keywords": "Class HorizontalOrVerticalLayoutGroupEditor Inheritance Object HorizontalOrVerticalLayoutGroupEditor Namespace : UnityEditor.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class HorizontalOrVerticalLayoutGroupEditor : Editor Methods OnEnable() Declaration protected virtual void OnEnable() OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/Tests.html": {
    "href": "api/Tests.html",
    "title": "Namespace Tests | Unity UI | 1.0.0",
    "keywords": "Namespace Tests Classes UISystemProfilerAddMarkerWithNullObjectDoesNotCrash"
  },
  "api/InputfieldTests.DesktopInputFieldTests.html": {
    "href": "api/InputfieldTests.DesktopInputFieldTests.html",
    "title": "Class DesktopInputFieldTests | Unity UI | 1.0.0",
    "keywords": "Class DesktopInputFieldTests Inheritance Object BaseInputFieldTests DesktopInputFieldTests Inherited Members BaseInputFieldTests.m_PrefabRoot BaseInputFieldTests.CreateInputFieldAsset(String) Namespace : InputfieldTests <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class DesktopInputFieldTests : BaseInputFieldTests, IPrebuildSetup Fields kPrefabPath Declaration protected const string kPrefabPath = \"Assets/Resources/DesktopInputFieldPrefab.prefab\" Field Value Type Description String Methods DoesNotFocusOnPointerClickWithRightOrMiddleButton() Declaration public IEnumerator DoesNotFocusOnPointerClickWithRightOrMiddleButton() Returns Type Description IEnumerator FocusOnPointerClickWithLeftButton() Declaration public void FocusOnPointerClickWithLeftButton() OnetimeTearDown() Declaration public void OnetimeTearDown() Setup() Declaration public void Setup() TearDown() Declaration public virtual void TearDown() TestSetup() Declaration public virtual void TestSetup()"
  },
  "api/UnityEngine.UI.SpriteState.html": {
    "href": "api/UnityEngine.UI.SpriteState.html",
    "title": "Struct SpriteState | Unity UI | 1.0.0",
    "keywords": "Struct SpriteState Namespace : UnityEngine.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] public struct SpriteState : IEquatable<SpriteState> Properties disabledSprite Disabled sprite. Declaration public Sprite disabledSprite { get; set; } Property Value Type Description Sprite highlightedSprite Highlighted sprite. Declaration public Sprite highlightedSprite { get; set; } Property Value Type Description Sprite pressedSprite Pressed sprite. Declaration public Sprite pressedSprite { get; set; } Property Value Type Description Sprite selectedSprite Selected sprite. Declaration public Sprite selectedSprite { get; set; } Property Value Type Description Sprite Methods Equals(SpriteState) Declaration public bool Equals(SpriteState other) Parameters Type Name Description SpriteState other Returns Type Description Boolean"
  },
  "api/UnityEditor.UI.GridLayoutGroupEditor.html": {
    "href": "api/UnityEditor.UI.GridLayoutGroupEditor.html",
    "title": "Class GridLayoutGroupEditor | Unity UI | 1.0.0",
    "keywords": "Class GridLayoutGroupEditor Inheritance Object GridLayoutGroupEditor Namespace : UnityEditor.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class GridLayoutGroupEditor : Editor Methods OnEnable() Declaration protected virtual void OnEnable() OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/UnityEngine.EventSystems.Physics2DRaycaster.html": {
    "href": "api/UnityEngine.EventSystems.Physics2DRaycaster.html",
    "title": "Class Physics2DRaycaster | Unity UI | 1.0.0",
    "keywords": "Class Physics2DRaycaster Simple event system using physics raycasts. Inheritance Object UIBehaviour BaseRaycaster PhysicsRaycaster Physics2DRaycaster Inherited Members PhysicsRaycaster.kNoEventMaskSet PhysicsRaycaster.m_EventCamera PhysicsRaycaster.m_EventMask PhysicsRaycaster.m_MaxRayIntersections PhysicsRaycaster.m_LastMaxRayIntersections PhysicsRaycaster.eventCamera PhysicsRaycaster.depth PhysicsRaycaster.finalEventMask PhysicsRaycaster.eventMask PhysicsRaycaster.maxRayIntersections PhysicsRaycaster.ComputeRayAndDistance(PointerEventData, Ray, Int32, Single) BaseRaycaster.priority BaseRaycaster.sortOrderPriority BaseRaycaster.renderOrderPriority BaseRaycaster.rootRaycaster BaseRaycaster.ToString() BaseRaycaster.OnEnable() BaseRaycaster.OnDisable() BaseRaycaster.OnCanvasHierarchyChanged() BaseRaycaster.OnTransformParentChanged() UIBehaviour.Awake() UIBehaviour.Start() UIBehaviour.OnDestroy() UIBehaviour.IsActive() UIBehaviour.OnRectTransformDimensionsChange() UIBehaviour.OnBeforeTransformParentChanged() UIBehaviour.OnDidApplyAnimationProperties() UIBehaviour.OnCanvasGroupChanged() UIBehaviour.IsDestroyed() Namespace : UnityEngine.EventSystems <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class Physics2DRaycaster : PhysicsRaycaster Constructors Physics2DRaycaster() Declaration protected Physics2DRaycaster() Methods Raycast(PointerEventData, List<RaycastResult>) Raycast against 2D elements in the scene. Declaration public override void Raycast(PointerEventData eventData, List<RaycastResult> resultAppendList) Parameters Type Name Description PointerEventData eventData List < RaycastResult > resultAppendList Overrides PhysicsRaycaster.Raycast(PointerEventData, List<RaycastResult>) Extension Methods UIBehaviourExtensions.InvokeOnEnable(UIBehaviour) UIBehaviourExtensions.InvokeOnDisable(UIBehaviour) UIBehaviourExtensions.InvokeAwake(UIBehaviour) UIBehaviourExtensions.InvokeRebuild(UIBehaviour, CanvasUpdate) UIBehaviourExtensions.InvokeLateUpdate(UIBehaviour) UIBehaviourExtensions.InvokeUpdate(UIBehaviour) UIBehaviourExtensions.InvokeOnRectTransformDimensionsChange(UIBehaviour) UIBehaviourExtensions.InvokeOnCanvasGroupChanged(UIBehaviour) UIBehaviourExtensions.InvokeOnDidApplyAnimationProperties(UIBehaviour)"
  },
  "api/UnityEngine.EventSystems.IEventSystemHandler.html": {
    "href": "api/UnityEngine.EventSystems.IEventSystemHandler.html",
    "title": "Interface IEventSystemHandler | Unity UI | 1.0.0",
    "keywords": "Interface IEventSystemHandler Base class that all EventSystem events inherit from. Namespace : UnityEngine.EventSystems <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public interface IEventSystemHandler"
  },
  "api/UnityEngine.EventSystems.EventTrigger.html": {
    "href": "api/UnityEngine.EventSystems.EventTrigger.html",
    "title": "Class EventTrigger | Unity UI | 1.0.0",
    "keywords": "Class EventTrigger Inheritance Object EventTrigger Namespace : UnityEngine.EventSystems <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class EventTrigger : MonoBehaviour, IPointerEnterHandler, IPointerExitHandler, IPointerDownHandler, IPointerUpHandler, IPointerClickHandler, IInitializePotentialDragHandler, IBeginDragHandler, IDragHandler, IEndDragHandler, IDropHandler, IScrollHandler, IUpdateSelectedHandler, ISelectHandler, IDeselectHandler, IMoveHandler, ISubmitHandler, ICancelHandler, IEventSystemHandler Constructors EventTrigger() Declaration protected EventTrigger() Properties delegates Declaration [Obsolete(\"Please use triggers instead (UnityUpgradable) -> triggers\", true)] public List<EventTrigger.Entry> delegates { get; set; } Property Value Type Description List < EventTrigger.Entry > triggers All the functions registered in this EventTrigger Declaration public List<EventTrigger.Entry> triggers { get; set; } Property Value Type Description List < EventTrigger.Entry > Methods OnBeginDrag(PointerEventData) Called before a drag is started. Declaration public virtual void OnBeginDrag(PointerEventData eventData) Parameters Type Name Description PointerEventData eventData Implements IBeginDragHandler.OnBeginDrag(PointerEventData) OnCancel(BaseEventData) Called by the EventSystem when a Cancel event occurs. Declaration public virtual void OnCancel(BaseEventData eventData) Parameters Type Name Description BaseEventData eventData Implements ICancelHandler.OnCancel(BaseEventData) OnDeselect(BaseEventData) Called by the EventSystem when a new object is being selected. Declaration public virtual void OnDeselect(BaseEventData eventData) Parameters Type Name Description BaseEventData eventData Implements IDeselectHandler.OnDeselect(BaseEventData) OnDrag(PointerEventData) Called by the EventSystem every time the pointer is moved during dragging. Declaration public virtual void OnDrag(PointerEventData eventData) Parameters Type Name Description PointerEventData eventData Implements IDragHandler.OnDrag(PointerEventData) OnDrop(PointerEventData) Called by the EventSystem when an object accepts a drop. Declaration public virtual void OnDrop(PointerEventData eventData) Parameters Type Name Description PointerEventData eventData Implements IDropHandler.OnDrop(PointerEventData) OnEndDrag(PointerEventData) Called by the EventSystem once dragging ends. Declaration public virtual void OnEndDrag(PointerEventData eventData) Parameters Type Name Description PointerEventData eventData Implements IEndDragHandler.OnEndDrag(PointerEventData) OnInitializePotentialDrag(PointerEventData) Called by the EventSystem when a drag has been found, but before it is valid to begin the drag. Declaration public virtual void OnInitializePotentialDrag(PointerEventData eventData) Parameters Type Name Description PointerEventData eventData Implements IInitializePotentialDragHandler.OnInitializePotentialDrag(PointerEventData) OnMove(AxisEventData) Called by the EventSystem when a Move event occurs. Declaration public virtual void OnMove(AxisEventData eventData) Parameters Type Name Description AxisEventData eventData Implements IMoveHandler.OnMove(AxisEventData) OnPointerClick(PointerEventData) Called by the EventSystem when a Click event occurs. Declaration public virtual void OnPointerClick(PointerEventData eventData) Parameters Type Name Description PointerEventData eventData Implements IPointerClickHandler.OnPointerClick(PointerEventData) OnPointerDown(PointerEventData) Called by the EventSystem when a PointerDown event occurs. Declaration public virtual void OnPointerDown(PointerEventData eventData) Parameters Type Name Description PointerEventData eventData Implements IPointerDownHandler.OnPointerDown(PointerEventData) OnPointerEnter(PointerEventData) Called by the EventSystem when the pointer enters the object associated with this EventTrigger. Declaration public virtual void OnPointerEnter(PointerEventData eventData) Parameters Type Name Description PointerEventData eventData Implements IPointerEnterHandler.OnPointerEnter(PointerEventData) OnPointerExit(PointerEventData) Called by the EventSystem when the pointer exits the object associated with this EventTrigger. Declaration public virtual void OnPointerExit(PointerEventData eventData) Parameters Type Name Description PointerEventData eventData Implements IPointerExitHandler.OnPointerExit(PointerEventData) OnPointerUp(PointerEventData) Called by the EventSystem when a PointerUp event occurs. Declaration public virtual void OnPointerUp(PointerEventData eventData) Parameters Type Name Description PointerEventData eventData Implements IPointerUpHandler.OnPointerUp(PointerEventData) OnScroll(PointerEventData) Called by the EventSystem when a new Scroll event occurs. Declaration public virtual void OnScroll(PointerEventData eventData) Parameters Type Name Description PointerEventData eventData Implements IScrollHandler.OnScroll(PointerEventData) OnSelect(BaseEventData) Called by the EventSystem when a Select event occurs. Declaration public virtual void OnSelect(BaseEventData eventData) Parameters Type Name Description BaseEventData eventData Implements ISelectHandler.OnSelect(BaseEventData) OnSubmit(BaseEventData) Called by the EventSystem when a Submit event occurs. Declaration public virtual void OnSubmit(BaseEventData eventData) Parameters Type Name Description BaseEventData eventData Implements ISubmitHandler.OnSubmit(BaseEventData) OnUpdateSelected(BaseEventData) Called by the EventSystem when the object associated with this EventTrigger is updated. Declaration public virtual void OnUpdateSelected(BaseEventData eventData) Parameters Type Name Description BaseEventData eventData Implements IUpdateSelectedHandler.OnUpdateSelected(BaseEventData)"
  },
  "api/UnityEngine.EventSystems.BaseEventData.html": {
    "href": "api/UnityEngine.EventSystems.BaseEventData.html",
    "title": "Class BaseEventData | Unity UI | 1.0.0",
    "keywords": "Class BaseEventData A class that contains the base event data that is common to all event types in the new EventSystem. Inheritance Object AbstractEventData BaseEventData AxisEventData PointerEventData Inherited Members AbstractEventData.m_Used AbstractEventData.Reset() AbstractEventData.Use() AbstractEventData.used Namespace : UnityEngine.EventSystems <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class BaseEventData : AbstractEventData Constructors BaseEventData(EventSystem) Declaration public BaseEventData(EventSystem eventSystem) Parameters Type Name Description EventSystem eventSystem Properties currentInputModule A reference to the BaseInputModule that sent this event. Declaration public BaseInputModule currentInputModule { get; } Property Value Type Description BaseInputModule selectedObject The object currently considered selected by the EventSystem. Declaration public GameObject selectedObject { get; set; } Property Value Type Description GameObject"
  },
  "api/UnityEditor.UI.TextEditor.html": {
    "href": "api/UnityEditor.UI.TextEditor.html",
    "title": "Class TextEditor | Unity UI | 1.0.0",
    "keywords": "Class TextEditor Inheritance Object GraphicEditor TextEditor Inherited Members GraphicEditor.m_Script GraphicEditor.m_Color GraphicEditor.m_Material GraphicEditor.m_RaycastTarget GraphicEditor.m_RaycastPadding GraphicEditor.m_ShowNativeSize GraphicEditor.OnDisable() GraphicEditor.SetShowNativeSize(Boolean, Boolean) GraphicEditor.NativeSizeButtonGUI() GraphicEditor.AppearanceControlsGUI() GraphicEditor.RaycastControlsGUI() Namespace : UnityEditor.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class TextEditor : GraphicEditor Methods OnEnable() Declaration protected override void OnEnable() Overrides GraphicEditor.OnEnable() OnInspectorGUI() Declaration public override void OnInspectorGUI() Overrides GraphicEditor.OnInspectorGUI()"
  },
  "api/UnityEngine.UI.Outline.html": {
    "href": "api/UnityEngine.UI.Outline.html",
    "title": "Class Outline | Unity UI | 1.0.0",
    "keywords": "Class Outline Inheritance Object UIBehaviour BaseMeshEffect Shadow Outline Inherited Members Shadow.effectColor Shadow.effectDistance Shadow.useGraphicAlpha Shadow.ApplyShadowZeroAlloc(List<UIVertex>, Color32, Int32, Int32, Single, Single) Shadow.ApplyShadow(List<UIVertex>, Color32, Int32, Int32, Single, Single) BaseMeshEffect.graphic BaseMeshEffect.OnEnable() BaseMeshEffect.OnDisable() BaseMeshEffect.OnDidApplyAnimationProperties() BaseMeshEffect.ModifyMesh(Mesh) UIBehaviour.Awake() UIBehaviour.Start() UIBehaviour.OnDestroy() UIBehaviour.IsActive() UIBehaviour.OnRectTransformDimensionsChange() UIBehaviour.OnBeforeTransformParentChanged() UIBehaviour.OnTransformParentChanged() UIBehaviour.OnCanvasGroupChanged() UIBehaviour.OnCanvasHierarchyChanged() UIBehaviour.IsDestroyed() Namespace : UnityEngine.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class Outline : Shadow, IMeshModifier Constructors Outline() Declaration protected Outline() Methods ModifyMesh(VertexHelper) Declaration public override void ModifyMesh(VertexHelper vh) Parameters Type Name Description VertexHelper vh Overrides Shadow.ModifyMesh(VertexHelper) Extension Methods UIBehaviourExtensions.InvokeOnEnable(UIBehaviour) UIBehaviourExtensions.InvokeOnDisable(UIBehaviour) UIBehaviourExtensions.InvokeAwake(UIBehaviour) UIBehaviourExtensions.InvokeRebuild(UIBehaviour, CanvasUpdate) UIBehaviourExtensions.InvokeLateUpdate(UIBehaviour) UIBehaviourExtensions.InvokeUpdate(UIBehaviour) UIBehaviourExtensions.InvokeOnRectTransformDimensionsChange(UIBehaviour) UIBehaviourExtensions.InvokeOnCanvasGroupChanged(UIBehaviour) UIBehaviourExtensions.InvokeOnDidApplyAnimationProperties(UIBehaviour)"
  },
  "api/UnityEngine.UI.Navigation.html": {
    "href": "api/UnityEngine.UI.Navigation.html",
    "title": "Struct Navigation | Unity UI | 1.0.0",
    "keywords": "Struct Navigation Namespace : UnityEngine.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] public struct Navigation : IEquatable<Navigation> Properties defaultNavigation Return a Navigation with sensible default values. Declaration public static Navigation defaultNavigation { get; } Property Value Type Description Navigation Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class ExampleClass : MonoBehaviour { public Button button; void Start() { //Set the navigation to the default value. (\"Automatic\" is the default value). button.navigation = Navigation.defaultNavigation; } } mode Navigation mode. Declaration public Navigation.Mode mode { get; set; } Property Value Type Description Navigation.Mode selectOnDown Specify a Selectable UI GameObject to highlight when the down arrow key is pressed. Declaration public Selectable selectOnDown { get; set; } Property Value Type Description Selectable Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class HighlightOnKey : MonoBehaviour { public Button btnSave; public Button btnLoad; public void Start() { // get the Navigation data Navigation navigation = btnLoad.navigation; // switch mode to Explicit to allow for custom assigned behavior navigation.mode = Navigation.Mode.Explicit; // highlight the Save button if the down arrow key is pressed navigation.selectOnDown = btnSave; // reassign the struct data to the button btnLoad.navigation = navigation; } } selectOnLeft Specify a Selectable UI GameObject to highlight when the left arrow key is pressed. Declaration public Selectable selectOnLeft { get; set; } Property Value Type Description Selectable Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class HighlightOnKey : MonoBehaviour { public Button btnSave; public Button btnLoad; public void Start() { // get the Navigation data Navigation navigation = btnLoad.navigation; // switch mode to Explicit to allow for custom assigned behavior navigation.mode = Navigation.Mode.Explicit; // highlight the Save button if the left arrow key is pressed navigation.selectOnLeft = btnSave; // reassign the struct data to the button btnLoad.navigation = navigation; } } selectOnRight Specify a Selectable UI GameObject to highlight when the right arrow key is pressed. Declaration public Selectable selectOnRight { get; set; } Property Value Type Description Selectable Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class HighlightOnKey : MonoBehaviour { public Button btnSave; public Button btnLoad; public void Start() { // get the Navigation data Navigation navigation = btnLoad.navigation; // switch mode to Explicit to allow for custom assigned behavior navigation.mode = Navigation.Mode.Explicit; // highlight the Save button if the right arrow key is pressed navigation.selectOnRight = btnSave; // reassign the struct data to the button btnLoad.navigation = navigation; } } selectOnUp Specify a Selectable UI GameObject to highlight when the Up arrow key is pressed. Declaration public Selectable selectOnUp { get; set; } Property Value Type Description Selectable Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class HighlightOnKey : MonoBehaviour { public Button btnSave; public Button btnLoad; public void Start() { // get the Navigation data Navigation navigation = btnLoad.navigation; // switch mode to Explicit to allow for custom assigned behavior navigation.mode = Navigation.Mode.Explicit; // highlight the Save button if the up arrow key is pressed navigation.selectOnUp = btnSave; // reassign the struct data to the button btnLoad.navigation = navigation; } } Methods Equals(Navigation) Declaration public bool Equals(Navigation other) Parameters Type Name Description Navigation other Returns Type Description Boolean"
  },
  "api/UnityEngine.UI.Image.Type.html": {
    "href": "api/UnityEngine.UI.Image.Type.html",
    "title": "Enum Image.Type | Unity UI | 1.0.0",
    "keywords": "Enum Image.Type Image fill type controls how to display the image. Namespace : UnityEngine.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public enum Type Fields Name Description Filled Displays only a portion of the Image. Simple Displays the full Image Sliced Displays the Image as a 9-sliced graphic. Tiled Displays a sliced Sprite with its resizable sections tiled instead of stretched."
  },
  "api/UnityEngine.UI.GraphicRaycaster.BlockingObjects.html": {
    "href": "api/UnityEngine.UI.GraphicRaycaster.BlockingObjects.html",
    "title": "Enum GraphicRaycaster.BlockingObjects | Unity UI | 1.0.0",
    "keywords": "Enum GraphicRaycaster.BlockingObjects Type of raycasters to check against to check for canvas blocking elements. Namespace : UnityEngine.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public enum BlockingObjects Fields Name Description All Perform a 2D and a 3D raycasts to check for blocking 2D and 3D elements. None Perform no raycasts. ThreeD Perform a 3D raycast check to check for blocking 3D elements TwoD Perform a 2D raycast check to check for blocking 2D elements"
  },
  "api/UnityEngine.EventSystems.EventTrigger.TriggerEvent.html": {
    "href": "api/UnityEngine.EventSystems.EventTrigger.TriggerEvent.html",
    "title": "Class EventTrigger.TriggerEvent | Unity UI | 1.0.0",
    "keywords": "Class EventTrigger.TriggerEvent Inheritance Object EventTrigger.TriggerEvent Namespace : UnityEngine.EventSystems <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] public class TriggerEvent : UnityEvent<BaseEventData>"
  },
  "api/UnityEditor.UI.ScrollRectEditor.html": {
    "href": "api/UnityEditor.UI.ScrollRectEditor.html",
    "title": "Class ScrollRectEditor | Unity UI | 1.0.0",
    "keywords": "Class ScrollRectEditor Inheritance Object ScrollRectEditor Namespace : UnityEditor.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class ScrollRectEditor : Editor Methods OnDisable() Declaration protected virtual void OnDisable() OnEnable() Declaration protected virtual void OnEnable() OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/UnityEditor.EventSystems.EventSystemEditor.html": {
    "href": "api/UnityEditor.EventSystems.EventSystemEditor.html",
    "title": "Class EventSystemEditor | Unity UI | 1.0.0",
    "keywords": "Class EventSystemEditor Inheritance Object EventSystemEditor Namespace : UnityEditor.EventSystems <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class EventSystemEditor : Editor Properties previewLabelStyle Declaration protected GUIStyle previewLabelStyle { get; } Property Value Type Description GUIStyle Methods HasPreviewGUI() Declaration public override bool HasPreviewGUI() Returns Type Description Boolean OnInspectorGUI() Declaration public override void OnInspectorGUI() OnPreviewGUI(Rect, GUIStyle) Declaration public override void OnPreviewGUI(Rect rect, GUIStyle background) Parameters Type Name Description Rect rect GUIStyle background RequiresConstantRepaint() Declaration public override bool RequiresConstantRepaint() Returns Type Description Boolean"
  },
  "api/Graphics.html": {
    "href": "api/Graphics.html",
    "title": "Namespace Graphics | Unity UI | 1.0.0",
    "keywords": "Namespace Graphics Classes RawImageTest RectMask2DWithNestedCanvasCullsUsingCorrectCanvasRect"
  },
  "api/UnityEngine.UI.IClippable.html": {
    "href": "api/UnityEngine.UI.IClippable.html",
    "title": "Interface IClippable | Unity UI | 1.0.0",
    "keywords": "Interface IClippable Interface for elements that can be clipped if they are under an IClipper Namespace : UnityEngine.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public interface IClippable Properties gameObject GameObject of the IClippable object Declaration GameObject gameObject { get; } Property Value Type Description GameObject rectTransform The RectTransform of the clippable. Declaration RectTransform rectTransform { get; } Property Value Type Description RectTransform Methods Cull(Rect, Boolean) Clip and cull the IClippable given a specific clipping rect Declaration void Cull(Rect clipRect, bool validRect) Parameters Type Name Description Rect clipRect The Rectangle in which to clip against. Boolean validRect Is the Rect valid. If not then the rect has 0 size. RecalculateClipping() Will be called when the state of a parent IClippable changed. Declaration void RecalculateClipping() SetClipRect(Rect, Boolean) Set the clip rect for the IClippable. Declaration void SetClipRect(Rect value, bool validRect) Parameters Type Name Description Rect value The Rectangle for the clipping Boolean validRect Is the rect valid. SetClipSoftness(Vector2) Set the clip softness for the IClippable. The softness is a linear alpha falloff over clipSoftness pixels. Declaration void SetClipSoftness(Vector2 clipSoftness) Parameters Type Name Description Vector2 clipSoftness The number of pixels to apply the softness to"
  },
  "api/UnityEngine.UI.DefaultControls.Resources.html": {
    "href": "api/UnityEngine.UI.DefaultControls.Resources.html",
    "title": "Struct DefaultControls.Resources | Unity UI | 1.0.0",
    "keywords": "Struct DefaultControls.Resources Object used to pass resources to use for the default controls. Namespace : UnityEngine.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct Resources Fields background Sprite used for background elements. Declaration public Sprite background Field Value Type Description Sprite checkmark Sprite used for representation of an \"on\" state when present, such as a checkmark. Declaration public Sprite checkmark Field Value Type Description Sprite dropdown Sprite used to indicate that a button will open a dropdown when clicked. Declaration public Sprite dropdown Field Value Type Description Sprite inputField Sprite used as background for input fields. Declaration public Sprite inputField Field Value Type Description Sprite knob Sprite used for knobs that can be dragged, such as on a slider. Declaration public Sprite knob Field Value Type Description Sprite mask Sprite used for masking purposes, for example to be used for the viewport of a scroll view. Declaration public Sprite mask Field Value Type Description Sprite standard The primary sprite to be used for graphical UI elements, used by the button, toggle, and dropdown controls, among others. Declaration public Sprite standard Field Value Type Description Sprite"
  },
  "api/UnityEngine.EventSystems.StandaloneInputModule.InputMode.html": {
    "href": "api/UnityEngine.EventSystems.StandaloneInputModule.InputMode.html",
    "title": "Enum StandaloneInputModule.InputMode | Unity UI | 1.0.0",
    "keywords": "Enum StandaloneInputModule.InputMode Namespace : UnityEngine.EventSystems <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Obsolete(\"Mode is no longer needed on input module as it handles both mouse and keyboard simultaneously.\", false)] public enum InputMode Fields Name Description Buttons Mouse"
  },
  "api/Core.InputField.ContentValidation.html": {
    "href": "api/Core.InputField.ContentValidation.html",
    "title": "Class ContentValidation | Unity UI | 1.0.0",
    "keywords": "Class ContentValidation Inheritance Object TestBehaviourBase < InputField > ContentValidation Inherited Members TestBehaviourBase<UnityEngine.UI.InputField>.m_TestObject TestBehaviourBase<UnityEngine.UI.InputField>.TestSetup() TestBehaviourBase<UnityEngine.UI.InputField>.Teardown() Namespace : Core.InputField <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class ContentValidation : TestBehaviourBase<InputField> Methods ValueIsValidatedCorrectly(InputField.ContentType, String, String) Declaration public void ValueIsValidatedCorrectly(InputField.ContentType type, string testValue, string expected) Parameters Type Name Description InputField.ContentType type String testValue String expected"
  },
  "api/UnityEngine.UI.Slider.html": {
    "href": "api/UnityEngine.UI.Slider.html",
    "title": "Class Slider | Unity UI | 1.0.0",
    "keywords": "Class Slider Inheritance Object UIBehaviour Selectable Slider Inherited Members Selectable.s_Selectables Selectable.s_SelectableCount Selectable.allSelectablesArray Selectable.allSelectableCount Selectable.allSelectables Selectable.AllSelectablesNoAlloc(Selectable[]) Selectable.m_CurrentIndex Selectable.navigation Selectable.transition Selectable.colors Selectable.spriteState Selectable.animationTriggers Selectable.targetGraphic Selectable.interactable Selectable.image Selectable.Awake() Selectable.OnCanvasGroupChanged() Selectable.IsInteractable() Selectable.OnTransformParentChanged() Selectable.currentSelectionState Selectable.InstantClearState() Selectable.DoStateTransition(Selectable.SelectionState, Boolean) Selectable.FindSelectable(Vector3) Selectable.IsHighlighted() Selectable.IsPressed() Selectable.OnPointerUp(PointerEventData) Selectable.OnPointerEnter(PointerEventData) Selectable.OnPointerExit(PointerEventData) Selectable.OnSelect(BaseEventData) Selectable.OnDeselect(BaseEventData) Selectable.Select() UIBehaviour.Start() UIBehaviour.OnDestroy() UIBehaviour.IsActive() UIBehaviour.OnBeforeTransformParentChanged() UIBehaviour.OnCanvasHierarchyChanged() UIBehaviour.IsDestroyed() Namespace : UnityEngine.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class Slider : Selectable, IMoveHandler, IPointerDownHandler, IPointerUpHandler, IPointerEnterHandler, IPointerExitHandler, ISelectHandler, IDeselectHandler, IDragHandler, IInitializePotentialDragHandler, IEventSystemHandler, ICanvasElement Constructors Slider() Declaration protected Slider() Fields m_Value Declaration protected float m_Value Field Value Type Description Single Properties direction The direction of the slider, from minimum to maximum value. Declaration public Slider.Direction direction { get; set; } Property Value Type Description Slider.Direction Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class Example : MonoBehaviour { public Slider mainSlider; public void Start() { //Changes the direction of the slider. if (mainSlider.direction == Slider.Direction.BottomToTop) { mainSlider.direction = Slider.Direction.TopToBottom; } } } fillRect Optional RectTransform to use as fill for the slider. Declaration public RectTransform fillRect { get; set; } Property Value Type Description RectTransform Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class Example : MonoBehaviour { public Slider mainSlider; //Reference to new \"RectTransform\"(Child of FillArea). public RectTransform newFillRect; //Deactivates the old FillRect and assigns a new one. void Start() { mainSlider.fillRect.gameObject.SetActive(false); mainSlider.fillRect = newFillRect; } } handleRect Optional RectTransform to use as a handle for the slider. Declaration public RectTransform handleRect { get; set; } Property Value Type Description RectTransform Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class Example : MonoBehaviour { public Slider mainSlider; //Reference to new \"RectTransform\" (Child of \"Handle Slide Area\"). public RectTransform handleHighlighted; //Deactivates the old Handle, then assigns and enables the new one. void Start() { mainSlider.handleRect.gameObject.SetActive(false); mainSlider.handleRect = handleHighlighted; mainSlider.handleRect.gameObject.SetActive(true); } } maxValue The maximum allowed value of the slider. Declaration public float maxValue { get; set; } Property Value Type Description Single Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class Example : MonoBehaviour { public Slider mainSlider; void Start() { // Changes the max value of the slider to 20; mainSlider.maxValue = 20; } } minValue The minimum allowed value of the slider. Declaration public float minValue { get; set; } Property Value Type Description Single Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class Example : MonoBehaviour { public Slider mainSlider; void Start() { // Changes the minimum value of the slider to 10; mainSlider.minValue = 10; } } normalizedValue The current value of the slider normalized into a value between 0 and 1. Declaration public float normalizedValue { get; set; } Property Value Type Description Single Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class Example : MonoBehaviour { public Slider mainSlider; //Set to invoke when \"OnValueChanged\" method is called. void CheckNormalisedValue() { //Displays the normalised value of the slider everytime the value changes. Debug.Log(mainSlider.normalizedValue); } } onValueChanged Callback executed when the value of the slider is changed. Declaration public Slider.SliderEvent onValueChanged { get; set; } Property Value Type Description Slider.SliderEvent Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class Example : MonoBehaviour { public Slider mainSlider; public void Start() { //Adds a listener to the main slider and invokes a method when the value changes. mainSlider.onValueChanged.AddListener(delegate {ValueChangeCheck(); }); } // Invoked when the value of the slider changes. public void ValueChangeCheck() { Debug.Log(mainSlider.value); } } value The current value of the slider. Declaration public virtual float value { get; set; } Property Value Type Description Single Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class Example : MonoBehaviour { public Slider mainSlider; //Invoked when a submit button is clicked. public void SubmitSliderSetting() { //Displays the value of the slider in the console. Debug.Log(mainSlider.value); } } wholeNumbers Should the value only be allowed to be whole numbers? Declaration public bool wholeNumbers { get; set; } Property Value Type Description Boolean Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class Example : MonoBehaviour { public Slider mainSlider; public void Start() { //sets the slider's value to accept whole numbers only. mainSlider.wholeNumbers = true; } } Methods FindSelectableOnDown() See Selectable.FindSelectableOnDown Declaration public override Selectable FindSelectableOnDown() Returns Type Description Selectable Overrides Selectable.FindSelectableOnDown() FindSelectableOnLeft() See Selectable.FindSelectableOnLeft Declaration public override Selectable FindSelectableOnLeft() Returns Type Description Selectable Overrides Selectable.FindSelectableOnLeft() FindSelectableOnRight() See Selectable.FindSelectableOnRight Declaration public override Selectable FindSelectableOnRight() Returns Type Description Selectable Overrides Selectable.FindSelectableOnRight() FindSelectableOnUp() See Selectable.FindSelectableOnUp Declaration public override Selectable FindSelectableOnUp() Returns Type Description Selectable Overrides Selectable.FindSelectableOnUp() GraphicUpdateComplete() See ICanvasElement.GraphicUpdateComplete Declaration public virtual void GraphicUpdateComplete() Implements ICanvasElement.GraphicUpdateComplete() LayoutComplete() See ICanvasElement.LayoutComplete Declaration public virtual void LayoutComplete() Implements ICanvasElement.LayoutComplete() OnDidApplyAnimationProperties() Declaration protected override void OnDidApplyAnimationProperties() Overrides Selectable.OnDidApplyAnimationProperties() OnDisable() Declaration protected override void OnDisable() Overrides Selectable.OnDisable() OnDrag(PointerEventData) Declaration public virtual void OnDrag(PointerEventData eventData) Parameters Type Name Description PointerEventData eventData Implements IDragHandler.OnDrag(PointerEventData) OnEnable() Declaration protected override void OnEnable() Overrides Selectable.OnEnable() OnInitializePotentialDrag(PointerEventData) Declaration public virtual void OnInitializePotentialDrag(PointerEventData eventData) Parameters Type Name Description PointerEventData eventData Implements IInitializePotentialDragHandler.OnInitializePotentialDrag(PointerEventData) OnMove(AxisEventData) Declaration public override void OnMove(AxisEventData eventData) Parameters Type Name Description AxisEventData eventData Overrides Selectable.OnMove(AxisEventData) OnPointerDown(PointerEventData) Declaration public override void OnPointerDown(PointerEventData eventData) Parameters Type Name Description PointerEventData eventData Overrides Selectable.OnPointerDown(PointerEventData) OnRectTransformDimensionsChange() Declaration protected override void OnRectTransformDimensionsChange() Overrides UIBehaviour.OnRectTransformDimensionsChange() Rebuild(CanvasUpdate) Declaration public virtual void Rebuild(CanvasUpdate executing) Parameters Type Name Description CanvasUpdate executing Implements ICanvasElement.Rebuild(CanvasUpdate) Set(Single, Boolean) Set the value of the slider. Declaration protected virtual void Set(float input, bool sendCallback = true) Parameters Type Name Description Single input The new value for the slider. Boolean sendCallback If the OnValueChanged callback should be invoked. Remarks Process the input to ensure the value is between min and max value. If the input is different set the value and send the callback is required. SetDirection(Slider.Direction, Boolean) Sets the direction of this slider, optionally changing the layout as well. Declaration public void SetDirection(Slider.Direction direction, bool includeRectLayouts) Parameters Type Name Description Slider.Direction direction The direction of the slider Boolean includeRectLayouts Should the layout be flipped together with the slider direction Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class Example : MonoBehaviour { public Slider mainSlider; public void Start() { mainSlider.SetDirection(Slider.Direction.LeftToRight, false); } } SetValueWithoutNotify(Single) Set the value of the slider without invoking onValueChanged callback. Declaration public virtual void SetValueWithoutNotify(float input) Parameters Type Name Description Single input The new value for the slider. Update() Update the rect based on the delayed update visuals. Got around issue of calling sendMessage from onValidate. Declaration protected virtual void Update() Extension Methods UIBehaviourExtensions.InvokeOnEnable(UIBehaviour) UIBehaviourExtensions.InvokeOnDisable(UIBehaviour) UIBehaviourExtensions.InvokeAwake(UIBehaviour) UIBehaviourExtensions.InvokeRebuild(UIBehaviour, CanvasUpdate) UIBehaviourExtensions.InvokeLateUpdate(UIBehaviour) UIBehaviourExtensions.InvokeUpdate(UIBehaviour) UIBehaviourExtensions.InvokeOnRectTransformDimensionsChange(UIBehaviour) UIBehaviourExtensions.InvokeOnCanvasGroupChanged(UIBehaviour) UIBehaviourExtensions.InvokeOnDidApplyAnimationProperties(UIBehaviour) SelectableExtensions.InvokeOnPointerDown(Selectable, PointerEventData) SelectableExtensions.InvokeOnPointerUp(Selectable, PointerEventData) SelectableExtensions.InvokeOnPointerEnter(Selectable, PointerEventData) SelectableExtensions.InvokeOnPointerExit(Selectable, PointerEventData) SelectableExtensions.InvokeTriggerAnimation(Selectable, String)"
  },
  "api/UnityEngine.UI.Image.OriginVertical.html": {
    "href": "api/UnityEngine.UI.Image.OriginVertical.html",
    "title": "Enum Image.OriginVertical | Unity UI | 1.0.0",
    "keywords": "Enum Image.OriginVertical Origin for the Image.FillMethod.Vertical. Namespace : UnityEngine.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public enum OriginVertical Fields Name Description Bottom Origin at the Bottom Edge. Top Origin at the Top Edge."
  },
  "api/UnityEngine.UI.InputField.EditState.html": {
    "href": "api/UnityEngine.UI.InputField.EditState.html",
    "title": "Enum InputField.EditState | Unity UI | 1.0.0",
    "keywords": "Enum InputField.EditState Namespace : UnityEngine.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax protected enum EditState Fields Name Description Continue Finish"
  },
  "api/UnityEngine.UI.ILayoutElement.html": {
    "href": "api/UnityEngine.UI.ILayoutElement.html",
    "title": "Interface ILayoutElement | Unity UI | 1.0.0",
    "keywords": "Interface ILayoutElement A component is treated as a layout element by the auto layout system if it implements ILayoutElement. Namespace : UnityEngine.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public interface ILayoutElement Remarks The layout system will invoke CalculateLayoutInputHorizontal before querying minWidth, preferredWidth, and flexibleWidth. It can potentially save performance if these properties are cached when CalculateLayoutInputHorizontal is invoked, so they don't need to be recalculated every time the properties are queried. The layout system will invoke CalculateLayoutInputVertical before querying minHeight, preferredHeight, and flexibleHeight.It can potentially save performance if these properties are cached when CalculateLayoutInputVertical is invoked, so they don't need to be recalculated every time the properties are queried. The minWidth, preferredWidth, and flexibleWidth properties should not rely on any properties of the RectTransform of the layout element, otherwise the behavior will be non-deterministic. The minHeight, preferredHeight, and flexibleHeight properties may rely on horizontal aspects of the RectTransform, such as the width or the X component of the position. Any properties of the RectTransforms on child layout elements may always be relied on. Properties flexibleHeight Declaration float flexibleHeight { get; } Property Value Type Description Single flexibleWidth Declaration float flexibleWidth { get; } Property Value Type Description Single layoutPriority The layout priority of this component. Declaration int layoutPriority { get; } Property Value Type Description Int32 Remarks If multiple components on the same GameObject implement the ILayoutElement interface, the values provided by components that return a higher priority value are given priority. However, values less than zero are ignored. This way a component can override only select properties by leaving the remaning values to be -1 or other values less than zero. minHeight The minimum height this layout element may be allocated. Declaration float minHeight { get; } Property Value Type Description Single minWidth The minimum width this layout element may be allocated. Declaration float minWidth { get; } Property Value Type Description Single preferredHeight The preferred height this layout element should be allocated if there is sufficient space. Declaration float preferredHeight { get; } Property Value Type Description Single Remarks PreferredHeight can be set to -1 to remove the size. preferredWidth The preferred width this layout element should be allocated if there is sufficient space. Declaration float preferredWidth { get; } Property Value Type Description Single Remarks PreferredWidth can be set to -1 to remove the size. Methods CalculateLayoutInputHorizontal() After this method is invoked, layout horizontal input properties should return up-to-date values. Children will already have up-to-date layout horizontal inputs when this methods is called. Declaration void CalculateLayoutInputHorizontal() CalculateLayoutInputVertical() After this method is invoked, layout vertical input properties should return up-to-date values. Children will already have up-to-date layout vertical inputs when this methods is called. Declaration void CalculateLayoutInputVertical()"
  },
  "api/UnityEngine.UI.ContentSizeFitter.FitMode.html": {
    "href": "api/UnityEngine.UI.ContentSizeFitter.FitMode.html",
    "title": "Enum ContentSizeFitter.FitMode | Unity UI | 1.0.0",
    "keywords": "Enum ContentSizeFitter.FitMode The size fit modes avaliable to use. Namespace : UnityEngine.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public enum FitMode Fields Name Description MinSize Resize to the minimum size of the content. PreferredSize Resize to the preferred size of the content. Unconstrained Don't perform any resizing."
  },
  "api/UnityEngine.EventSystems.StandaloneInputModule.html": {
    "href": "api/UnityEngine.EventSystems.StandaloneInputModule.html",
    "title": "Class StandaloneInputModule | Unity UI | 1.0.0",
    "keywords": "Class StandaloneInputModule Inheritance Object UIBehaviour BaseInputModule PointerInputModule StandaloneInputModule Inherited Members PointerInputModule.kMouseLeftId PointerInputModule.kMouseRightId PointerInputModule.kMouseMiddleId PointerInputModule.kFakeTouchesId PointerInputModule.m_PointerData PointerInputModule.GetPointerData(Int32, PointerEventData, Boolean) PointerInputModule.RemovePointerData(PointerEventData) PointerInputModule.GetTouchPointerEventData(Touch, Boolean, Boolean) PointerInputModule.CopyFromTo(PointerEventData, PointerEventData) PointerInputModule.StateForMouseButton(Int32) PointerInputModule.GetMousePointerEventData() PointerInputModule.GetMousePointerEventData(Int32) PointerInputModule.GetLastPointerEventData(Int32) PointerInputModule.ProcessMove(PointerEventData) PointerInputModule.ProcessDrag(PointerEventData) PointerInputModule.IsPointerOverGameObject(Int32) PointerInputModule.ClearSelection() PointerInputModule.ToString() PointerInputModule.DeselectIfSelectionChanged(GameObject, BaseEventData) BaseInputModule.m_RaycastResultCache BaseInputModule.m_InputOverride BaseInputModule.input BaseInputModule.inputOverride BaseInputModule.eventSystem BaseInputModule.OnEnable() BaseInputModule.OnDisable() BaseInputModule.FindFirstRaycast(List<RaycastResult>) BaseInputModule.DetermineMoveDirection(Single, Single) BaseInputModule.DetermineMoveDirection(Single, Single, Single) BaseInputModule.FindCommonRoot(GameObject, GameObject) BaseInputModule.HandlePointerExitAndEnter(PointerEventData, GameObject) BaseInputModule.GetAxisEventData(Single, Single, Single) BaseInputModule.GetBaseEventData() UIBehaviour.Awake() UIBehaviour.Start() UIBehaviour.OnDestroy() UIBehaviour.IsActive() UIBehaviour.OnRectTransformDimensionsChange() UIBehaviour.OnBeforeTransformParentChanged() UIBehaviour.OnTransformParentChanged() UIBehaviour.OnDidApplyAnimationProperties() UIBehaviour.OnCanvasGroupChanged() UIBehaviour.OnCanvasHierarchyChanged() UIBehaviour.IsDestroyed() Namespace : UnityEngine.EventSystems <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class StandaloneInputModule : PointerInputModule Constructors StandaloneInputModule() Declaration protected StandaloneInputModule() Properties allowActivationOnMobileDevice Declaration [Obsolete(\"allowActivationOnMobileDevice has been deprecated. Use forceModuleActive instead (UnityUpgradable) -> forceModuleActive\")] public bool allowActivationOnMobileDevice { get; set; } Property Value Type Description Boolean cancelButton Input manager name for the 'cancel' button. Declaration public string cancelButton { get; set; } Property Value Type Description String forceModuleActive Force this module to be active. Declaration public bool forceModuleActive { get; set; } Property Value Type Description Boolean Remarks If there is no module active with higher priority (ordered in the inspector) this module will be forced active even if valid enabling conditions are not met. horizontalAxis Name of the horizontal axis for movement (if axis events are used). Declaration public string horizontalAxis { get; set; } Property Value Type Description String inputActionsPerSecond Number of keyboard / controller inputs allowed per second. Declaration public float inputActionsPerSecond { get; set; } Property Value Type Description Single inputMode Declaration [Obsolete(\"Mode is no longer needed on input module as it handles both mouse and keyboard simultaneously.\", false)] public StandaloneInputModule.InputMode inputMode { get; } Property Value Type Description StandaloneInputModule.InputMode repeatDelay Delay in seconds before the input actions per second repeat rate takes effect. Declaration public float repeatDelay { get; set; } Property Value Type Description Single Remarks If the same direction is sustained, the inputActionsPerSecond property can be used to control the rate at which events are fired. However, it can be desirable that the first repetition is delayed, so the user doesn't get repeated actions by accident. submitButton Maximum number of input events handled per second. Declaration public string submitButton { get; set; } Property Value Type Description String verticalAxis Name of the vertical axis for movement (if axis events are used). Declaration public string verticalAxis { get; set; } Property Value Type Description String Methods ActivateModule() See BaseInputModule. Declaration public override void ActivateModule() Overrides BaseInputModule.ActivateModule() DeactivateModule() See BaseInputModule. Declaration public override void DeactivateModule() Overrides BaseInputModule.DeactivateModule() ForceAutoSelect() Declaration [Obsolete(\"This method is no longer checked, overriding it with return true does nothing!\")] protected virtual bool ForceAutoSelect() Returns Type Description Boolean GetCurrentFocusedGameObject() Declaration protected GameObject GetCurrentFocusedGameObject() Returns Type Description GameObject IsModuleSupported() Declaration public override bool IsModuleSupported() Returns Type Description Boolean Overrides BaseInputModule.IsModuleSupported() Process() Declaration public override void Process() Overrides BaseInputModule.Process() ProcessMouseEvent() Declaration protected void ProcessMouseEvent() ProcessMouseEvent(Int32) Process all mouse events. Declaration protected void ProcessMouseEvent(int id) Parameters Type Name Description Int32 id ProcessMousePress(PointerInputModule.MouseButtonEventData) Calculate and process any mouse button state changes. Declaration protected void ProcessMousePress(PointerInputModule.MouseButtonEventData data) Parameters Type Name Description PointerInputModule.MouseButtonEventData data ProcessTouchPress(PointerEventData, Boolean, Boolean) This method is called by Unity whenever a touch event is processed. Override this method with a custom implementation to process touch events yourself. Declaration protected void ProcessTouchPress(PointerEventData pointerEvent, bool pressed, bool released) Parameters Type Name Description PointerEventData pointerEvent Event data relating to the touch event, such as position and ID to be passed to the touch event destination object. Boolean pressed This is true for the first frame of a touch event, and false thereafter. This can therefore be used to determine the instant a touch event occurred. Boolean released This is true only for the last frame of a touch event. Remarks This method can be overridden in derived classes to change how touch press events are handled. SendMoveEventToSelectedObject() Calculate and send a move event to the current selected object. Declaration protected bool SendMoveEventToSelectedObject() Returns Type Description Boolean If the move event was used by the selected object. SendSubmitEventToSelectedObject() Calculate and send a submit event to the current selected object. Declaration protected bool SendSubmitEventToSelectedObject() Returns Type Description Boolean If the submit event was used by the selected object. SendUpdateEventToSelectedObject() Declaration protected bool SendUpdateEventToSelectedObject() Returns Type Description Boolean ShouldActivateModule() Declaration public override bool ShouldActivateModule() Returns Type Description Boolean Overrides BaseInputModule.ShouldActivateModule() UpdateModule() Declaration public override void UpdateModule() Overrides BaseInputModule.UpdateModule() Extension Methods UIBehaviourExtensions.InvokeOnEnable(UIBehaviour) UIBehaviourExtensions.InvokeOnDisable(UIBehaviour) UIBehaviourExtensions.InvokeAwake(UIBehaviour) UIBehaviourExtensions.InvokeRebuild(UIBehaviour, CanvasUpdate) UIBehaviourExtensions.InvokeLateUpdate(UIBehaviour) UIBehaviourExtensions.InvokeUpdate(UIBehaviour) UIBehaviourExtensions.InvokeOnRectTransformDimensionsChange(UIBehaviour) UIBehaviourExtensions.InvokeOnCanvasGroupChanged(UIBehaviour) UIBehaviourExtensions.InvokeOnDidApplyAnimationProperties(UIBehaviour)"
  },
  "api/UnityEngine.EventSystems.EventTriggerType.html": {
    "href": "api/UnityEngine.EventSystems.EventTriggerType.html",
    "title": "Enum EventTriggerType | Unity UI | 1.0.0",
    "keywords": "Enum EventTriggerType This class is capable of triggering one or more remote functions from a specified event. Usage: Attach it to an object with a collider, or to a GUI Graphic of your choice. NOTE: Doing this will make this object intercept ALL events, and no event bubbling will occur from this object! Namespace : UnityEngine.EventSystems <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public enum EventTriggerType Fields Name Description BeginDrag Cancel Intercepts ICancelHandler.OnCancel. Deselect Intercepts a IDeselectHandler.OnDeselect. Drag Intercepts a IDragHandler.OnDrag. Drop Intercepts a IDropHandler.OnDrop. EndDrag Intercepts IEndDragHandler.OnEndDrag. InitializePotentialDrag Intercepts IInitializePotentialDrag.InitializePotentialDrag. Move Intercepts a IMoveHandler.OnMove. PointerClick Intercepts a IPointerClickHandler.OnPointerClick. PointerDown Intercepts a IPointerDownHandler.OnPointerDown. PointerEnter Intercepts a IPointerEnterHandler.OnPointerEnter. PointerExit Intercepts a IPointerExitHandler.OnPointerExit. PointerUp Intercepts a IPointerUpHandler.OnPointerUp. Scroll Intercepts a IScrollHandler.OnScroll. Select Intercepts a ISelectHandler.OnSelect. Submit Intercepts ISubmitHandler.Submit. UpdateSelected Intercepts a IUpdateSelectedHandler.OnUpdateSelected."
  },
  "api/UnityEngine.UI.LayoutElement.html": {
    "href": "api/UnityEngine.UI.LayoutElement.html",
    "title": "Class LayoutElement | Unity UI | 1.0.0",
    "keywords": "Class LayoutElement Inheritance Object UIBehaviour LayoutElement Inherited Members UIBehaviour.Awake() UIBehaviour.Start() UIBehaviour.OnDestroy() UIBehaviour.IsActive() UIBehaviour.OnRectTransformDimensionsChange() UIBehaviour.OnCanvasGroupChanged() UIBehaviour.OnCanvasHierarchyChanged() UIBehaviour.IsDestroyed() Namespace : UnityEngine.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class LayoutElement : UIBehaviour, ILayoutElement, ILayoutIgnorer Constructors LayoutElement() Declaration protected LayoutElement() Properties flexibleHeight The extra relative height this layout element should be allocated if there is additional available space. Declaration public virtual float flexibleHeight { get; set; } Property Value Type Description Single Implements ILayoutElement.flexibleHeight flexibleWidth The extra relative width this layout element should be allocated if there is additional available space. Declaration public virtual float flexibleWidth { get; set; } Property Value Type Description Single Implements ILayoutElement.flexibleWidth ignoreLayout Should this RectTransform be ignored by the layout system? Declaration public virtual bool ignoreLayout { get; set; } Property Value Type Description Boolean Implements ILayoutIgnorer.ignoreLayout Remarks Setting this property to true will make a parent layout group component not consider this RectTransform part of the group. The RectTransform can then be manually positioned despite being a child GameObject of a layout group. layoutPriority The Priority of layout this element has. Declaration public virtual int layoutPriority { get; set; } Property Value Type Description Int32 Implements ILayoutElement.layoutPriority minHeight Declaration public virtual float minHeight { get; set; } Property Value Type Description Single Implements ILayoutElement.minHeight minWidth Declaration public virtual float minWidth { get; set; } Property Value Type Description Single Implements ILayoutElement.minWidth preferredHeight Declaration public virtual float preferredHeight { get; set; } Property Value Type Description Single Implements ILayoutElement.preferredHeight preferredWidth Declaration public virtual float preferredWidth { get; set; } Property Value Type Description Single Implements ILayoutElement.preferredWidth Methods CalculateLayoutInputHorizontal() Declaration public virtual void CalculateLayoutInputHorizontal() Implements ILayoutElement.CalculateLayoutInputHorizontal() CalculateLayoutInputVertical() Declaration public virtual void CalculateLayoutInputVertical() Implements ILayoutElement.CalculateLayoutInputVertical() OnBeforeTransformParentChanged() Declaration protected override void OnBeforeTransformParentChanged() Overrides UIBehaviour.OnBeforeTransformParentChanged() OnDidApplyAnimationProperties() Declaration protected override void OnDidApplyAnimationProperties() Overrides UIBehaviour.OnDidApplyAnimationProperties() OnDisable() Declaration protected override void OnDisable() Overrides UIBehaviour.OnDisable() OnEnable() Declaration protected override void OnEnable() Overrides UIBehaviour.OnEnable() OnTransformParentChanged() Declaration protected override void OnTransformParentChanged() Overrides UIBehaviour.OnTransformParentChanged() SetDirty() Mark the LayoutElement as dirty. Declaration protected void SetDirty() Remarks This will make the auto layout system process this element on the next layout pass. This method should be called by the LayoutElement whenever a change is made that potentially affects the layout. Extension Methods UIBehaviourExtensions.InvokeOnEnable(UIBehaviour) UIBehaviourExtensions.InvokeOnDisable(UIBehaviour) UIBehaviourExtensions.InvokeAwake(UIBehaviour) UIBehaviourExtensions.InvokeRebuild(UIBehaviour, CanvasUpdate) UIBehaviourExtensions.InvokeLateUpdate(UIBehaviour) UIBehaviourExtensions.InvokeUpdate(UIBehaviour) UIBehaviourExtensions.InvokeOnRectTransformDimensionsChange(UIBehaviour) UIBehaviourExtensions.InvokeOnCanvasGroupChanged(UIBehaviour) UIBehaviourExtensions.InvokeOnDidApplyAnimationProperties(UIBehaviour)"
  },
  "api/UnityEngine.UI.Text.html": {
    "href": "api/UnityEngine.UI.Text.html",
    "title": "Class Text | Unity UI | 1.0.0",
    "keywords": "Class Text Inheritance Object UIBehaviour Graphic MaskableGraphic Text Inherited Members MaskableGraphic.m_ShouldRecalculateStencil MaskableGraphic.m_MaskMaterial MaskableGraphic.m_IncludeForMasking MaskableGraphic.onCullStateChanged MaskableGraphic.maskable MaskableGraphic.m_ShouldRecalculate MaskableGraphic.m_StencilValue MaskableGraphic.GetModifiedMaterial(Material) MaskableGraphic.Cull(Rect, Boolean) MaskableGraphic.SetClipRect(Rect, Boolean) MaskableGraphic.SetClipSoftness(Vector2) MaskableGraphic.OnTransformParentChanged() MaskableGraphic.ParentMaskStateChanged() MaskableGraphic.OnCanvasHierarchyChanged() MaskableGraphic.RecalculateClipping() MaskableGraphic.RecalculateMasking() Graphic.s_DefaultUI Graphic.s_WhiteTexture Graphic.defaultGraphicMaterial Graphic.m_Material Graphic.m_SkipLayoutUpdate Graphic.m_SkipMaterialUpdate Graphic.color Graphic.raycastTarget Graphic.raycastPadding Graphic.m_OnDirtyLayoutCallback Graphic.m_OnDirtyVertsCallback Graphic.m_OnDirtyMaterialCallback Graphic.s_Mesh Graphic.m_CachedMesh Graphic.m_CachedUvs Graphic.useLegacyMeshGeneration Graphic.SetAllDirty() Graphic.SetLayoutDirty() Graphic.SetVerticesDirty() Graphic.SetMaterialDirty() Graphic.OnRectTransformDimensionsChange() Graphic.OnBeforeTransformParentChanged() Graphic.depth Graphic.rectTransform Graphic.canvas Graphic.canvasRenderer Graphic.defaultMaterial Graphic.material Graphic.materialForRendering Graphic.OnDestroy() Graphic.OnCullingChanged() Graphic.Rebuild(CanvasUpdate) Graphic.LayoutComplete() Graphic.GraphicUpdateComplete() Graphic.UpdateMaterial() Graphic.workerMesh Graphic.OnFillVBO(List<UIVertex>) Graphic.OnPopulateMesh(Mesh) Graphic.OnDidApplyAnimationProperties() Graphic.SetNativeSize() Graphic.Raycast(Vector2, Camera) Graphic.PixelAdjustPoint(Vector2) Graphic.GetPixelAdjustedRect() Graphic.CrossFadeColor(Color, Single, Boolean, Boolean) Graphic.CrossFadeColor(Color, Single, Boolean, Boolean, Boolean) Graphic.CrossFadeAlpha(Single, Single, Boolean) Graphic.RegisterDirtyLayoutCallback(UnityAction) Graphic.UnregisterDirtyLayoutCallback(UnityAction) Graphic.RegisterDirtyVerticesCallback(UnityAction) Graphic.UnregisterDirtyVerticesCallback(UnityAction) Graphic.RegisterDirtyMaterialCallback(UnityAction) Graphic.UnregisterDirtyMaterialCallback(UnityAction) UIBehaviour.Awake() UIBehaviour.Start() UIBehaviour.IsActive() UIBehaviour.OnCanvasGroupChanged() UIBehaviour.IsDestroyed() Namespace : UnityEngine.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class Text : MaskableGraphic, ICanvasElement, IClippable, IMaskable, IMaterialModifier, ILayoutElement Constructors Text() Declaration protected Text() Fields m_DisableFontTextureRebuiltCallback Declaration [NonSerialized] protected bool m_DisableFontTextureRebuiltCallback Field Value Type Description Boolean m_Text Declaration protected string m_Text Field Value Type Description String s_DefaultText Declaration protected static Material s_DefaultText Field Value Type Description Material Properties alignByGeometry Use the extents of glyph geometry to perform horizontal alignment rather than glyph metrics. Declaration public bool alignByGeometry { get; set; } Property Value Type Description Boolean Remarks This can result in better fitting left and right alignment, but may result in incorrect positioning when attempting to overlay multiple fonts (such as a specialized outline font) on top of each other. alignment Declaration public TextAnchor alignment { get; set; } Property Value Type Description TextAnchor cachedTextGenerator The cached TextGenerator used when generating visible Text. Declaration public TextGenerator cachedTextGenerator { get; } Property Value Type Description TextGenerator cachedTextGeneratorForLayout The cached TextGenerator used when determine Layout Declaration public TextGenerator cachedTextGeneratorForLayout { get; } Property Value Type Description TextGenerator flexibleHeight Declaration public virtual float flexibleHeight { get; } Property Value Type Description Single Implements ILayoutElement.flexibleHeight flexibleWidth Declaration public virtual float flexibleWidth { get; } Property Value Type Description Single Implements ILayoutElement.flexibleWidth font Declaration public Font font { get; set; } Property Value Type Description Font fontSize Declaration public int fontSize { get; set; } Property Value Type Description Int32 fontStyle Font style used by the Text's text. Declaration public FontStyle fontStyle { get; set; } Property Value Type Description FontStyle horizontalOverflow Horizontal overflow mode. Declaration public HorizontalWrapMode horizontalOverflow { get; set; } Property Value Type Description HorizontalWrapMode Remarks When set to HorizontalWrapMode.Overflow, text can exceed the horizontal boundaries of the Text graphic. When set to HorizontalWrapMode.Wrap, text will be word-wrapped to fit within the boundaries. layoutPriority Declaration public virtual int layoutPriority { get; } Property Value Type Description Int32 Implements ILayoutElement.layoutPriority lineSpacing Line spacing, specified as a factor of font line height. A value of 1 will produce normal line spacing. Declaration public float lineSpacing { get; set; } Property Value Type Description Single mainTexture Text's texture comes from the font. Declaration public override Texture mainTexture { get; } Property Value Type Description Texture Overrides Graphic.mainTexture minHeight Declaration public virtual float minHeight { get; } Property Value Type Description Single Implements ILayoutElement.minHeight minWidth Declaration public virtual float minWidth { get; } Property Value Type Description Single Implements ILayoutElement.minWidth pixelsPerUnit Provides information about how fonts are scale to the screen. Declaration public float pixelsPerUnit { get; } Property Value Type Description Single Remarks For dynamic fonts, the value is equivalent to the scale factor of the canvas. For non-dynamic fonts, the value is calculated from the requested text size and the size from the font. preferredHeight Declaration public virtual float preferredHeight { get; } Property Value Type Description Single Implements ILayoutElement.preferredHeight preferredWidth Declaration public virtual float preferredWidth { get; } Property Value Type Description Single Implements ILayoutElement.preferredWidth resizeTextForBestFit Should the text be allowed to auto resized. Declaration public bool resizeTextForBestFit { get; set; } Property Value Type Description Boolean resizeTextMaxSize The maximum size the text is allowed to be. 1 = infinitely large. Declaration public int resizeTextMaxSize { get; set; } Property Value Type Description Int32 resizeTextMinSize The minimum size the text is allowed to be. Declaration public int resizeTextMinSize { get; set; } Property Value Type Description Int32 supportRichText Whether this Text will support rich text. Declaration public bool supportRichText { get; set; } Property Value Type Description Boolean text Text that's being displayed by the Text. Declaration public virtual string text { get; set; } Property Value Type Description String Remarks This is the string value of a Text component. Use this to read or edit the message displayed in Text. Examples using UnityEngine; using UnityEngine.UI; public class Example : MonoBehaviour { public Text m_MyText; void Start() { //Text sets your text to say this message m_MyText.text = \"This is my text\"; } void Update() { //Press the space key to change the Text message if (Input.GetKey(KeyCode.Space)) { m_MyText.text = \"My text has now changed.\"; } } } verticalOverflow Vertical overflow mode. Declaration public VerticalWrapMode verticalOverflow { get; set; } Property Value Type Description VerticalWrapMode Methods CalculateLayoutInputHorizontal() Declaration public virtual void CalculateLayoutInputHorizontal() Implements ILayoutElement.CalculateLayoutInputHorizontal() CalculateLayoutInputVertical() Declaration public virtual void CalculateLayoutInputVertical() Implements ILayoutElement.CalculateLayoutInputVertical() FontTextureChanged() Called by the FontUpdateTracker when the texture associated with a font is modified. Declaration public void FontTextureChanged() GetGenerationSettings(Vector2) Convenience function to populate the generation setting for the text. Declaration public TextGenerationSettings GetGenerationSettings(Vector2 extents) Parameters Type Name Description Vector2 extents The extents the text can draw in. Returns Type Description TextGenerationSettings Generated settings. GetTextAnchorPivot(TextAnchor) Convenience function to determine the vector offset of the anchor. Declaration public static Vector2 GetTextAnchorPivot(TextAnchor anchor) Parameters Type Name Description TextAnchor anchor Returns Type Description Vector2 OnDisable() Declaration protected override void OnDisable() Overrides MaskableGraphic.OnDisable() OnEnable() Declaration protected override void OnEnable() Overrides MaskableGraphic.OnEnable() OnPopulateMesh(VertexHelper) Declaration protected override void OnPopulateMesh(VertexHelper toFill) Parameters Type Name Description VertexHelper toFill Overrides Graphic.OnPopulateMesh(VertexHelper) UpdateGeometry() Declaration protected override void UpdateGeometry() Overrides Graphic.UpdateGeometry() Extension Methods UIBehaviourExtensions.InvokeOnEnable(UIBehaviour) UIBehaviourExtensions.InvokeOnDisable(UIBehaviour) UIBehaviourExtensions.InvokeAwake(UIBehaviour) UIBehaviourExtensions.InvokeRebuild(UIBehaviour, CanvasUpdate) UIBehaviourExtensions.InvokeLateUpdate(UIBehaviour) UIBehaviourExtensions.InvokeUpdate(UIBehaviour) UIBehaviourExtensions.InvokeOnRectTransformDimensionsChange(UIBehaviour) UIBehaviourExtensions.InvokeOnCanvasGroupChanged(UIBehaviour) UIBehaviourExtensions.InvokeOnDidApplyAnimationProperties(UIBehaviour) GraphicExtension.InvokeOnPopulateMesh(Graphic, VertexHelper)"
  },
  "api/UnityEngine.UI.ScrollRect.ScrollRectEvent.html": {
    "href": "api/UnityEngine.UI.ScrollRect.ScrollRectEvent.html",
    "title": "Class ScrollRect.ScrollRectEvent | Unity UI | 1.0.0",
    "keywords": "Class ScrollRect.ScrollRectEvent Inheritance Object ScrollRect.ScrollRectEvent Namespace : UnityEngine.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] public class ScrollRectEvent : UnityEvent<Vector2>"
  },
  "api/UnityEngine.EventSystems.TouchInputModule.html": {
    "href": "api/UnityEngine.EventSystems.TouchInputModule.html",
    "title": "Class TouchInputModule | Unity UI | 1.0.0",
    "keywords": "Class TouchInputModule Inheritance Object UIBehaviour BaseInputModule PointerInputModule TouchInputModule Inherited Members PointerInputModule.kMouseLeftId PointerInputModule.kMouseRightId PointerInputModule.kMouseMiddleId PointerInputModule.kFakeTouchesId PointerInputModule.m_PointerData PointerInputModule.GetPointerData(Int32, PointerEventData, Boolean) PointerInputModule.RemovePointerData(PointerEventData) PointerInputModule.GetTouchPointerEventData(Touch, Boolean, Boolean) PointerInputModule.CopyFromTo(PointerEventData, PointerEventData) PointerInputModule.StateForMouseButton(Int32) PointerInputModule.GetMousePointerEventData() PointerInputModule.GetMousePointerEventData(Int32) PointerInputModule.GetLastPointerEventData(Int32) PointerInputModule.ProcessMove(PointerEventData) PointerInputModule.ProcessDrag(PointerEventData) PointerInputModule.IsPointerOverGameObject(Int32) PointerInputModule.ClearSelection() PointerInputModule.DeselectIfSelectionChanged(GameObject, BaseEventData) BaseInputModule.m_RaycastResultCache BaseInputModule.m_InputOverride BaseInputModule.input BaseInputModule.inputOverride BaseInputModule.eventSystem BaseInputModule.OnEnable() BaseInputModule.OnDisable() BaseInputModule.FindFirstRaycast(List<RaycastResult>) BaseInputModule.DetermineMoveDirection(Single, Single) BaseInputModule.DetermineMoveDirection(Single, Single, Single) BaseInputModule.FindCommonRoot(GameObject, GameObject) BaseInputModule.HandlePointerExitAndEnter(PointerEventData, GameObject) BaseInputModule.GetAxisEventData(Single, Single, Single) BaseInputModule.GetBaseEventData() BaseInputModule.ActivateModule() UIBehaviour.Awake() UIBehaviour.Start() UIBehaviour.OnDestroy() UIBehaviour.IsActive() UIBehaviour.OnRectTransformDimensionsChange() UIBehaviour.OnBeforeTransformParentChanged() UIBehaviour.OnTransformParentChanged() UIBehaviour.OnDidApplyAnimationProperties() UIBehaviour.OnCanvasGroupChanged() UIBehaviour.OnCanvasHierarchyChanged() UIBehaviour.IsDestroyed() Namespace : UnityEngine.EventSystems <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Obsolete(\"TouchInputModule is no longer required as Touch input is now handled in StandaloneInputModule.\")] public class TouchInputModule : PointerInputModule Constructors TouchInputModule() Declaration protected TouchInputModule() Properties allowActivationOnStandalone Declaration [Obsolete(\"allowActivationOnStandalone has been deprecated. Use forceModuleActive instead (UnityUpgradable) -> forceModuleActive\")] public bool allowActivationOnStandalone { get; set; } Property Value Type Description Boolean forceModuleActive Declaration public bool forceModuleActive { get; set; } Property Value Type Description Boolean Methods DeactivateModule() Declaration public override void DeactivateModule() Overrides BaseInputModule.DeactivateModule() IsModuleSupported() Declaration public override bool IsModuleSupported() Returns Type Description Boolean Overrides BaseInputModule.IsModuleSupported() Process() Declaration public override void Process() Overrides BaseInputModule.Process() ProcessTouchPress(PointerEventData, Boolean, Boolean) Declaration protected void ProcessTouchPress(PointerEventData pointerEvent, bool pressed, bool released) Parameters Type Name Description PointerEventData pointerEvent Boolean pressed Boolean released ShouldActivateModule() Declaration public override bool ShouldActivateModule() Returns Type Description Boolean Overrides BaseInputModule.ShouldActivateModule() ToString() Declaration public override string ToString() Returns Type Description String Overrides PointerInputModule.ToString() UpdateModule() Declaration public override void UpdateModule() Overrides BaseInputModule.UpdateModule() Extension Methods UIBehaviourExtensions.InvokeOnEnable(UIBehaviour) UIBehaviourExtensions.InvokeOnDisable(UIBehaviour) UIBehaviourExtensions.InvokeAwake(UIBehaviour) UIBehaviourExtensions.InvokeRebuild(UIBehaviour, CanvasUpdate) UIBehaviourExtensions.InvokeLateUpdate(UIBehaviour) UIBehaviourExtensions.InvokeUpdate(UIBehaviour) UIBehaviourExtensions.InvokeOnRectTransformDimensionsChange(UIBehaviour) UIBehaviourExtensions.InvokeOnCanvasGroupChanged(UIBehaviour) UIBehaviourExtensions.InvokeOnDidApplyAnimationProperties(UIBehaviour)"
  },
  "api/UnityEngine.EventSystems.IPointerExitHandler.html": {
    "href": "api/UnityEngine.EventSystems.IPointerExitHandler.html",
    "title": "Interface IPointerExitHandler | Unity UI | 1.0.0",
    "keywords": "Interface IPointerExitHandler Interface to implement if you wish to receive OnPointerExit callbacks. Namespace : UnityEngine.EventSystems <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public interface IPointerExitHandler : IEventSystemHandler Remarks Criteria for this event is implementation dependent. For example see StandAloneInputModule. Methods OnPointerExit(PointerEventData) Use this callback to detect pointer exit events Declaration void OnPointerExit(PointerEventData eventData) Parameters Type Name Description PointerEventData eventData"
  },
  "api/UnityEngine.UI.Tests.ToggleGroupExtension.html": {
    "href": "api/UnityEngine.UI.Tests.ToggleGroupExtension.html",
    "title": "Class ToggleGroupExtension | Unity UI | 1.0.0",
    "keywords": "Class ToggleGroupExtension Inheritance Object ToggleGroupExtension Namespace : UnityEngine.UI.Tests <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class ToggleGroupExtension Methods InvokeValidateToggleIsInGroup(ToggleGroup, Toggle) Declaration public static void InvokeValidateToggleIsInGroup(this ToggleGroup tgroup, Toggle toggle) Parameters Type Name Description ToggleGroup tgroup Toggle toggle"
  },
  "api/UnityEngine.UI.ColorBlock.html": {
    "href": "api/UnityEngine.UI.ColorBlock.html",
    "title": "Struct ColorBlock | Unity UI | 1.0.0",
    "keywords": "Struct ColorBlock Namespace : UnityEngine.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] public struct ColorBlock : IEquatable<ColorBlock> Properties colorMultiplier Multiplier applied to colors (allows brightening greater then base color). Declaration public float colorMultiplier { get; set; } Property Value Type Description Single defaultColorBlock Simple getter for a code generated default ColorBlock. Declaration public static ColorBlock defaultColorBlock { get; } Property Value Type Description ColorBlock disabledColor The disabled color for this color block. Declaration public Color disabledColor { get; set; } Property Value Type Description Color Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class ExampleClass : MonoBehaviour { public Button button; public Color newColor; void Start() { //Changes the button's Disabled color to the new color. ColorBlock cb = button.colors; cb.disabledColor = newColor; button.colors = cb; } } fadeDuration How long a color transition between states should take. Declaration public float fadeDuration { get; set; } Property Value Type Description Single highlightedColor The highlight color for this color block. Declaration public Color highlightedColor { get; set; } Property Value Type Description Color Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class ExampleClass : MonoBehaviour { public Button button; public Color newColor; void Start() { //Changes the button's Highlighted color to the new color. ColorBlock cb = button.colors; cb.highlightedColor = newColor; button.colors = cb; } } normalColor The normal color for this color block. Declaration public Color normalColor { get; set; } Property Value Type Description Color Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class ExampleClass : MonoBehaviour { public Button button; public Color newColor; void Start() { //Changes the button's Normal color to the new color. ColorBlock cb = button.colors; cb.normalColor = newColor; button.colors = cb; } } pressedColor The pressed color for this color block. Declaration public Color pressedColor { get; set; } Property Value Type Description Color Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class ExampleClass : MonoBehaviour { public Button button; public Color newColor; void Start() { //Changes the button's Pressed color to the new color. ColorBlock cb = button.colors; cb.pressedColor = newColor; button.colors = cb; } } selectedColor The selected color for this color block. Declaration public Color selectedColor { get; set; } Property Value Type Description Color Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class ExampleClass : MonoBehaviour { public Button button; public Color newColor; void Start() { //Changes the button's Selected color to the new color. ColorBlock cb = button.colors; cb.selectedColor = newColor; button.colors = cb; } } Methods Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides ValueType.Equals(Object) Equals(ColorBlock) Declaration public bool Equals(ColorBlock other) Parameters Type Name Description ColorBlock other Returns Type Description Boolean GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides ValueType.GetHashCode() Operators Equality(ColorBlock, ColorBlock) Declaration public static bool operator ==(ColorBlock point1, ColorBlock point2) Parameters Type Name Description ColorBlock point1 ColorBlock point2 Returns Type Description Boolean Inequality(ColorBlock, ColorBlock) Declaration public static bool operator !=(ColorBlock point1, ColorBlock point2) Parameters Type Name Description ColorBlock point1 ColorBlock point2 Returns Type Description Boolean"
  },
  "api/UnityEditor.UI.RectMask2DEditor.html": {
    "href": "api/UnityEditor.UI.RectMask2DEditor.html",
    "title": "Class RectMask2DEditor | Unity UI | 1.0.0",
    "keywords": "Class RectMask2DEditor Inheritance Object RectMask2DEditor Namespace : UnityEditor.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class RectMask2DEditor : Editor Methods OnEnable() Declaration protected virtual void OnEnable() OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/UnityEditor.UI.LayoutElementEditor.html": {
    "href": "api/UnityEditor.UI.LayoutElementEditor.html",
    "title": "Class LayoutElementEditor | Unity UI | 1.0.0",
    "keywords": "Class LayoutElementEditor Inheritance Object LayoutElementEditor Namespace : UnityEditor.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class LayoutElementEditor : Editor Methods OnEnable() Declaration protected virtual void OnEnable() OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/UnityEditor.UI.ContentSizeFitterEditor.html": {
    "href": "api/UnityEditor.UI.ContentSizeFitterEditor.html",
    "title": "Class ContentSizeFitterEditor | Unity UI | 1.0.0",
    "keywords": "Class ContentSizeFitterEditor Inheritance Object SelfControllerEditor ContentSizeFitterEditor Namespace : UnityEditor.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class ContentSizeFitterEditor : SelfControllerEditor Methods OnEnable() Declaration protected virtual void OnEnable() OnInspectorGUI() Declaration public override void OnInspectorGUI() Overrides SelfControllerEditor.OnInspectorGUI()"
  },
  "api/LayoutTests.VerticalLayoutGroupTests.html": {
    "href": "api/LayoutTests.VerticalLayoutGroupTests.html",
    "title": "Class VerticalLayoutGroupTests | Unity UI | 1.0.0",
    "keywords": "Class VerticalLayoutGroupTests Inheritance Object VerticalLayoutGroupTests Namespace : LayoutTests <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class VerticalLayoutGroupTests : IPrebuildSetup Methods OneTimeTearDown() Declaration public void OneTimeTearDown() Setup() Declaration public void Setup() TearDown() Declaration public void TearDown() TestCalculateLayoutInputHorizontal() Declaration public void TestCalculateLayoutInputHorizontal() TestCalculateLayoutInputVertical() Declaration public void TestCalculateLayoutInputVertical() TestCalculateLayoutVertical() Declaration public void TestCalculateLayoutVertical() TestCalculateLayoutVerticalReversed() Declaration public void TestCalculateLayoutVerticalReversed() TestSetup() Declaration public void TestSetup()"
  },
  "api/LayoutTests.HorizontalLayoutGroupTests.html": {
    "href": "api/LayoutTests.HorizontalLayoutGroupTests.html",
    "title": "Class HorizontalLayoutGroupTests | Unity UI | 1.0.0",
    "keywords": "Class HorizontalLayoutGroupTests Inheritance Object HorizontalLayoutGroupTests Namespace : LayoutTests <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class HorizontalLayoutGroupTests : IPrebuildSetup Methods OneTimeTearDown() Declaration public void OneTimeTearDown() Setup() Declaration public void Setup() TearDown() Declaration public void TearDown() TestCalculateLayoutHorizontal() Declaration public void TestCalculateLayoutHorizontal() TestCalculateLayoutHorizontalReversed() Declaration public void TestCalculateLayoutHorizontalReversed() TestCalculateLayoutInputHorizontal() Declaration public void TestCalculateLayoutInputHorizontal() TestCalculateLayoutInputVertical() Declaration public void TestCalculateLayoutInputVertical() TestSetup() Declaration public void TestSetup()"
  },
  "api/UnityEditor.EventSystems.Physics2DRaycasterEditor.html": {
    "href": "api/UnityEditor.EventSystems.Physics2DRaycasterEditor.html",
    "title": "Class Physics2DRaycasterEditor | Unity UI | 1.0.0",
    "keywords": "Class Physics2DRaycasterEditor Inheritance Object Physics2DRaycasterEditor Namespace : UnityEditor.EventSystems <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class Physics2DRaycasterEditor : Editor Methods OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/UnityEditor.UI.SpriteStateDrawer.html": {
    "href": "api/UnityEditor.UI.SpriteStateDrawer.html",
    "title": "Class SpriteStateDrawer | Unity UI | 1.0.0",
    "keywords": "Class SpriteStateDrawer Inheritance Object SpriteStateDrawer Namespace : UnityEditor.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class SpriteStateDrawer : PropertyDrawer Methods GetPropertyHeight(SerializedProperty, GUIContent) Declaration public override float GetPropertyHeight(SerializedProperty prop, GUIContent label) Parameters Type Name Description SerializedProperty prop GUIContent label Returns Type Description Single OnGUI(Rect, SerializedProperty, GUIContent) Declaration public override void OnGUI(Rect rect, SerializedProperty prop, GUIContent label) Parameters Type Name Description Rect rect SerializedProperty prop GUIContent label"
  },
  "api/UnityEngine.EventSystems.IUpdateSelectedHandler.html": {
    "href": "api/UnityEngine.EventSystems.IUpdateSelectedHandler.html",
    "title": "Interface IUpdateSelectedHandler | Unity UI | 1.0.0",
    "keywords": "Interface IUpdateSelectedHandler Interface to implement if you wish to receive OnUpdateSelected callbacks. Namespace : UnityEngine.EventSystems <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public interface IUpdateSelectedHandler : IEventSystemHandler Remarks Criteria for this event is implementation dependent. For example see StandAloneInputModule. Methods OnUpdateSelected(BaseEventData) Called by the EventSystem when the object associated with this EventTrigger is updated. Declaration void OnUpdateSelected(BaseEventData eventData) Parameters Type Name Description BaseEventData eventData Examples using UnityEngine; using UnityEngine.EventSystems; public class UpdateSelectedExample : MonoBehaviour, IUpdateSelectedHandler { public void OnUpdateSelected(BaseEventData data) { Debug.Log(\"OnUpdateSelected called.\"); } }"
  },
  "api/UnityEngine.UI.LayoutGroup.html": {
    "href": "api/UnityEngine.UI.LayoutGroup.html",
    "title": "Class LayoutGroup | Unity UI | 1.0.0",
    "keywords": "Class LayoutGroup Inheritance Object UIBehaviour LayoutGroup GridLayoutGroup HorizontalOrVerticalLayoutGroup Inherited Members UIBehaviour.Awake() UIBehaviour.Start() UIBehaviour.OnDestroy() UIBehaviour.IsActive() UIBehaviour.OnBeforeTransformParentChanged() UIBehaviour.OnTransformParentChanged() UIBehaviour.OnCanvasGroupChanged() UIBehaviour.OnCanvasHierarchyChanged() UIBehaviour.IsDestroyed() Namespace : UnityEngine.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public abstract class LayoutGroup : UIBehaviour, ILayoutElement, ILayoutGroup, ILayoutController Constructors LayoutGroup() Declaration protected LayoutGroup() Fields m_ChildAlignment Declaration protected TextAnchor m_ChildAlignment Field Value Type Description TextAnchor m_Padding Declaration protected RectOffset m_Padding Field Value Type Description RectOffset m_Tracker Declaration protected DrivenRectTransformTracker m_Tracker Field Value Type Description DrivenRectTransformTracker Properties childAlignment The alignment to use for the child layout elements in the layout group. Declaration public TextAnchor childAlignment { get; set; } Property Value Type Description TextAnchor Remarks If a layout element does not specify a flexible width or height, its child elements many not use the available space within the layout group. In this case, use the alignment settings to specify how to align child elements within their layout group. flexibleHeight See LayoutElement.flexibleHeight Declaration public virtual float flexibleHeight { get; } Property Value Type Description Single Implements ILayoutElement.flexibleHeight flexibleWidth See LayoutElement.flexibleWidth Declaration public virtual float flexibleWidth { get; } Property Value Type Description Single Implements ILayoutElement.flexibleWidth layoutPriority See LayoutElement.layoutPriority Declaration public virtual int layoutPriority { get; } Property Value Type Description Int32 Implements ILayoutElement.layoutPriority minHeight See LayoutElement.minHeight Declaration public virtual float minHeight { get; } Property Value Type Description Single Implements ILayoutElement.minHeight minWidth See LayoutElement.minWidth Declaration public virtual float minWidth { get; } Property Value Type Description Single Implements ILayoutElement.minWidth padding The padding to add around the child layout elements. Declaration public RectOffset padding { get; set; } Property Value Type Description RectOffset preferredHeight See LayoutElement.preferredHeight Declaration public virtual float preferredHeight { get; } Property Value Type Description Single Implements ILayoutElement.preferredHeight preferredWidth See LayoutElement.preferredWidth Declaration public virtual float preferredWidth { get; } Property Value Type Description Single Implements ILayoutElement.preferredWidth rectChildren Declaration protected List<RectTransform> rectChildren { get; } Property Value Type Description List < RectTransform > rectTransform Declaration protected RectTransform rectTransform { get; } Property Value Type Description RectTransform Methods CalculateLayoutInputHorizontal() Declaration public virtual void CalculateLayoutInputHorizontal() Implements ILayoutElement.CalculateLayoutInputHorizontal() CalculateLayoutInputVertical() Declaration public abstract void CalculateLayoutInputVertical() Implements ILayoutElement.CalculateLayoutInputVertical() GetAlignmentOnAxis(Int32) Returns the alignment on the specified axis as a fraction where 0 is left/top, 0.5 is middle, and 1 is right/bottom. Declaration protected float GetAlignmentOnAxis(int axis) Parameters Type Name Description Int32 axis The axis to get alignment along. 0 is horizontal and 1 is vertical. Returns Type Description Single The alignment as a fraction where 0 is left/top, 0.5 is middle, and 1 is right/bottom. GetStartOffset(Int32, Single) Returns the calculated position of the first child layout element along the given axis. Declaration protected float GetStartOffset(int axis, float requiredSpaceWithoutPadding) Parameters Type Name Description Int32 axis The axis index. 0 is horizontal and 1 is vertical. Single requiredSpaceWithoutPadding The total space required on the given axis for all the layout elements including spacing and excluding padding. Returns Type Description Single The position of the first child along the given axis. GetTotalFlexibleSize(Int32) The flexible size for the layout group on the given axis. Declaration protected float GetTotalFlexibleSize(int axis) Parameters Type Name Description Int32 axis The axis index. 0 is horizontal and 1 is vertical. Returns Type Description Single The flexible size GetTotalMinSize(Int32) The min size for the layout group on the given axis. Declaration protected float GetTotalMinSize(int axis) Parameters Type Name Description Int32 axis The axis index. 0 is horizontal and 1 is vertical. Returns Type Description Single The min size GetTotalPreferredSize(Int32) The preferred size for the layout group on the given axis. Declaration protected float GetTotalPreferredSize(int axis) Parameters Type Name Description Int32 axis The axis index. 0 is horizontal and 1 is vertical. Returns Type Description Single The preferred size. OnDidApplyAnimationProperties() Callback for when properties have been changed by animation. Declaration protected override void OnDidApplyAnimationProperties() Overrides UIBehaviour.OnDidApplyAnimationProperties() OnDisable() Declaration protected override void OnDisable() Overrides UIBehaviour.OnDisable() OnEnable() Declaration protected override void OnEnable() Overrides UIBehaviour.OnEnable() OnRectTransformDimensionsChange() Declaration protected override void OnRectTransformDimensionsChange() Overrides UIBehaviour.OnRectTransformDimensionsChange() OnTransformChildrenChanged() Declaration protected virtual void OnTransformChildrenChanged() SetChildAlongAxis(RectTransform, Int32, Single) Set the position and size of a child layout element along the given axis. Declaration protected void SetChildAlongAxis(RectTransform rect, int axis, float pos) Parameters Type Name Description RectTransform rect The RectTransform of the child layout element. Int32 axis The axis to set the position and size along. 0 is horizontal and 1 is vertical. Single pos The position from the left side or top. SetChildAlongAxis(RectTransform, Int32, Single, Single) Set the position and size of a child layout element along the given axis. Declaration protected void SetChildAlongAxis(RectTransform rect, int axis, float pos, float size) Parameters Type Name Description RectTransform rect The RectTransform of the child layout element. Int32 axis The axis to set the position and size along. 0 is horizontal and 1 is vertical. Single pos The position from the left side or top. Single size The size. SetChildAlongAxisWithScale(RectTransform, Int32, Single, Single) Set the position and size of a child layout element along the given axis. Declaration protected void SetChildAlongAxisWithScale(RectTransform rect, int axis, float pos, float scaleFactor) Parameters Type Name Description RectTransform rect The RectTransform of the child layout element. Int32 axis The axis to set the position and size along. 0 is horizontal and 1 is vertical. Single pos The position from the left side or top. Single scaleFactor SetChildAlongAxisWithScale(RectTransform, Int32, Single, Single, Single) Set the position and size of a child layout element along the given axis. Declaration protected void SetChildAlongAxisWithScale(RectTransform rect, int axis, float pos, float size, float scaleFactor) Parameters Type Name Description RectTransform rect The RectTransform of the child layout element. Int32 axis The axis to set the position and size along. 0 is horizontal and 1 is vertical. Single pos The position from the left side or top. Single size The size. Single scaleFactor SetDirty() Mark the LayoutGroup as dirty. Declaration protected void SetDirty() SetLayoutHorizontal() Declaration public abstract void SetLayoutHorizontal() Implements ILayoutController.SetLayoutHorizontal() SetLayoutInputForAxis(Single, Single, Single, Int32) Used to set the calculated layout properties for the given axis. Declaration protected void SetLayoutInputForAxis(float totalMin, float totalPreferred, float totalFlexible, int axis) Parameters Type Name Description Single totalMin The min size for the layout group. Single totalPreferred The preferred size for the layout group. Single totalFlexible The flexible size for the layout group. Int32 axis The axis to set sizes for. 0 is horizontal and 1 is vertical. SetLayoutVertical() Declaration public abstract void SetLayoutVertical() Implements ILayoutController.SetLayoutVertical() SetProperty<T>(ref T, T) Helper method used to set a given property if it has changed. Declaration protected void SetProperty<T>(ref T currentValue, T newValue) Parameters Type Name Description T currentValue A reference to the member value. T newValue The new value. Type Parameters Name Description T Extension Methods UIBehaviourExtensions.InvokeOnEnable(UIBehaviour) UIBehaviourExtensions.InvokeOnDisable(UIBehaviour) UIBehaviourExtensions.InvokeAwake(UIBehaviour) UIBehaviourExtensions.InvokeRebuild(UIBehaviour, CanvasUpdate) UIBehaviourExtensions.InvokeLateUpdate(UIBehaviour) UIBehaviourExtensions.InvokeUpdate(UIBehaviour) UIBehaviourExtensions.InvokeOnRectTransformDimensionsChange(UIBehaviour) UIBehaviourExtensions.InvokeOnCanvasGroupChanged(UIBehaviour) UIBehaviourExtensions.InvokeOnDidApplyAnimationProperties(UIBehaviour)"
  },
  "api/UnityEngine.UI.CanvasScaler.ScreenMatchMode.html": {
    "href": "api/UnityEngine.UI.CanvasScaler.ScreenMatchMode.html",
    "title": "Enum CanvasScaler.ScreenMatchMode | Unity UI | 1.0.0",
    "keywords": "Enum CanvasScaler.ScreenMatchMode Scale the canvas area with the width as reference, the height as reference, or something in between. Namespace : UnityEngine.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public enum ScreenMatchMode Fields Name Description Expand Expand the canvas area either horizontally or vertically, so the size of the canvas will never be smaller than the reference. MatchWidthOrHeight Scale the canvas area with the width as reference, the height as reference, or something in between. Shrink Crop the canvas area either horizontally or vertically, so the size of the canvas will never be larger than the reference."
  },
  "api/UnityEngine.UI.CanvasScaler.ScaleMode.html": {
    "href": "api/UnityEngine.UI.CanvasScaler.ScaleMode.html",
    "title": "Enum CanvasScaler.ScaleMode | Unity UI | 1.0.0",
    "keywords": "Enum CanvasScaler.ScaleMode Determines how UI elements in the Canvas are scaled. Namespace : UnityEngine.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public enum ScaleMode Fields Name Description ConstantPhysicalSize Using the Constant Physical Size mode, positions and sizes of UI elements are specified in physical units, such as millimeters, points, or picas. ConstantPixelSize Using the Constant Pixel Size mode, positions and sizes of UI elements are specified in pixels on the screen. ScaleWithScreenSize Using the Scale With Screen Size mode, positions and sizes can be specified according to the pixels of a specified reference resolution. If the current screen resolution is larger than the reference resolution, the Canvas will keep having only the resolution of the reference resolution, but will scale up in order to fit the screen. If the current screen resolution is smaller than the reference resolution, the Canvas will similarly be scaled down to fit."
  },
  "api/UnityEngine.EventSystems.PhysicsRaycaster.html": {
    "href": "api/UnityEngine.EventSystems.PhysicsRaycaster.html",
    "title": "Class PhysicsRaycaster | Unity UI | 1.0.0",
    "keywords": "Class PhysicsRaycaster Simple event system using physics raycasts. Inheritance Object UIBehaviour BaseRaycaster PhysicsRaycaster Physics2DRaycaster Inherited Members BaseRaycaster.priority BaseRaycaster.sortOrderPriority BaseRaycaster.renderOrderPriority BaseRaycaster.rootRaycaster BaseRaycaster.ToString() BaseRaycaster.OnEnable() BaseRaycaster.OnDisable() BaseRaycaster.OnCanvasHierarchyChanged() BaseRaycaster.OnTransformParentChanged() UIBehaviour.Awake() UIBehaviour.Start() UIBehaviour.OnDestroy() UIBehaviour.IsActive() UIBehaviour.OnRectTransformDimensionsChange() UIBehaviour.OnBeforeTransformParentChanged() UIBehaviour.OnDidApplyAnimationProperties() UIBehaviour.OnCanvasGroupChanged() UIBehaviour.IsDestroyed() Namespace : UnityEngine.EventSystems <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class PhysicsRaycaster : BaseRaycaster Constructors PhysicsRaycaster() Declaration protected PhysicsRaycaster() Fields kNoEventMaskSet Const to use for clarity when no event mask is set Declaration protected const int kNoEventMaskSet = -1 Field Value Type Description Int32 m_EventCamera Declaration protected Camera m_EventCamera Field Value Type Description Camera m_EventMask Layer mask used to filter events. Always combined with the camera's culling mask if a camera is used. Declaration protected LayerMask m_EventMask Field Value Type Description LayerMask m_LastMaxRayIntersections Declaration protected int m_LastMaxRayIntersections Field Value Type Description Int32 m_MaxRayIntersections The max number of intersections allowed. 0 = allocating version anything else is non alloc. Declaration protected int m_MaxRayIntersections Field Value Type Description Int32 Properties depth Depth used to determine the order of event processing. Declaration public virtual int depth { get; } Property Value Type Description Int32 eventCamera Declaration public override Camera eventCamera { get; } Property Value Type Description Camera Overrides BaseRaycaster.eventCamera eventMask Layer mask used to filter events. Always combined with the camera's culling mask if a camera is used. Declaration public LayerMask eventMask { get; set; } Property Value Type Description LayerMask finalEventMask Event mask used to determine which objects will receive events. Declaration public int finalEventMask { get; } Property Value Type Description Int32 maxRayIntersections Max number of ray intersection allowed to be found. Declaration public int maxRayIntersections { get; set; } Property Value Type Description Int32 Remarks A value of zero will represent using the allocating version of the raycast function where as any other value will use the non allocating version. Methods ComputeRayAndDistance(PointerEventData, ref Ray, ref Int32, ref Single) Returns a ray going from camera through the event position and the distance between the near and far clipping planes along that ray. Declaration protected bool ComputeRayAndDistance(PointerEventData eventData, ref Ray ray, ref int eventDisplayIndex, ref float distanceToClipPlane) Parameters Type Name Description PointerEventData eventData The pointer event for which we will cast a ray. Ray ray The ray to use. Int32 eventDisplayIndex The display index used. Single distanceToClipPlane The distance between the near and far clipping planes along the ray. Returns Type Description Boolean True if the operation was successful. false if it was not possible to compute, such as the eventPosition being outside of the view. Raycast(PointerEventData, List<RaycastResult>) Declaration public override void Raycast(PointerEventData eventData, List<RaycastResult> resultAppendList) Parameters Type Name Description PointerEventData eventData List < RaycastResult > resultAppendList Overrides BaseRaycaster.Raycast(PointerEventData, List<RaycastResult>) Extension Methods UIBehaviourExtensions.InvokeOnEnable(UIBehaviour) UIBehaviourExtensions.InvokeOnDisable(UIBehaviour) UIBehaviourExtensions.InvokeAwake(UIBehaviour) UIBehaviourExtensions.InvokeRebuild(UIBehaviour, CanvasUpdate) UIBehaviourExtensions.InvokeLateUpdate(UIBehaviour) UIBehaviourExtensions.InvokeUpdate(UIBehaviour) UIBehaviourExtensions.InvokeOnRectTransformDimensionsChange(UIBehaviour) UIBehaviourExtensions.InvokeOnCanvasGroupChanged(UIBehaviour) UIBehaviourExtensions.InvokeOnDidApplyAnimationProperties(UIBehaviour)"
  },
  "api/UnityEngine.EventSystems.IPointerClickHandler.html": {
    "href": "api/UnityEngine.EventSystems.IPointerClickHandler.html",
    "title": "Interface IPointerClickHandler | Unity UI | 1.0.0",
    "keywords": "Interface IPointerClickHandler Interface to implement if you wish to receive OnPointerClick callbacks. Namespace : UnityEngine.EventSystems <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public interface IPointerClickHandler : IEventSystemHandler Remarks Criteria for this event is implementation dependent. For example see StandAloneInputModule. Examples using UnityEngine; using UnityEngine.EventSystems; public class Example : MonoBehaviour, IPointerClickHandler { //Detect if a click occurs public void OnPointerClick(PointerEventData pointerEventData) { //Output to console the clicked GameObject's name and the following message. You can replace this with your own actions for when clicking the GameObject. Debug.Log(name + \" Game Object Clicked!\"); } } Methods OnPointerClick(PointerEventData) Use this callback to detect clicks. Declaration void OnPointerClick(PointerEventData eventData) Parameters Type Name Description PointerEventData eventData"
  },
  "api/UnityEngine.UI.FontData.html": {
    "href": "api/UnityEngine.UI.FontData.html",
    "title": "Class FontData | Unity UI | 1.0.0",
    "keywords": "Class FontData Inheritance Object FontData Namespace : UnityEngine.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] public class FontData : ISerializationCallbackReceiver Properties alignByGeometry Use the extents of glyph geometry to perform horizontal alignment rather than glyph metrics. Declaration public bool alignByGeometry { get; set; } Property Value Type Description Boolean Remarks This can result in better fitting left and right alignment, but may result in incorrect positioning when attempting to overlay multiple fonts (such as a specialized outline font) on top of each other. alignment How is the text aligned for this generated Text object. Declaration public TextAnchor alignment { get; set; } Property Value Type Description TextAnchor bestFit Is best fit used for this generated Text object. Declaration public bool bestFit { get; set; } Property Value Type Description Boolean defaultFontData Get a font data with sensible defaults. Declaration public static FontData defaultFontData { get; } Property Value Type Description FontData font The Font to use for this generated Text object. Declaration public Font font { get; set; } Property Value Type Description Font fontSize The Font size to use for this generated Text object. Declaration public int fontSize { get; set; } Property Value Type Description Int32 fontStyle The font style to use for this generated Text object. Declaration public FontStyle fontStyle { get; set; } Property Value Type Description FontStyle horizontalOverflow The horizontal overflow policy for this generated Text object. Declaration public HorizontalWrapMode horizontalOverflow { get; set; } Property Value Type Description HorizontalWrapMode lineSpacing The line spaceing for this generated Text object. Declaration public float lineSpacing { get; set; } Property Value Type Description Single maxSize The max size for this generated Text object. Declaration public int maxSize { get; set; } Property Value Type Description Int32 minSize The min size for this generated Text object. Declaration public int minSize { get; set; } Property Value Type Description Int32 richText Should rich text be used for this generated Text object. Declaration public bool richText { get; set; } Property Value Type Description Boolean verticalOverflow The vertical overflow policy for this generated Text object. Declaration public VerticalWrapMode verticalOverflow { get; set; } Property Value Type Description VerticalWrapMode"
  },
  "api/UnityEngine.UI.AspectRatioFitter.AspectMode.html": {
    "href": "api/UnityEngine.UI.AspectRatioFitter.AspectMode.html",
    "title": "Enum AspectRatioFitter.AspectMode | Unity UI | 1.0.0",
    "keywords": "Enum AspectRatioFitter.AspectMode Specifies a mode to use to enforce an aspect ratio. Namespace : UnityEngine.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public enum AspectMode Fields Name Description EnvelopeParent Sizes the rectangle such that the parent rectangle is fully contained within. FitInParent Sizes the rectangle such that it's fully contained within the parent rectangle. HeightControlsWidth Changes the width of the rectangle to match the aspect ratio. None The aspect ratio is not enforced WidthControlsHeight Changes the height of the rectangle to match the aspect ratio."
  },
  "api/UnityEngine.UI.InputField.LineType.html": {
    "href": "api/UnityEngine.UI.InputField.LineType.html",
    "title": "Enum InputField.LineType | Unity UI | 1.0.0",
    "keywords": "Enum InputField.LineType The LineType is used to describe the behavior of the InputField. Namespace : UnityEngine.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public enum LineType Fields Name Description MultiLineNewline Is a multiline InputField with vertical scrolling and overflow. Pressing the return key will insert a new line character. MultiLineSubmit Is a multiline InputField with vertical scrolling and overflow. Pressing the return key will submit. SingleLine Only allows 1 line to be entered. Has horizontal scrolling and no word wrap. Pressing enter will submit the InputField."
  },
  "api/UnityEngine.UI.InputField.ContentType.html": {
    "href": "api/UnityEngine.UI.InputField.ContentType.html",
    "title": "Enum InputField.ContentType | Unity UI | 1.0.0",
    "keywords": "Enum InputField.ContentType Setting the content type acts as a shortcut for setting a combination of InputType, CharacterValidation, LineType, and TouchScreenKeyboardType Namespace : UnityEngine.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public enum ContentType Remarks The ContentType affects character validation, keyboard type used (on platforms with on-screen keyboards), whether the InputField accepts multiple lines, and whether the text is autocorrected (on platforms that offer input auto-correction) or is treated as a password where the characters are not shown directly. Fields Name Description Alphanumeric Allows letters A-Z, a-z and numbers 0-9. Autocorrected Allows all input and performs auto-correction on platforms that support it. Custom Custom types that allows user-defined settings. DecimalNumber Allows decimal numbers (positive or negative). EmailAddress The input is used for typing in an email address. IntegerNumber Allow whole numbers (positive or negative). Name The InputField is used for typing in a name, and enforces capitalization of the first letter of each word. Note that the user can circumvent the first letter capitalization rules by deleting automatically-capitalized letters. Password Allows all input and hides the typed characters by showing them as asterisks characters. Pin Allows integer numbers and hides the typed characters by showing them as asterisks characters. Standard Allows all input."
  },
  "api/UnityEngine.EventSystems.AbstractEventData.html": {
    "href": "api/UnityEngine.EventSystems.AbstractEventData.html",
    "title": "Class AbstractEventData | Unity UI | 1.0.0",
    "keywords": "Class AbstractEventData A class that can be used for sending simple events via the event system. Inheritance Object AbstractEventData BaseEventData Namespace : UnityEngine.EventSystems <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public abstract class AbstractEventData Fields m_Used Declaration protected bool m_Used Field Value Type Description Boolean Properties used Is the event used? Declaration public virtual bool used { get; } Property Value Type Description Boolean Methods Reset() Reset the event. Declaration public virtual void Reset() Use() Use the event. Declaration public virtual void Use() Remarks Internally sets a flag that can be checked via used to see if further processing should happen."
  },
  "api/UnityEditor.UI.ImageEditor.html": {
    "href": "api/UnityEditor.UI.ImageEditor.html",
    "title": "Class ImageEditor | Unity UI | 1.0.0",
    "keywords": "Class ImageEditor Editor class used to edit UI Sprites. Inheritance Object GraphicEditor ImageEditor Inherited Members GraphicEditor.m_Script GraphicEditor.m_Color GraphicEditor.m_Material GraphicEditor.m_RaycastTarget GraphicEditor.m_RaycastPadding GraphicEditor.m_ShowNativeSize GraphicEditor.SetShowNativeSize(Boolean, Boolean) GraphicEditor.NativeSizeButtonGUI() GraphicEditor.AppearanceControlsGUI() GraphicEditor.RaycastControlsGUI() Namespace : UnityEditor.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class ImageEditor : GraphicEditor Methods GetInfoString() A string containing the Image details to be used as a overlay on the component Preview. Declaration public override string GetInfoString() Returns Type Description String The Image details. HasPreviewGUI() All graphics have a preview. Declaration public override bool HasPreviewGUI() Returns Type Description Boolean OnDisable() Declaration protected override void OnDisable() Overrides GraphicEditor.OnDisable() OnEnable() Declaration protected override void OnEnable() Overrides GraphicEditor.OnEnable() OnInspectorGUI() Declaration public override void OnInspectorGUI() Overrides GraphicEditor.OnInspectorGUI() OnPreviewGUI(Rect, GUIStyle) Draw the Image preview. Declaration public override void OnPreviewGUI(Rect rect, GUIStyle background) Parameters Type Name Description Rect rect GUIStyle background SpriteGUI() Draw the atlas and Image selection fields. Declaration protected void SpriteGUI() TypeGUI() Sprites's custom properties based on the type. Declaration protected void TypeGUI()"
  },
  "api/UnityEngine.UI.IVertexModifier.html": {
    "href": "api/UnityEngine.UI.IVertexModifier.html",
    "title": "Interface IVertexModifier | Unity UI | 1.0.0",
    "keywords": "Interface IVertexModifier Namespace : UnityEngine.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Obsolete(\"Use IMeshModifier instead\", true)] public interface IVertexModifier Methods ModifyVertices(List<UIVertex>) Declaration [Obsolete(\"use IMeshModifier.ModifyMesh (VertexHelper verts) instead\", true)] void ModifyVertices(List<UIVertex> verts) Parameters Type Name Description List < UIVertex > verts"
  },
  "api/UnityEngine.UI.GraphicRaycaster.html": {
    "href": "api/UnityEngine.UI.GraphicRaycaster.html",
    "title": "Class GraphicRaycaster | Unity UI | 1.0.0",
    "keywords": "Class GraphicRaycaster Inheritance Object UIBehaviour BaseRaycaster GraphicRaycaster Inherited Members BaseRaycaster.priority BaseRaycaster.rootRaycaster BaseRaycaster.ToString() BaseRaycaster.OnEnable() BaseRaycaster.OnDisable() BaseRaycaster.OnCanvasHierarchyChanged() BaseRaycaster.OnTransformParentChanged() UIBehaviour.Awake() UIBehaviour.Start() UIBehaviour.OnDestroy() UIBehaviour.IsActive() UIBehaviour.OnRectTransformDimensionsChange() UIBehaviour.OnBeforeTransformParentChanged() UIBehaviour.OnDidApplyAnimationProperties() UIBehaviour.OnCanvasGroupChanged() UIBehaviour.IsDestroyed() Namespace : UnityEngine.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class GraphicRaycaster : BaseRaycaster Constructors GraphicRaycaster() Declaration protected GraphicRaycaster() Fields kNoEventMaskSet Declaration protected const int kNoEventMaskSet = -1 Field Value Type Description Int32 m_BlockingMask Declaration protected LayerMask m_BlockingMask Field Value Type Description LayerMask Properties blockingObjects The type of objects that are checked to determine if they block graphic raycasts. Declaration public GraphicRaycaster.BlockingObjects blockingObjects { get; set; } Property Value Type Description GraphicRaycaster.BlockingObjects eventCamera The camera that will generate rays for this raycaster. Declaration public override Camera eventCamera { get; } Property Value Type Description Camera Null if Camera mode is ScreenSpaceOverlay or ScreenSpaceCamera and has no camera. canvas.worldCanvas if not null Camera.main. Overrides BaseRaycaster.eventCamera ignoreReversedGraphics Whether Graphics facing away from the raycaster are checked for raycasts. Declaration public bool ignoreReversedGraphics { get; set; } Property Value Type Description Boolean renderOrderPriority Priority of the raycaster based upon render order. Declaration public override int renderOrderPriority { get; } Property Value Type Description Int32 The renderOrder priority. Overrides BaseRaycaster.renderOrderPriority sortOrderPriority Priority of the raycaster based upon sort order. Declaration public override int sortOrderPriority { get; } Property Value Type Description Int32 The sortOrder priority. Overrides BaseRaycaster.sortOrderPriority Methods Raycast(PointerEventData, List<RaycastResult>) Perform the raycast against the list of graphics associated with the Canvas. Declaration public override void Raycast(PointerEventData eventData, List<RaycastResult> resultAppendList) Parameters Type Name Description PointerEventData eventData Current event data List < RaycastResult > resultAppendList List of hit objects to append new results to. Overrides BaseRaycaster.Raycast(PointerEventData, List<RaycastResult>) Extension Methods UIBehaviourExtensions.InvokeOnEnable(UIBehaviour) UIBehaviourExtensions.InvokeOnDisable(UIBehaviour) UIBehaviourExtensions.InvokeAwake(UIBehaviour) UIBehaviourExtensions.InvokeRebuild(UIBehaviour, CanvasUpdate) UIBehaviourExtensions.InvokeLateUpdate(UIBehaviour) UIBehaviourExtensions.InvokeUpdate(UIBehaviour) UIBehaviourExtensions.InvokeOnRectTransformDimensionsChange(UIBehaviour) UIBehaviourExtensions.InvokeOnCanvasGroupChanged(UIBehaviour) UIBehaviourExtensions.InvokeOnDidApplyAnimationProperties(UIBehaviour)"
  },
  "api/UnityEditor.UI.SelectableEditor.html": {
    "href": "api/UnityEditor.UI.SelectableEditor.html",
    "title": "Class SelectableEditor | Unity UI | 1.0.0",
    "keywords": "Class SelectableEditor Inheritance Object SelectableEditor ButtonEditor DropdownEditor InputFieldEditor ScrollbarEditor SliderEditor ToggleEditor Namespace : UnityEditor.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class SelectableEditor : Editor Methods OnDisable() Declaration protected virtual void OnDisable() OnEnable() Declaration protected virtual void OnEnable() OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/UnityEngine.UI.Image.html": {
    "href": "api/UnityEngine.UI.Image.html",
    "title": "Class Image | Unity UI | 1.0.0",
    "keywords": "Class Image Image is a textured element in the UI hierarchy. Inheritance Object UIBehaviour Graphic MaskableGraphic Image ImageHook Inherited Members MaskableGraphic.m_ShouldRecalculateStencil MaskableGraphic.m_MaskMaterial MaskableGraphic.m_IncludeForMasking MaskableGraphic.onCullStateChanged MaskableGraphic.maskable MaskableGraphic.m_ShouldRecalculate MaskableGraphic.m_StencilValue MaskableGraphic.GetModifiedMaterial(Material) MaskableGraphic.Cull(Rect, Boolean) MaskableGraphic.SetClipRect(Rect, Boolean) MaskableGraphic.SetClipSoftness(Vector2) MaskableGraphic.OnTransformParentChanged() MaskableGraphic.ParentMaskStateChanged() MaskableGraphic.RecalculateClipping() MaskableGraphic.RecalculateMasking() Graphic.s_DefaultUI Graphic.s_WhiteTexture Graphic.defaultGraphicMaterial Graphic.m_Material Graphic.m_SkipLayoutUpdate Graphic.m_SkipMaterialUpdate Graphic.color Graphic.raycastTarget Graphic.raycastPadding Graphic.m_OnDirtyLayoutCallback Graphic.m_OnDirtyVertsCallback Graphic.m_OnDirtyMaterialCallback Graphic.s_Mesh Graphic.m_CachedMesh Graphic.m_CachedUvs Graphic.useLegacyMeshGeneration Graphic.SetAllDirty() Graphic.SetLayoutDirty() Graphic.SetVerticesDirty() Graphic.SetMaterialDirty() Graphic.OnRectTransformDimensionsChange() Graphic.OnBeforeTransformParentChanged() Graphic.depth Graphic.rectTransform Graphic.canvas Graphic.canvasRenderer Graphic.defaultMaterial Graphic.materialForRendering Graphic.OnDestroy() Graphic.OnCullingChanged() Graphic.Rebuild(CanvasUpdate) Graphic.LayoutComplete() Graphic.GraphicUpdateComplete() Graphic.UpdateGeometry() Graphic.workerMesh Graphic.OnFillVBO(List<UIVertex>) Graphic.OnPopulateMesh(Mesh) Graphic.Raycast(Vector2, Camera) Graphic.PixelAdjustPoint(Vector2) Graphic.GetPixelAdjustedRect() Graphic.CrossFadeColor(Color, Single, Boolean, Boolean) Graphic.CrossFadeColor(Color, Single, Boolean, Boolean, Boolean) Graphic.CrossFadeAlpha(Single, Single, Boolean) Graphic.RegisterDirtyLayoutCallback(UnityAction) Graphic.UnregisterDirtyLayoutCallback(UnityAction) Graphic.RegisterDirtyVerticesCallback(UnityAction) Graphic.UnregisterDirtyVerticesCallback(UnityAction) Graphic.RegisterDirtyMaterialCallback(UnityAction) Graphic.UnregisterDirtyMaterialCallback(UnityAction) UIBehaviour.Awake() UIBehaviour.Start() UIBehaviour.IsActive() UIBehaviour.OnCanvasGroupChanged() UIBehaviour.IsDestroyed() Namespace : UnityEngine.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class Image : MaskableGraphic, ICanvasElement, IClippable, IMaskable, IMaterialModifier, ISerializationCallbackReceiver, ILayoutElement, ICanvasRaycastFilter Constructors Image() Declaration protected Image() Fields s_ETC1DefaultUI Declaration protected static Material s_ETC1DefaultUI Field Value Type Description Material Properties alphaHitTestMinimumThreshold The alpha threshold specifies the minimum alpha a pixel must have for the event to considered a \"hit\" on the Image. Declaration public float alphaHitTestMinimumThreshold { get; set; } Property Value Type Description Single Remarks Alpha values less than the threshold will cause raycast events to pass through the Image. An value of 1 would cause only fully opaque pixels to register raycast events on the Image. The alpha tested is retrieved from the image sprite only, while the alpha of the Image [[UI.Graphic.color]] is disregarded. alphaHitTestMinimumThreshold defaults to 0; all raycast events inside the Image rectangle are considered a hit. In order for greater than 0 to values to work, the sprite used by the Image must have readable pixels. This can be achieved by enabling Read/Write enabled in the advanced Texture Import Settings for the sprite and disabling atlassing for the sprite. Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class ExampleClass : MonoBehaviour { public Image theButton; // Use this for initialization void Start() { theButton.alphaHitTestMinimumThreshold = 0.5f; } } defaultETC1GraphicMaterial Cache of the default Canvas Ericsson Texture Compression 1 (ETC1) and alpha Material. Declaration public static Material defaultETC1GraphicMaterial { get; } Property Value Type Description Material Remarks Stores the ETC1 supported Canvas Material that is returned from GetETC1SupportedCanvasMaterial(). Note: Always specify the UI/DefaultETC1 Shader in the Always Included Shader list, to use the ETC1 and alpha Material. eventAlphaThreshold Declaration [Obsolete(\"eventAlphaThreshold has been deprecated. Use eventMinimumAlphaThreshold instead (UnityUpgradable) -> alphaHitTestMinimumThreshold\")] public float eventAlphaThreshold { get; set; } Property Value Type Description Single fillAmount Amount of the Image shown when the Image.type is set to Image.Type.Filled. Declaration public float fillAmount { get; set; } Property Value Type Description Single Remarks 0-1 range with 0 being nothing shown, and 1 being the full Image. Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class Cooldown : MonoBehaviour { public Image cooldown; public bool coolingDown; public float waitTime = 30.0f; // Update is called once per frame void Update() { if (coolingDown == true) { //Reduce fill amount over 30 seconds cooldown.fillAmount -= 1.0f / waitTime * Time.deltaTime; } } } fillCenter Whether or not to render the center of a Tiled or Sliced image. Declaration public bool fillCenter { get; set; } Property Value Type Description Boolean Remarks This will only have any effect if the Image.sprite has borders. Examples using UnityEngine; using System.Collections; using UnityEngine.UI; public class FillCenterScript : MonoBehaviour { public Image xmasCalenderDoor; // removes the center of the image to reveal the image behind it void OpenCalendarDoor() { xmasCalenderDoor.fillCenter = false; } } fillClockwise Whether the Image should be filled clockwise (true) or counter-clockwise (false). Declaration public bool fillClockwise { get; set; } Property Value Type Description Boolean Remarks This will only have any effect if the Image.type is set to Image.Type.Filled and Image.fillMethod is set to any of the Radial methods. Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class FillClockwiseScript : MonoBehaviour { public Image healthCircle; // This method sets the direction of the health circle. // Clockwise for the Player, Counter Clockwise for the opponent. void SetHealthDirection(GameObject target) { if (target.tag == \"Player\") { healthCircle.fillClockwise = true; } else if (target.tag == \"Opponent\") { healthCircle.fillClockwise = false; } } } fillMethod Declaration public Image.FillMethod fillMethod { get; set; } Property Value Type Description Image.FillMethod fillOrigin Declaration public int fillOrigin { get; set; } Property Value Type Description Int32 flexibleHeight See ILayoutElement.flexibleHeight. Declaration public virtual float flexibleHeight { get; } Property Value Type Description Single Implements ILayoutElement.flexibleHeight flexibleWidth See ILayoutElement.flexibleWidth. Declaration public virtual float flexibleWidth { get; } Property Value Type Description Single Implements ILayoutElement.flexibleWidth hasBorder Whether the Sprite of the image has a border to work with. Declaration public bool hasBorder { get; } Property Value Type Description Boolean layoutPriority See ILayoutElement.layoutPriority. Declaration public virtual int layoutPriority { get; } Property Value Type Description Int32 Implements ILayoutElement.layoutPriority mainTexture Image's texture comes from the UnityEngine.Image. Declaration public override Texture mainTexture { get; } Property Value Type Description Texture Overrides Graphic.mainTexture material The specified Material used by this Image. The default Material is used instead if one wasn't specified. Declaration public override Material material { get; set; } Property Value Type Description Material Overrides Graphic.material minHeight See ILayoutElement.minHeight. Declaration public virtual float minHeight { get; } Property Value Type Description Single Implements ILayoutElement.minHeight minWidth See ILayoutElement.minWidth. Declaration public virtual float minWidth { get; } Property Value Type Description Single Implements ILayoutElement.minWidth multipliedPixelsPerUnit Declaration protected float multipliedPixelsPerUnit { get; } Property Value Type Description Single overrideSprite Declaration public Sprite overrideSprite { get; set; } Property Value Type Description Sprite pixelsPerUnit Declaration public float pixelsPerUnit { get; } Property Value Type Description Single pixelsPerUnitMultiplier Pixel per unit modifier to change how sliced sprites are generated. Declaration public float pixelsPerUnitMultiplier { get; set; } Property Value Type Description Single preferredHeight If there is a sprite being rendered returns the size of that sprite. In the case of a slided or tiled sprite will return the calculated minimum size possible Declaration public virtual float preferredHeight { get; } Property Value Type Description Single Implements ILayoutElement.preferredHeight preferredWidth If there is a sprite being rendered returns the size of that sprite. In the case of a slided or tiled sprite will return the calculated minimum size possible Declaration public virtual float preferredWidth { get; } Property Value Type Description Single Implements ILayoutElement.preferredWidth preserveAspect Whether this image should preserve its Sprite aspect ratio. Declaration public bool preserveAspect { get; set; } Property Value Type Description Boolean sprite Declaration public Sprite sprite { get; set; } Property Value Type Description Sprite type How to display the image. Declaration public Image.Type type { get; set; } Property Value Type Description Image.Type Remarks Unity can interpret an Image in various different ways depending on the intended purpose. This can be used to display: Whole images stretched to fit the RectTransform of the Image. A 9-sliced image useful for various decorated UI boxes and other rectangular elements. A tiled image with sections of the sprite repeated. As a partial image, useful for wipes, fades, timers, status bars etc. useSpriteMesh Allows you to specify whether the UI Image should be displayed using the mesh generated by the TextureImporter, or by a simple quad mesh. Declaration public bool useSpriteMesh { get; set; } Property Value Type Description Boolean Remarks When this property is set to false, the UI Image uses a simple quad. When set to true, the UI Image uses the sprite mesh generated by the [[TextureImporter]]. You should set this to true if you want to use a tightly fitted sprite mesh based on the alpha values in your image. Note: If the texture importer's SpriteMeshType property is set to SpriteMeshType.FullRect, it will only generate a quad, and not a tightly fitted sprite mesh, which means this UI image will be drawn using a quad regardless of the value of this property. Therefore, when enabling this property to use a tightly fitted sprite mesh, you must also ensure the texture importer's SpriteMeshType property is set to Tight. Methods CalculateLayoutInputHorizontal() See ILayoutElement.CalculateLayoutInputHorizontal. Declaration public virtual void CalculateLayoutInputHorizontal() Implements ILayoutElement.CalculateLayoutInputHorizontal() CalculateLayoutInputVertical() See ILayoutElement.CalculateLayoutInputVertical. Declaration public virtual void CalculateLayoutInputVertical() Implements ILayoutElement.CalculateLayoutInputVertical() DisableSpriteOptimizations() Disable all automatic sprite optimizations. Declaration public void DisableSpriteOptimizations() Remarks When a new Sprite is assigned update optimizations are automatically applied. IsRaycastLocationValid(Vector2, Camera) Calculate if the ray location for this image is a valid hit location. Takes into account a Alpha test threshold. Declaration public virtual bool IsRaycastLocationValid(Vector2 screenPoint, Camera eventCamera) Parameters Type Name Description Vector2 screenPoint The screen point to check against Camera eventCamera The camera in which to use to calculate the coordinating position Returns Type Description Boolean If the location is a valid hit or not. Remarks Also see See:ICanvasRaycastFilter. OnAfterDeserialize() See ISerializationCallbackReceiver. Declaration public virtual void OnAfterDeserialize() OnBeforeSerialize() See ISerializationCallbackReceiver. Declaration public virtual void OnBeforeSerialize() OnCanvasHierarchyChanged() Declaration protected override void OnCanvasHierarchyChanged() Overrides MaskableGraphic.OnCanvasHierarchyChanged() OnDidApplyAnimationProperties() Declaration protected override void OnDidApplyAnimationProperties() Overrides Graphic.OnDidApplyAnimationProperties() OnDisable() Declaration protected override void OnDisable() Overrides MaskableGraphic.OnDisable() OnEnable() Declaration protected override void OnEnable() Overrides MaskableGraphic.OnEnable() OnPopulateMesh(VertexHelper) Update the UI renderer mesh. Declaration protected override void OnPopulateMesh(VertexHelper toFill) Parameters Type Name Description VertexHelper toFill Overrides Graphic.OnPopulateMesh(VertexHelper) SetNativeSize() Adjusts the image size to make it pixel-perfect. Declaration public override void SetNativeSize() Overrides Graphic.SetNativeSize() Remarks This means setting the Images RectTransform.sizeDelta to be equal to the Sprite dimensions. UpdateMaterial() Update the renderer's material. Declaration protected override void UpdateMaterial() Overrides Graphic.UpdateMaterial() Extension Methods UIBehaviourExtensions.InvokeOnEnable(UIBehaviour) UIBehaviourExtensions.InvokeOnDisable(UIBehaviour) UIBehaviourExtensions.InvokeAwake(UIBehaviour) UIBehaviourExtensions.InvokeRebuild(UIBehaviour, CanvasUpdate) UIBehaviourExtensions.InvokeLateUpdate(UIBehaviour) UIBehaviourExtensions.InvokeUpdate(UIBehaviour) UIBehaviourExtensions.InvokeOnRectTransformDimensionsChange(UIBehaviour) UIBehaviourExtensions.InvokeOnCanvasGroupChanged(UIBehaviour) UIBehaviourExtensions.InvokeOnDidApplyAnimationProperties(UIBehaviour) GraphicExtension.InvokeOnPopulateMesh(Graphic, VertexHelper)"
  },
  "api/UnityEngine.UI.FontUpdateTracker.html": {
    "href": "api/UnityEngine.UI.FontUpdateTracker.html",
    "title": "Class FontUpdateTracker | Unity UI | 1.0.0",
    "keywords": "Class FontUpdateTracker Utility class that is used to help with Text update. Inheritance Object FontUpdateTracker Namespace : UnityEngine.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class FontUpdateTracker Remarks When Unity rebuilds a font atlas a callback is sent to the font. Using this class you can register your text as needing to be rebuilt if the font atlas is updated. Methods TrackText(Text) Register a Text element for receiving texture atlas rebuild calls. Declaration public static void TrackText(Text t) Parameters Type Name Description Text t The Text object to track UntrackText(Text) Deregister a Text element from receiving texture atlas rebuild calls. Declaration public static void UntrackText(Text t) Parameters Type Name Description Text t The Text object to no longer track"
  },
  "api/UnityEngine.EventSystems.IBeginDragHandler.html": {
    "href": "api/UnityEngine.EventSystems.IBeginDragHandler.html",
    "title": "Interface IBeginDragHandler | Unity UI | 1.0.0",
    "keywords": "Interface IBeginDragHandler Interface to implement if you wish to receive OnBeginDrag callbacks. Note: You need to implement IDragHandler in addition to IBeginDragHandler. Namespace : UnityEngine.EventSystems <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public interface IBeginDragHandler : IEventSystemHandler Remarks Criteria for this event is implementation dependent. For example see StandAloneInputModule. Methods OnBeginDrag(PointerEventData) Called by a BaseInputModule before a drag is started. Declaration void OnBeginDrag(PointerEventData eventData) Parameters Type Name Description PointerEventData eventData"
  },
  "api/UnityEngine.UI.DefaultControls.IFactoryControls.html": {
    "href": "api/UnityEngine.UI.DefaultControls.IFactoryControls.html",
    "title": "Interface DefaultControls.IFactoryControls | Unity UI | 1.0.0",
    "keywords": "Interface DefaultControls.IFactoryControls Factory interface to create a GameObject in this class. It is necessary to use this interface in the whole class so MenuOption and Editor can work using ObjectFactory and default Presets. Namespace : UnityEngine.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public interface IFactoryControls Remarks The only available method is CreateGameObject. It needs to be called with every Components the created Object will need because of a bug with Undo and RectTransform. Adding a UI component on the created GameObject may crash if done after Undo.SetTransformParent, So it's better to prevent such behavior in this class by asking for full creation with all the components. Methods CreateGameObject(String, Type[]) Declaration GameObject CreateGameObject(string name, params Type[] components) Parameters Type Name Description String name Type [] components Returns Type Description GameObject"
  },
  "api/UnityEngine.EventSystems.ExecuteEvents.html": {
    "href": "api/UnityEngine.EventSystems.ExecuteEvents.html",
    "title": "Class ExecuteEvents | Unity UI | 1.0.0",
    "keywords": "Class ExecuteEvents Inheritance Object ExecuteEvents Namespace : UnityEngine.EventSystems <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class ExecuteEvents Properties beginDragHandler Declaration public static ExecuteEvents.EventFunction<IBeginDragHandler> beginDragHandler { get; } Property Value Type Description ExecuteEvents.EventFunction < IBeginDragHandler > cancelHandler Declaration public static ExecuteEvents.EventFunction<ICancelHandler> cancelHandler { get; } Property Value Type Description ExecuteEvents.EventFunction < ICancelHandler > deselectHandler Declaration public static ExecuteEvents.EventFunction<IDeselectHandler> deselectHandler { get; } Property Value Type Description ExecuteEvents.EventFunction < IDeselectHandler > dragHandler Declaration public static ExecuteEvents.EventFunction<IDragHandler> dragHandler { get; } Property Value Type Description ExecuteEvents.EventFunction < IDragHandler > dropHandler Declaration public static ExecuteEvents.EventFunction<IDropHandler> dropHandler { get; } Property Value Type Description ExecuteEvents.EventFunction < IDropHandler > endDragHandler Declaration public static ExecuteEvents.EventFunction<IEndDragHandler> endDragHandler { get; } Property Value Type Description ExecuteEvents.EventFunction < IEndDragHandler > initializePotentialDrag Declaration public static ExecuteEvents.EventFunction<IInitializePotentialDragHandler> initializePotentialDrag { get; } Property Value Type Description ExecuteEvents.EventFunction < IInitializePotentialDragHandler > moveHandler Declaration public static ExecuteEvents.EventFunction<IMoveHandler> moveHandler { get; } Property Value Type Description ExecuteEvents.EventFunction < IMoveHandler > pointerClickHandler Declaration public static ExecuteEvents.EventFunction<IPointerClickHandler> pointerClickHandler { get; } Property Value Type Description ExecuteEvents.EventFunction < IPointerClickHandler > pointerDownHandler Declaration public static ExecuteEvents.EventFunction<IPointerDownHandler> pointerDownHandler { get; } Property Value Type Description ExecuteEvents.EventFunction < IPointerDownHandler > pointerEnterHandler Declaration public static ExecuteEvents.EventFunction<IPointerEnterHandler> pointerEnterHandler { get; } Property Value Type Description ExecuteEvents.EventFunction < IPointerEnterHandler > pointerExitHandler Declaration public static ExecuteEvents.EventFunction<IPointerExitHandler> pointerExitHandler { get; } Property Value Type Description ExecuteEvents.EventFunction < IPointerExitHandler > pointerUpHandler Declaration public static ExecuteEvents.EventFunction<IPointerUpHandler> pointerUpHandler { get; } Property Value Type Description ExecuteEvents.EventFunction < IPointerUpHandler > scrollHandler Declaration public static ExecuteEvents.EventFunction<IScrollHandler> scrollHandler { get; } Property Value Type Description ExecuteEvents.EventFunction < IScrollHandler > selectHandler Declaration public static ExecuteEvents.EventFunction<ISelectHandler> selectHandler { get; } Property Value Type Description ExecuteEvents.EventFunction < ISelectHandler > submitHandler Declaration public static ExecuteEvents.EventFunction<ISubmitHandler> submitHandler { get; } Property Value Type Description ExecuteEvents.EventFunction < ISubmitHandler > updateSelectedHandler Declaration public static ExecuteEvents.EventFunction<IUpdateSelectedHandler> updateSelectedHandler { get; } Property Value Type Description ExecuteEvents.EventFunction < IUpdateSelectedHandler > Methods CanHandleEvent<T>(GameObject) Whether the specified game object will be able to handle the specified event. Declaration public static bool CanHandleEvent<T>(GameObject go) where T : IEventSystemHandler Parameters Type Name Description GameObject go Returns Type Description Boolean Type Parameters Name Description T Execute<T>(GameObject, BaseEventData, ExecuteEvents.EventFunction<T>) Declaration public static bool Execute<T>(GameObject target, BaseEventData eventData, ExecuteEvents.EventFunction<T> functor) where T : IEventSystemHandler Parameters Type Name Description GameObject target BaseEventData eventData ExecuteEvents.EventFunction <T> functor Returns Type Description Boolean Type Parameters Name Description T ExecuteHierarchy<T>(GameObject, BaseEventData, ExecuteEvents.EventFunction<T>) Declaration public static GameObject ExecuteHierarchy<T>(GameObject root, BaseEventData eventData, ExecuteEvents.EventFunction<T> callbackFunction) where T : IEventSystemHandler Parameters Type Name Description GameObject root BaseEventData eventData ExecuteEvents.EventFunction <T> callbackFunction Returns Type Description GameObject Type Parameters Name Description T GetEventHandler<T>(GameObject) Bubble the specified event on the game object, figuring out which object will actually receive the event. Declaration public static GameObject GetEventHandler<T>(GameObject root) where T : IEventSystemHandler Parameters Type Name Description GameObject root Returns Type Description GameObject Type Parameters Name Description T ValidateEventData<T>(BaseEventData) Declaration public static T ValidateEventData<T>(BaseEventData data) where T : class Parameters Type Name Description BaseEventData data Returns Type Description T Type Parameters Name Description T"
  },
  "api/UnityEngine.UI.LayoutUtility.html": {
    "href": "api/UnityEngine.UI.LayoutUtility.html",
    "title": "Class LayoutUtility | Unity UI | 1.0.0",
    "keywords": "Class LayoutUtility Utility functions for querying layout elements for their minimum, preferred, and flexible sizes. Inheritance Object LayoutUtility Namespace : UnityEngine.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class LayoutUtility Methods GetFlexibleHeight(RectTransform) Returns the flexible height of the layout element. Declaration public static float GetFlexibleHeight(RectTransform rect) Parameters Type Name Description RectTransform rect The RectTransform of the layout element to query. Returns Type Description Single Remarks All components on the GameObject that implement the ILayoutElement are queried. The one with the highest priority which has a value for this setting is used. If multiple componets have this setting and have the same priority, the maximum value out of those is used. GetFlexibleSize(RectTransform, Int32) Returns the flexible size of the layout element. Declaration public static float GetFlexibleSize(RectTransform rect, int axis) Parameters Type Name Description RectTransform rect The RectTransform of the layout element to query. Int32 axis The axis to query. This can be 0 or 1. Returns Type Description Single Remarks All components on the GameObject that implement the ILayoutElement are queried. The one with the highest priority which has a value for this setting is used. If multiple componets have this setting and have the same priority, the maximum value out of those is used. GetFlexibleWidth(RectTransform) Returns the flexible width of the layout element. Declaration public static float GetFlexibleWidth(RectTransform rect) Parameters Type Name Description RectTransform rect The RectTransform of the layout element to query. Returns Type Description Single Remarks All components on the GameObject that implement the ILayoutElement are queried. The one with the highest priority which has a value for this setting is used. If multiple componets have this setting and have the same priority, the maximum value out of those is used GetLayoutProperty(RectTransform, Func<ILayoutElement, Single>, Single) Gets a calculated layout property for the layout element with the given RectTransform. Declaration public static float GetLayoutProperty(RectTransform rect, Func<ILayoutElement, float> property, float defaultValue) Parameters Type Name Description RectTransform rect The RectTransform of the layout element to get a property for. Func < ILayoutElement , Single > property The property to calculate. Single defaultValue The default value to use if no component on the layout element supplies the given property Returns Type Description Single The calculated value of the layout property. GetLayoutProperty(RectTransform, Func<ILayoutElement, Single>, Single, out ILayoutElement) Gets a calculated layout property for the layout element with the given RectTransform. Declaration public static float GetLayoutProperty(RectTransform rect, Func<ILayoutElement, float> property, float defaultValue, out ILayoutElement source) Parameters Type Name Description RectTransform rect The RectTransform of the layout element to get a property for. Func < ILayoutElement , Single > property The property to calculate. Single defaultValue The default value to use if no component on the layout element supplies the given property ILayoutElement source Optional out parameter to get the component that supplied the calculated value. Returns Type Description Single The calculated value of the layout property. GetMinHeight(RectTransform) Returns the minimum height of the layout element. Declaration public static float GetMinHeight(RectTransform rect) Parameters Type Name Description RectTransform rect The RectTransform of the layout element to query. Returns Type Description Single Remarks All components on the GameObject that implement the ILayoutElement are queried. The one with the highest priority which has a value for this setting is used. If multiple componets have this setting and have the same priority, the maximum value out of those is used. GetMinSize(RectTransform, Int32) Returns the minimum size of the layout element. Declaration public static float GetMinSize(RectTransform rect, int axis) Parameters Type Name Description RectTransform rect The RectTransform of the layout element to query. Int32 axis The axis to query. This can be 0 or 1. Returns Type Description Single Remarks All components on the GameObject that implement the ILayoutElement are queried. The one with the highest priority which has a value for this setting is used. If multiple componets have this setting and have the same priority, the maximum value out of those is used. GetMinWidth(RectTransform) Returns the minimum width of the layout element. Declaration public static float GetMinWidth(RectTransform rect) Parameters Type Name Description RectTransform rect The RectTransform of the layout element to query. Returns Type Description Single Remarks All components on the GameObject that implement the ILayoutElement are queried. The one with the highest priority which has a value for this setting is used. If multiple componets have this setting and have the same priority, the maximum value out of those is used. GetPreferredHeight(RectTransform) Returns the preferred height of the layout element. Declaration public static float GetPreferredHeight(RectTransform rect) Parameters Type Name Description RectTransform rect The RectTransform of the layout element to query. Returns Type Description Single Remarks All components on the GameObject that implement the ILayoutElement are queried. The one with the highest priority which has a value for this setting is used. If multiple componets have this setting and have the same priority, the maximum value out of those is used. GetPreferredSize(RectTransform, Int32) Returns the preferred size of the layout element. Declaration public static float GetPreferredSize(RectTransform rect, int axis) Parameters Type Name Description RectTransform rect The RectTransform of the layout element to query. Int32 axis The axis to query. This can be 0 or 1. Returns Type Description Single Remarks All components on the GameObject that implement the ILayoutElement are queried. The one with the highest priority which has a value for this setting is used. If multiple componets have this setting and have the same priority, the maximum value out of those is used. GetPreferredWidth(RectTransform) Returns the preferred width of the layout element. Declaration public static float GetPreferredWidth(RectTransform rect) Parameters Type Name Description RectTransform rect The RectTransform of the layout element to query. Returns Type Description Single All components on the GameObject that implement the ILayoutElement are queried. The one with the highest priority which has a value for this setting is used. If multiple componets have this setting and have the same priority, the maximum value out of those is used."
  },
  "api/UnityEngine.UI.CanvasUpdateRegistry.html": {
    "href": "api/UnityEngine.UI.CanvasUpdateRegistry.html",
    "title": "Class CanvasUpdateRegistry | Unity UI | 1.0.0",
    "keywords": "Class CanvasUpdateRegistry A place where CanvasElements can register themselves for rebuilding. Inheritance Object CanvasUpdateRegistry Namespace : UnityEngine.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class CanvasUpdateRegistry Constructors CanvasUpdateRegistry() Declaration protected CanvasUpdateRegistry() Properties instance Get the singleton registry instance. Declaration public static CanvasUpdateRegistry instance { get; } Property Value Type Description CanvasUpdateRegistry Methods IsRebuildingGraphics() Are graphics currently being rebuild. Declaration public static bool IsRebuildingGraphics() Returns Type Description Boolean True if the rebuild loop is CanvasUpdate.PreRender or CanvasUpdate.Render IsRebuildingLayout() Are graphics layouts currently being calculated.. Declaration public static bool IsRebuildingLayout() Returns Type Description Boolean True if the rebuild loop is CanvasUpdate.Prelayout, CanvasUpdate.Layout or CanvasUpdate.Postlayout RegisterCanvasElementForGraphicRebuild(ICanvasElement) Try and add the given element to the rebuild list. Will not return if successfully added. Declaration public static void RegisterCanvasElementForGraphicRebuild(ICanvasElement element) Parameters Type Name Description ICanvasElement element The element that is needing rebuilt. RegisterCanvasElementForLayoutRebuild(ICanvasElement) Try and add the given element to the layout rebuild list. Will not return if successfully added. Declaration public static void RegisterCanvasElementForLayoutRebuild(ICanvasElement element) Parameters Type Name Description ICanvasElement element The element that is needing rebuilt. TryRegisterCanvasElementForGraphicRebuild(ICanvasElement) Try and add the given element to the rebuild list. Declaration public static bool TryRegisterCanvasElementForGraphicRebuild(ICanvasElement element) Parameters Type Name Description ICanvasElement element The element that is needing rebuilt. Returns Type Description Boolean True if the element was successfully added to the rebuilt list. False if either already inside a Graphic Update loop OR has already been added to the list. TryRegisterCanvasElementForLayoutRebuild(ICanvasElement) Try and add the given element to the layout rebuild list. Declaration public static bool TryRegisterCanvasElementForLayoutRebuild(ICanvasElement element) Parameters Type Name Description ICanvasElement element The element that is needing rebuilt. Returns Type Description Boolean True if the element was successfully added to the rebuilt list. False if either already inside a Graphic Update loop OR has already been added to the list. UnRegisterCanvasElementForRebuild(ICanvasElement) Remove the given element from both the graphic and the layout rebuild lists. Declaration public static void UnRegisterCanvasElementForRebuild(ICanvasElement element) Parameters Type Name Description ICanvasElement element"
  },
  "api/UnityEngine.UI.CanvasUpdate.html": {
    "href": "api/UnityEngine.UI.CanvasUpdate.html",
    "title": "Enum CanvasUpdate | Unity UI | 1.0.0",
    "keywords": "Enum CanvasUpdate Values of 'update' called on a Canvas update. Namespace : UnityEngine.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public enum CanvasUpdate Remarks If modifying also modify m_CanvasUpdateProfilerStrings to match. Fields Name Description LatePreRender Called late, before render. Layout Called for layout. MaxUpdateValue Max enum value. Always last. PostLayout Called after layout. Prelayout Called before layout. PreRender Called before rendering."
  },
  "api/UnityEngine.UI.CanvasScaler.Unit.html": {
    "href": "api/UnityEngine.UI.CanvasScaler.Unit.html",
    "title": "Enum CanvasScaler.Unit | Unity UI | 1.0.0",
    "keywords": "Enum CanvasScaler.Unit The possible physical unit types Namespace : UnityEngine.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public enum Unit Fields Name Description Centimeters Use centimeters. A centimeter is 1/100 of a meter Inches Use inches. Millimeters Use millimeters. A millimeter is 1/10 of a centimeter, and 1/1000 of a meter. Picas Use picas. One pica is 1/6 of an inch. Points Use points. One point is 1/12 of a pica, and 1/72 of an inch."
  },
  "api/UnityEngine.EventSystems.PointerEventData.FramePressState.html": {
    "href": "api/UnityEngine.EventSystems.PointerEventData.FramePressState.html",
    "title": "Enum PointerEventData.FramePressState | Unity UI | 1.0.0",
    "keywords": "Enum PointerEventData.FramePressState The state of a press for the given frame. Namespace : UnityEngine.EventSystems <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public enum FramePressState Fields Name Description NotChanged Same as last frame. Pressed Button was pressed this frame. PressedAndReleased Button was pressed and released this frame. Released Button was released this frame."
  },
  "api/UnityEngine.EventSystems.PointerEventData.InputButton.html": {
    "href": "api/UnityEngine.EventSystems.PointerEventData.InputButton.html",
    "title": "Enum PointerEventData.InputButton | Unity UI | 1.0.0",
    "keywords": "Enum PointerEventData.InputButton Input press tracking. Namespace : UnityEngine.EventSystems <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public enum InputButton Fields Name Description Left Left button Middle Middle button Right Right button."
  },
  "api/UnityEngine.EventSystems.IDropHandler.html": {
    "href": "api/UnityEngine.EventSystems.IDropHandler.html",
    "title": "Interface IDropHandler | Unity UI | 1.0.0",
    "keywords": "Interface IDropHandler Interface to implement if you wish to receive OnDrop callbacks. Namespace : UnityEngine.EventSystems <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public interface IDropHandler : IEventSystemHandler Remarks Criteria for this event is implementation dependent. For example see StandAloneInputModule. Examples using UnityEngine; using UnityEngine.EventSystems; public class DropMe : MonoBehaviour, IDropHandler { public void OnDrop(PointerEventData data) { if (data.pointerDrag != null) { Debug.Log (\"Dropped object was: \" + data.pointerDrag); } } } Methods OnDrop(PointerEventData) Called by a BaseInputModule on a target that can accept a drop. Declaration void OnDrop(PointerEventData eventData) Parameters Type Name Description PointerEventData eventData"
  },
  "api/UnityEngine.UI.ClipperRegistry.html": {
    "href": "api/UnityEngine.UI.ClipperRegistry.html",
    "title": "Class ClipperRegistry | Unity UI | 1.0.0",
    "keywords": "Class ClipperRegistry Registry class to keep track of all IClippers that exist in the scene Inheritance Object ClipperRegistry Namespace : UnityEngine.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class ClipperRegistry Remarks This is used during the CanvasUpdate loop to cull clippable elements. The clipping is called after layout, but before Graphic update. Constructors ClipperRegistry() Declaration protected ClipperRegistry() Properties instance The singleton instance of the clipper registry. Declaration public static ClipperRegistry instance { get; } Property Value Type Description ClipperRegistry Methods Cull() Perform the clipping on all registered IClipper Declaration public void Cull() Register(IClipper) Register a unique IClipper element Declaration public static void Register(IClipper c) Parameters Type Name Description IClipper c The clipper element to add Unregister(IClipper) UnRegister a IClipper element Declaration public static void Unregister(IClipper c) Parameters Type Name Description IClipper c The Element to try and remove."
  },
  "api/UnityEngine.UI.InputField.OnValidateInput.html": {
    "href": "api/UnityEngine.UI.InputField.OnValidateInput.html",
    "title": "Delegate InputField.OnValidateInput | Unity UI | 1.0.0",
    "keywords": "Delegate InputField.OnValidateInput Namespace : UnityEngine.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate char OnValidateInput(string text, int charIndex, char addedChar); Parameters Type Name Description String text Int32 charIndex Char addedChar Returns Type Description Char"
  },
  "api/UnityEngine.UI.Selectable.Transition.html": {
    "href": "api/UnityEngine.UI.Selectable.Transition.html",
    "title": "Enum Selectable.Transition | Unity UI | 1.0.0",
    "keywords": "Enum Selectable.Transition Transition mode for a Selectable. Namespace : UnityEngine.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public enum Transition Fields Name Description Animation Use an animation transition. ColorTint Use an color tint transition. None No Transition. SpriteSwap Use a sprite swap transition."
  },
  "api/UnityEngine.UI.IMask.html": {
    "href": "api/UnityEngine.UI.IMask.html",
    "title": "Interface IMask | Unity UI | 1.0.0",
    "keywords": "Interface IMask Namespace : UnityEngine.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Obsolete(\"Not supported anymore.\", true)] public interface IMask Properties rectTransform Declaration RectTransform rectTransform { get; } Property Value Type Description RectTransform Methods Enabled() Declaration bool Enabled() Returns Type Description Boolean"
  },
  "api/UnityEngine.UI.Tests.GraphicExtension.html": {
    "href": "api/UnityEngine.UI.Tests.GraphicExtension.html",
    "title": "Class GraphicExtension | Unity UI | 1.0.0",
    "keywords": "Class GraphicExtension Inheritance Object GraphicExtension Namespace : UnityEngine.UI.Tests <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class GraphicExtension Methods InvokeOnPopulateMesh(Graphic, VertexHelper) Declaration public static void InvokeOnPopulateMesh(this Graphic graphic, VertexHelper vh) Parameters Type Name Description Graphic graphic VertexHelper vh"
  },
  "api/UnityEngine.UI.MaskableGraphic.html": {
    "href": "api/UnityEngine.UI.MaskableGraphic.html",
    "title": "Class MaskableGraphic | Unity UI | 1.0.0",
    "keywords": "Class MaskableGraphic A Graphic that is capable of being masked out. Inheritance Object UIBehaviour Graphic MaskableGraphic Image RawImage Text Inherited Members Graphic.s_DefaultUI Graphic.s_WhiteTexture Graphic.defaultGraphicMaterial Graphic.m_Material Graphic.m_SkipLayoutUpdate Graphic.m_SkipMaterialUpdate Graphic.color Graphic.raycastTarget Graphic.raycastPadding Graphic.m_OnDirtyLayoutCallback Graphic.m_OnDirtyVertsCallback Graphic.m_OnDirtyMaterialCallback Graphic.s_Mesh Graphic.m_CachedMesh Graphic.m_CachedUvs Graphic.useLegacyMeshGeneration Graphic.SetAllDirty() Graphic.SetLayoutDirty() Graphic.SetVerticesDirty() Graphic.SetMaterialDirty() Graphic.OnRectTransformDimensionsChange() Graphic.OnBeforeTransformParentChanged() Graphic.depth Graphic.rectTransform Graphic.canvas Graphic.canvasRenderer Graphic.defaultMaterial Graphic.material Graphic.materialForRendering Graphic.mainTexture Graphic.OnDestroy() Graphic.OnCullingChanged() Graphic.Rebuild(CanvasUpdate) Graphic.LayoutComplete() Graphic.GraphicUpdateComplete() Graphic.UpdateMaterial() Graphic.UpdateGeometry() Graphic.workerMesh Graphic.OnFillVBO(List<UIVertex>) Graphic.OnPopulateMesh(Mesh) Graphic.OnPopulateMesh(VertexHelper) Graphic.OnDidApplyAnimationProperties() Graphic.SetNativeSize() Graphic.Raycast(Vector2, Camera) Graphic.PixelAdjustPoint(Vector2) Graphic.GetPixelAdjustedRect() Graphic.CrossFadeColor(Color, Single, Boolean, Boolean) Graphic.CrossFadeColor(Color, Single, Boolean, Boolean, Boolean) Graphic.CrossFadeAlpha(Single, Single, Boolean) Graphic.RegisterDirtyLayoutCallback(UnityAction) Graphic.UnregisterDirtyLayoutCallback(UnityAction) Graphic.RegisterDirtyVerticesCallback(UnityAction) Graphic.UnregisterDirtyVerticesCallback(UnityAction) Graphic.RegisterDirtyMaterialCallback(UnityAction) Graphic.UnregisterDirtyMaterialCallback(UnityAction) UIBehaviour.Awake() UIBehaviour.Start() UIBehaviour.IsActive() UIBehaviour.OnCanvasGroupChanged() UIBehaviour.IsDestroyed() Namespace : UnityEngine.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public abstract class MaskableGraphic : Graphic, ICanvasElement, IClippable, IMaskable, IMaterialModifier Fields m_IncludeForMasking Declaration [NonSerialized] [Obsolete(\"Not used anymore.\", true)] protected bool m_IncludeForMasking Field Value Type Description Boolean m_MaskMaterial Declaration [NonSerialized] protected Material m_MaskMaterial Field Value Type Description Material m_ShouldRecalculate Declaration [NonSerialized] [Obsolete(\"Not used anymore\", true)] protected bool m_ShouldRecalculate Field Value Type Description Boolean m_ShouldRecalculateStencil Declaration [NonSerialized] protected bool m_ShouldRecalculateStencil Field Value Type Description Boolean m_StencilValue Declaration [NonSerialized] protected int m_StencilValue Field Value Type Description Int32 Properties maskable Does this graphic allow masking. Declaration public bool maskable { get; set; } Property Value Type Description Boolean onCullStateChanged Callback issued when culling changes. Declaration public MaskableGraphic.CullStateChangedEvent onCullStateChanged { get; set; } Property Value Type Description MaskableGraphic.CullStateChangedEvent Remarks Called whene the culling state of this MaskableGraphic either becomes culled or visible. You can use this to control other elements of your UI as culling happens. Methods Cull(Rect, Boolean) See IClippable.Cull Declaration public virtual void Cull(Rect clipRect, bool validRect) Parameters Type Name Description Rect clipRect Boolean validRect Implements IClippable.Cull(Rect, Boolean) GetModifiedMaterial(Material) See IMaterialModifier.GetModifiedMaterial Declaration public virtual Material GetModifiedMaterial(Material baseMaterial) Parameters Type Name Description Material baseMaterial Returns Type Description Material Implements IMaterialModifier.GetModifiedMaterial(Material) OnCanvasHierarchyChanged() Declaration protected override void OnCanvasHierarchyChanged() Overrides Graphic.OnCanvasHierarchyChanged() OnDisable() Declaration protected override void OnDisable() Overrides Graphic.OnDisable() OnEnable() Declaration protected override void OnEnable() Overrides Graphic.OnEnable() OnTransformParentChanged() Declaration protected override void OnTransformParentChanged() Overrides Graphic.OnTransformParentChanged() ParentMaskStateChanged() Declaration [Obsolete(\"Not used anymore.\", true)] public virtual void ParentMaskStateChanged() RecalculateClipping() See IClippable.RecalculateClipping Declaration public virtual void RecalculateClipping() Implements IClippable.RecalculateClipping() RecalculateMasking() See IMaskable.RecalculateMasking Declaration public virtual void RecalculateMasking() Implements IMaskable.RecalculateMasking() SetClipRect(Rect, Boolean) See IClippable.SetClipRect Declaration public virtual void SetClipRect(Rect clipRect, bool validRect) Parameters Type Name Description Rect clipRect Boolean validRect Implements IClippable.SetClipRect(Rect, Boolean) SetClipSoftness(Vector2) Declaration public virtual void SetClipSoftness(Vector2 clipSoftness) Parameters Type Name Description Vector2 clipSoftness Implements IClippable.SetClipSoftness(Vector2) Extension Methods UIBehaviourExtensions.InvokeOnEnable(UIBehaviour) UIBehaviourExtensions.InvokeOnDisable(UIBehaviour) UIBehaviourExtensions.InvokeAwake(UIBehaviour) UIBehaviourExtensions.InvokeRebuild(UIBehaviour, CanvasUpdate) UIBehaviourExtensions.InvokeLateUpdate(UIBehaviour) UIBehaviourExtensions.InvokeUpdate(UIBehaviour) UIBehaviourExtensions.InvokeOnRectTransformDimensionsChange(UIBehaviour) UIBehaviourExtensions.InvokeOnCanvasGroupChanged(UIBehaviour) UIBehaviourExtensions.InvokeOnDidApplyAnimationProperties(UIBehaviour) GraphicExtension.InvokeOnPopulateMesh(Graphic, VertexHelper)"
  },
  "api/UnityEditor.UI.SliderEditor.html": {
    "href": "api/UnityEditor.UI.SliderEditor.html",
    "title": "Class SliderEditor | Unity UI | 1.0.0",
    "keywords": "Class SliderEditor Inheritance Object SelectableEditor SliderEditor Inherited Members SelectableEditor.OnDisable() Namespace : UnityEditor.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class SliderEditor : SelectableEditor Methods OnEnable() Declaration protected override void OnEnable() Overrides SelectableEditor.OnEnable() OnInspectorGUI() Declaration public override void OnInspectorGUI() Overrides SelectableEditor.OnInspectorGUI()"
  },
  "api/Tests.UISystemProfilerAddMarkerWithNullObjectDoesNotCrash.html": {
    "href": "api/Tests.UISystemProfilerAddMarkerWithNullObjectDoesNotCrash.html",
    "title": "Class UISystemProfilerAddMarkerWithNullObjectDoesNotCrash | Unity UI | 1.0.0",
    "keywords": "Class UISystemProfilerAddMarkerWithNullObjectDoesNotCrash Inheritance Object UISystemProfilerAddMarkerWithNullObjectDoesNotCrash Namespace : Tests <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class UISystemProfilerAddMarkerWithNullObjectDoesNotCrash Methods AddMarkerShouldNotCrashWithNullObject() Declaration public void AddMarkerShouldNotCrashWithNullObject()"
  },
  "api/InputfieldTests.GenericInputFieldTests.html": {
    "href": "api/InputfieldTests.GenericInputFieldTests.html",
    "title": "Class GenericInputFieldTests | Unity UI | 1.0.0",
    "keywords": "Class GenericInputFieldTests Inheritance Object BaseInputFieldTests GenericInputFieldTests Inherited Members BaseInputFieldTests.m_PrefabRoot BaseInputFieldTests.CreateInputFieldAsset(String) Namespace : InputfieldTests <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class GenericInputFieldTests : BaseInputFieldTests, IPrebuildSetup Fields kPrefabPath Declaration protected const string kPrefabPath = \"Assets/Resources/GenericInputFieldPrefab.prefab\" Field Value Type Description String Methods CannotFocusIfNotActive() Declaration public IEnumerator CannotFocusIfNotActive() Returns Type Description IEnumerator CannotFocusIfNotTextComponent() Declaration public IEnumerator CannotFocusIfNotTextComponent() Returns Type Description IEnumerator CannotFocusIfNullFont() Declaration public IEnumerator CannotFocusIfNullFont() Returns Type Description IEnumerator CannotFocusWithoutEventSystem() Declaration public IEnumerator CannotFocusWithoutEventSystem() Returns Type Description IEnumerator CaretRectSameSizeAsTextRect() Declaration public IEnumerator CaretRectSameSizeAsTextRect() Returns Type Description IEnumerator ContentTypeSetsValues() Declaration public void ContentTypeSetsValues() FocusesOnSelect() Declaration public void FocusesOnSelect() InputFieldSetTextWithoutNotifyWillNotNotify() Declaration public void InputFieldSetTextWithoutNotifyWillNotNotify() OnetimeTearDown() Declaration public void OnetimeTearDown() SettingCharacterValidationChangesContentTypeToCustom() Declaration public void SettingCharacterValidationChangesContentTypeToCustom() SettingInputChangesContentTypeToCustom() Declaration public void SettingInputChangesContentTypeToCustom() SettingKeyboardTypeChangesContentTypeToCustom() Declaration public void SettingKeyboardTypeChangesContentTypeToCustom() SettingLineTypeChangesContentTypeToCustom() Declaration public void SettingLineTypeChangesContentTypeToCustom() SettingLineTypeDoesNotChangesContentTypeToCustom(InputField.ContentType) Declaration public void SettingLineTypeDoesNotChangesContentTypeToCustom(InputField.ContentType type) Parameters Type Name Description InputField.ContentType type Setup() Declaration public void Setup() TearDown() Declaration public virtual void TearDown() TestSetup() Declaration public virtual void TestSetup()"
  },
  "api/UnityEngine.UI.Tests.RectMask2DClipping.html": {
    "href": "api/UnityEngine.UI.Tests.RectMask2DClipping.html",
    "title": "Class RectMask2DClipping | Unity UI | 1.0.0",
    "keywords": "Class RectMask2DClipping Inheritance Object RectMask2DClipping Namespace : UnityEngine.UI.Tests <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class RectMask2DClipping : IPrebuildSetup Methods Mask2DRect_CorrectClipping() Declaration public IEnumerator Mask2DRect_CorrectClipping() Returns Type Description IEnumerator Mask2DRect_NonZeroPaddingMasksProperly() Declaration public void Mask2DRect_NonZeroPaddingMasksProperly() OneTimeTearDown() Declaration public void OneTimeTearDown() Setup() Declaration public void Setup() TearDown() Declaration public void TearDown() TestSetup() Declaration public void TestSetup()"
  },
  "api/UnityEngine.UI.InputField.SubmitEvent.html": {
    "href": "api/UnityEngine.UI.InputField.SubmitEvent.html",
    "title": "Class InputField.SubmitEvent | Unity UI | 1.0.0",
    "keywords": "Class InputField.SubmitEvent Inheritance Object InputField.SubmitEvent Namespace : UnityEngine.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] public class SubmitEvent : UnityEvent<string>"
  },
  "manual/UIBasicLayout.html": {
    "href": "manual/UIBasicLayout.html",
    "title": "Basic Layout | Unity UI | 1.0.0",
    "keywords": "Basic Layout In this section we'll look at how you can position UI elements relative to the Canvas and each other. If you want to test yourself while reading, you can create an Image using the menu GameObject -> UI -> Image . The Rect Tool Every UI element is represented as a rectangle for layout purposes. This rectangle can be manipulated in the Scene View using the Rect Tool in the toolbar. The Rect Tool is used both for Unity's 2D features and for UI, and in fact can be used even for 3D objects as well. The Rect Tool can be used to move, resize and rotate UI elements. Once you have selected a UI element, you can move it by clicking anywhere inside the rectangle and dragging. You can resize it by clicking on the edges or corners and dragging. The element can be rotated by hovering the cursor slightly away from the corners until the mouse cursor looks like a rotation symbol. You can then click and drag in either direction to rotate. Just like the other tools, the Rect Tool uses the current pivot mode and space, set in the toolbar. When working with UI it's usually a good idea to keep those set to Pivot and Local . Rect Transform The Rect Transform is a new transform component that is used for all UI elements instead of the regular Transform component. Rect Transforms have position, rotation, and scale just like regular Transforms, but it also has a width and height, used to specify the dimensions of the rectangle. Resizing Versus Scaling When the Rect Tool is used to change the size of an object, normally for Sprites in the 2D system and for 3D objects it will change the local scale of the object. However, when it's used on an object with a Rect Transform on it, it will instead change the width and the height, keeping the local scale unchanged. This resizing will not affect font sizes, border on sliced images, and so on. Pivot Rotations, size, and scale modifications occur around the pivot so the position of the pivot affects the outcome of a rotation, resizing, or scaling. When the toolbar Pivot button is set to Pivot mode, the pivot of a Rect Transform can be moved in the Scene View. Anchors Rect Transforms include a layout concept called anchors . Anchors are shown as four small triangular handles in the Scene View and anchor information is also shown in the Inspector. If the parent of a Rect Transform is also a Rect Transform, the child Rect Transform can be anchored to the parent Rect Transform in various ways. For example, the child can be anchored to the center of the parent, or to one of the corners. The anchoring also allows the child to stretch together with the width or height of the parent. Each corner of the rectangle has a fixed offset to its corresponding anchor, i.e. the top left corner of the rectangle has a fixed offset to the top left anchor, etc. This way the different corners of the rectangle can be anchored to different points in the parent rectangle. The positions of the anchors are defined in fractions (or percentages) of the parent rectangle width and height. 0.0 (0%) corresponds to the left or bottom side, 0.5 (50%) to the middle, and 1.0 (100%) to the right or top side. But anchors are not limited to the sides and middle; they can be anchored to any point within the parent rectangle. You can drag each of the anchors individually, or if they are together, you can drag them together by clicking in the middle in between them and dragging. If you hold down Shift key while dragging an anchor, the corresponding corner of the rectangle will move together with the anchor. A useful feature of the anchor handles is that they automatically snap to the anchors of sibling rectangles to allow for precise positioning. Anchor presets In the Inspector, the Anchor Preset button can be found in the upper left corner of the Rect Transform component. Clicking the button brings up the Anchor Presets dropdown. From here you can quickly select from some of the most common anchoring options. You can anchor the UI element to the sides or middle of the parent, or stretch together with the parent size. The horizontal and vertical anchoring is independent. The Anchor Presets buttons displays the currently selected preset option if there is one. If the anchors on either the horizontal or vertical axis are set to different positions than any of the presets, the custom options is shown. Anchor and position fields in the Inspector You can click the Anchors expansion arrow to reveal the anchor number fields if they are not already visible. Anchor Min corresponds to the lower left anchor handle in the Scene View, and Anchor Max corresponds to the upper right handle. The position fields of rectangle are shown differently depending on whether the anchors are together (which produces a fixed width and height) or separated (which causes the rectangle to stretch together with the parent rectangle). When all the anchor handles are together the fields displayed are Pos X, Pos Y, Width and Height. The Pos X and Pos Y values indicate the position of the pivot relative to the anchors. When the anchors are separated the fields can change partially or completely to Left, Right, Top and Bottom. These fields define the padding inside the rectangle defined by the anchors. The Left and Right fields are used if the anchors are separated horizontally and the Top and Bottom fields are used if they are separated vertically. Note that changing the values in the anchor or pivot fields will normally counter-adjust the positioning values in order to make the rectangle stay in place. In cases where this is not desired, enable Raw edit mode by clicking the R button in the Inspector. This causes the anchor and pivot value to be able to be changed without any other values changing as a result. This will likely cause the rectangle to be visually moved or resized, since its position and size is dependent on the anchor and pivot values."
  },
  "manual/UIAutoLayout.html": {
    "href": "manual/UIAutoLayout.html",
    "title": "Auto Layout | Unity UI | 1.0.0",
    "keywords": "Auto Layout The Rect Transform layout system is flexible enough to handle a lot of different types of layouts and it also allows placing elements in a complete freeform fashion. However, sometimes something a bit more structured can be needed. The auto layout system provides ways to place elements in nested layout groups such as horizontal groups, vertical groups, or grids. It also allows elements to automatically be sized according to the contained content. For example a button can be dynamically resized to exactly fit its text content plus some padding. The auto layout system is a system built on top of the basic Rect Transform layout system. It can optionally be used on some or all elements. Understanding Layout Elements The auto layout system is based on a concept of layout elements and layout controllers . A layout element is an Game Object with a Rect Transform and optionally other components as well. The layout element has certain knowledge about which size it should have. Layout elements don't directly set their own size, but other components that function as layout controllers can use the information they provide in order to calculate a size to use for them. A layout element has properties that defines its own: Minimum width Minimum height Preferred width Preferred height Flexible width Flexible height Examples of layout controller components that use the information provided by layout elements are Content Size Fitter and the various Layout Group components. The basic principles for how layout elements in a layout group are sized is as follows: First minimum sizes are allocated. If there is sufficient available space, preferred sizes are allocated. If there is additional available space, flexible size is allocated. Any Game Object with a Rect Transform on it can function as a layout element. They will by default have minimum, preferred, and flexible sizes of 0. Certain components will change these layout properties when added to the Game Object. The Image and Text components are two examples of components that provide layout element properties. They change the preferred width and height to match the sprite or text content. Layout Element Component If you want to override the minimum, preferred, or flexible size, you can do that by adding a Layout Element component to the Game Object. The Layout Element component lets you override the values for one or more of the layout properties. Enable the checkbox for a property you want to override and then specify the value you want to override with. See the reference page for Layout Element for more information. Understanding Layout Controllers Layout controllers are components that control the sizes and possibly positions of one or more layout elements, meaning Game Objects with Rect Transforms on. A layout controller may control its own layout element (the same Game Object it is on itself) or it may control child layout elements . A component that functions as a layout controller may also itself function as a layout element at the same time. Content Size Fitter The Content Size Fitter functions as a layout controller that controls the size of its own layout element. The simplest way to see the auto layout system in action is to add a Content Size Fitter component to a Game Object with a Text component. If you set either the Horizontal Fit or Vertical Fit to Preferred, the Rect Transform will adjust its width and/or height to fit the Text content. See the reference page for Content Size Fitter for more information. Aspect Ratio Fitter The Aspect Ratio Fitter functions as a layout controller that controls the size of its own layout element. It can adjust the height to fit the width or vice versa, or it can make the element fit inside its parent or envelope its parent. The Aspect Ratio Fitter does not take layout information into account such as minimum size and preferred size. See the reference page for Aspect Ratio Fitter for more information. Layout Groups A layout group functions as a layout controller that controls the sizes and positions of its child layout elements. For example, a Horizontal Layout Group places its children next to each other, and a Grid Layout Group places its children in a grid. A layout group doesn't control its own size. Instead it functions as a layout element itself which may be controlled by other layout controllers or be set manually. Whatever size a layout group is allocated, it will in most cases try to allocate an appropriate amount of space for each of its child layout elements based on the minimum, preferred, and flexible sizes they reported. Layout groups can also be nested arbitrarily this way. See the reference pages for Horizontal Layout Group , Vertical Layout Group and Grid Layout Group for more information. Driven Rect Transform properties Since a layout controller in the auto layout system can automatically control the sizes and placement of certain UI elements, those sizes and positions should not be manually edited at the same time through the Inspector or Scene View. Such changed values would just get reset by the layout controller on the next layout calculation anyway. The Rect Transform has a concept of driven properties to address this. For example, a Content Size Fitter which has the Horizontal Fit property set to Minimum or Preferred will drive the width of the Rect Transform on the same Game Object. The width will appear as read-only and a small info box at the top of the Rect Transform will inform that one or more properties are driven by Conten Size Fitter. The driven Rect Transforms properties have other reasons beside preventing manual editing. A layout can be changed just by changing the resolution or size of the Game View. This in turn can change the size or placement of layout elements, which changes the values of driven properties. But it wouldn't be desirable that the Scene is marked as having unsaved changes just because the Game View was resized. To prevent this, the values of driven properties are not saved as part of the Scene and changes to them do not mark the scene as changed. Technical Details The auto layout system comes with certain components built-in, but it is also possible to create new components that controls layouts in custom ways. This is done by having a component implement specific interfaces which are recognized by the auto layout system. Layout Interfaces A component is treated as a layout element by the auto layout system if it implements the interface ILayoutElement . A component is expected to drive the Rect Transforms of its children if it implements the interface ILayoutGroup . A component is expected to drive its own RectTransform if it implements the interface ILayoutSelfController . Layout Calculations The auto layout system evaluates and executes layouts in the following order: The minimum, preferred, and flexible widths of layout elements are calculated by calling CalculateLayoutInputHorizontal on ILayoutElement components. This is performed in bottom-up order, where children are calculated before their parents, such that the parents may take the information in their children into account in their own calculations. The effective widths of layout elements are calculated and set by calling SetLayoutHorizontal on ILayoutController components. This is performed in top-down order, where children are calculated after their parents, since allocation of child widths needs to be based on the full width available in the parent. After this step the Rect Transforms of the layout elements have their new widths. The minimum, preferred, and flexible heights of layout elements are calculated by calling CalculateLayoutInputVertical on ILayoutElement components. This is performed in bottom-up order, where children are calculated before their parents, such that the parents may take the information in their children into account in their own calculations. The effective heights of layout elements are calculated and set by calling SetLayoutVertical on ILayoutController components. This is performed in top-down order, where children are calculated after their parents, since allocation of child heights needs to be based on the full height available in the parent. After this step the Rect Transforms of the layout elements have their new heights. As can be seen from the above, the auto layout system evaluates widths first and then evaluates heights afterwards. Thus, calculated heights may depend on widths, but calculated widths can never depend on heights. Triggering Layout Rebuild When a property on a component changes which can cause the current layout to no longer be valid, a layout recalculation is needed. This can be triggered using the call: LayoutRebuilder.MarkLayoutForRebuild (transform as RectTransform); The rebuild will not happen immediately, but at the end of the current frame, just before rendering happens. The reason it is not immediate is that this would cause layouts to be potentially rebuild many times during the same frame, which would be bad for performance. Guidelines for when a rebuild should be triggered: In setters for properties that can change the layout. In these callbacks: OnEnable OnDisable OnRectTransformDimensionsChange OnValidate (only needed in the editor, not at runtime) OnDidApplyAnimationProperties"
  },
  "api/UnityEngine.UI.Tests.SelectableExtensions.html": {
    "href": "api/UnityEngine.UI.Tests.SelectableExtensions.html",
    "title": "Class SelectableExtensions | Unity UI | 1.0.0",
    "keywords": "Class SelectableExtensions Inheritance Object SelectableExtensions Namespace : UnityEngine.UI.Tests <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class SelectableExtensions Methods InvokeOnPointerDown(Selectable, PointerEventData) Declaration public static void InvokeOnPointerDown(this Selectable selectable, PointerEventData data) Parameters Type Name Description Selectable selectable PointerEventData data InvokeOnPointerEnter(Selectable, PointerEventData) Declaration public static void InvokeOnPointerEnter(this Selectable selectable, PointerEventData data) Parameters Type Name Description Selectable selectable PointerEventData data InvokeOnPointerExit(Selectable, PointerEventData) Declaration public static void InvokeOnPointerExit(this Selectable selectable, PointerEventData data) Parameters Type Name Description Selectable selectable PointerEventData data InvokeOnPointerUp(Selectable, PointerEventData) Declaration public static void InvokeOnPointerUp(this Selectable selectable, PointerEventData data) Parameters Type Name Description Selectable selectable PointerEventData data InvokeTriggerAnimation(Selectable, String) Declaration public static void InvokeTriggerAnimation(this Selectable selectable, string triggerName) Parameters Type Name Description Selectable selectable String triggerName"
  },
  "api/UnityEngine.UI.Image.FillMethod.html": {
    "href": "api/UnityEngine.UI.Image.FillMethod.html",
    "title": "Enum Image.FillMethod | Unity UI | 1.0.0",
    "keywords": "Enum Image.FillMethod The possible fill method types for a Filled Image. Namespace : UnityEngine.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public enum FillMethod Fields Name Description Horizontal The Image will be filled Horizontally. Radial180 The Image will be filled Radially with the radial center in one of the edges. Radial360 The Image will be filled Radially with the radial center at the center. Radial90 The Image will be filled Radially with the radial center in one of the corners. Vertical The Image will be filled Vertically."
  },
  "api/UnityEngine.UI.RectMask2D.html": {
    "href": "api/UnityEngine.UI.RectMask2D.html",
    "title": "Class RectMask2D | Unity UI | 1.0.0",
    "keywords": "Class RectMask2D Inheritance Object UIBehaviour RectMask2D Inherited Members UIBehaviour.Awake() UIBehaviour.Start() UIBehaviour.OnDestroy() UIBehaviour.IsActive() UIBehaviour.OnRectTransformDimensionsChange() UIBehaviour.OnBeforeTransformParentChanged() UIBehaviour.OnDidApplyAnimationProperties() UIBehaviour.OnCanvasGroupChanged() UIBehaviour.IsDestroyed() Namespace : UnityEngine.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class RectMask2D : UIBehaviour, IClipper, ICanvasRaycastFilter Constructors RectMask2D() Declaration protected RectMask2D() Properties canvasRect Get the Rect for the mask in canvas space. Declaration public Rect canvasRect { get; } Property Value Type Description Rect padding Padding to be applied to the masking X = Left Y = Bottom Z = Right W = Top Declaration public Vector4 padding { get; set; } Property Value Type Description Vector4 rectTransform Helper function to get the RectTransform for the mask. Declaration public RectTransform rectTransform { get; } Property Value Type Description RectTransform softness The softness to apply to the horizontal and vertical axis. Declaration public Vector2Int softness { get; set; } Property Value Type Description Vector2Int Methods AddClippable(IClippable) Add a IClippable to be tracked by the mask. Declaration public void AddClippable(IClippable clippable) Parameters Type Name Description IClippable clippable Add the clippable object for this mask IsRaycastLocationValid(Vector2, Camera) Declaration public virtual bool IsRaycastLocationValid(Vector2 sp, Camera eventCamera) Parameters Type Name Description Vector2 sp Camera eventCamera Returns Type Description Boolean OnCanvasHierarchyChanged() Declaration protected override void OnCanvasHierarchyChanged() Overrides UIBehaviour.OnCanvasHierarchyChanged() OnDisable() Declaration protected override void OnDisable() Overrides UIBehaviour.OnDisable() OnEnable() Declaration protected override void OnEnable() Overrides UIBehaviour.OnEnable() OnTransformParentChanged() Declaration protected override void OnTransformParentChanged() Overrides UIBehaviour.OnTransformParentChanged() PerformClipping() Declaration public virtual void PerformClipping() Implements IClipper.PerformClipping() RemoveClippable(IClippable) Remove an IClippable from being tracked by the mask. Declaration public void RemoveClippable(IClippable clippable) Parameters Type Name Description IClippable clippable Remove the clippable object from this mask UpdateClipSoftness() Declaration public virtual void UpdateClipSoftness() Extension Methods UIBehaviourExtensions.InvokeOnEnable(UIBehaviour) UIBehaviourExtensions.InvokeOnDisable(UIBehaviour) UIBehaviourExtensions.InvokeAwake(UIBehaviour) UIBehaviourExtensions.InvokeRebuild(UIBehaviour, CanvasUpdate) UIBehaviourExtensions.InvokeLateUpdate(UIBehaviour) UIBehaviourExtensions.InvokeUpdate(UIBehaviour) UIBehaviourExtensions.InvokeOnRectTransformDimensionsChange(UIBehaviour) UIBehaviourExtensions.InvokeOnCanvasGroupChanged(UIBehaviour) UIBehaviourExtensions.InvokeOnDidApplyAnimationProperties(UIBehaviour)"
  },
  "api/UnityEngine.UI.Button.html": {
    "href": "api/UnityEngine.UI.Button.html",
    "title": "Class Button | Unity UI | 1.0.0",
    "keywords": "Class Button A standard button that sends an event when clicked. Inheritance Object UIBehaviour Selectable Button Inherited Members Selectable.s_Selectables Selectable.s_SelectableCount Selectable.allSelectablesArray Selectable.allSelectableCount Selectable.allSelectables Selectable.AllSelectablesNoAlloc(Selectable[]) Selectable.m_CurrentIndex Selectable.navigation Selectable.transition Selectable.colors Selectable.spriteState Selectable.animationTriggers Selectable.targetGraphic Selectable.interactable Selectable.image Selectable.Awake() Selectable.OnCanvasGroupChanged() Selectable.IsInteractable() Selectable.OnDidApplyAnimationProperties() Selectable.OnEnable() Selectable.OnTransformParentChanged() Selectable.OnDisable() Selectable.currentSelectionState Selectable.InstantClearState() Selectable.DoStateTransition(Selectable.SelectionState, Boolean) Selectable.FindSelectable(Vector3) Selectable.FindSelectableOnLeft() Selectable.FindSelectableOnRight() Selectable.FindSelectableOnUp() Selectable.FindSelectableOnDown() Selectable.OnMove(AxisEventData) Selectable.IsHighlighted() Selectable.IsPressed() Selectable.OnPointerDown(PointerEventData) Selectable.OnPointerUp(PointerEventData) Selectable.OnPointerEnter(PointerEventData) Selectable.OnPointerExit(PointerEventData) Selectable.OnSelect(BaseEventData) Selectable.OnDeselect(BaseEventData) Selectable.Select() UIBehaviour.Start() UIBehaviour.OnDestroy() UIBehaviour.IsActive() UIBehaviour.OnRectTransformDimensionsChange() UIBehaviour.OnBeforeTransformParentChanged() UIBehaviour.OnCanvasHierarchyChanged() UIBehaviour.IsDestroyed() Namespace : UnityEngine.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class Button : Selectable, IMoveHandler, IPointerDownHandler, IPointerUpHandler, IPointerEnterHandler, IPointerExitHandler, ISelectHandler, IDeselectHandler, IPointerClickHandler, ISubmitHandler, IEventSystemHandler Constructors Button() Declaration protected Button() Properties onClick Declaration public Button.ButtonClickedEvent onClick { get; set; } Property Value Type Description Button.ButtonClickedEvent Methods OnPointerClick(PointerEventData) Call all registered IPointerClickHandlers. Register button presses using the IPointerClickHandler. You can also use it to tell what type of click happened (left, right etc.). Make sure your Scene has an EventSystem. Declaration public virtual void OnPointerClick(PointerEventData eventData) Parameters Type Name Description PointerEventData eventData Pointer Data associated with the event. Typically by the event system. Implements IPointerClickHandler.OnPointerClick(PointerEventData) Examples //Attatch this script to a Button GameObject using UnityEngine; using UnityEngine.EventSystems; public class Example : MonoBehaviour, IPointerClickHandler { //Detect if a click occurs public void OnPointerClick(PointerEventData pointerEventData) { //Use this to tell when the user right-clicks on the Button if (pointerEventData.button == PointerEventData.InputButton.Right) { //Output to console the clicked GameObject's name and the following message. You can replace this with your own actions for when clicking the GameObject. Debug.Log(name + \" Game Object Right Clicked!\"); } //Use this to tell when the user left-clicks on the Button if (pointerEventData.button == PointerEventData.InputButton.Left) { Debug.Log(name + \" Game Object Left Clicked!\"); } } } OnSubmit(BaseEventData) Call all registered ISubmitHandler. Declaration public virtual void OnSubmit(BaseEventData eventData) Parameters Type Name Description BaseEventData eventData Associated data with the event. Typically by the event system. Implements ISubmitHandler.OnSubmit(BaseEventData) Remarks This detects when a Button has been selected via a \"submit\" key you specify (default is the return key). To change the submit key, either: Go to Edit->Project Settings->Input. Next, expand the Axes section and go to the Submit section if it exists. If Submit doesn’t exist, add 1 number to the Size field. This creates a new section at the bottom. Expand the new section and change the Name field to “Submit”. Change the Positive Button field to the key you want (e.g. space). Or: Go to your EventSystem in your Project Go to the Inspector window and change the Submit Button field to one of the sections in the Input Manager (e.g. \"Submit\"), or create your own by naming it what you like, then following the next few steps. Go to Edit->Project Settings->Input to get to the Input Manager. Expand the Axes section in the Inspector window. Add 1 to the number in the Size field. This creates a new section at the bottom. Expand the new section and name it the same as the name you inserted in the Submit Button field in the EventSystem. Set the Positive Button field to the key you want (e.g. space) Extension Methods UIBehaviourExtensions.InvokeOnEnable(UIBehaviour) UIBehaviourExtensions.InvokeOnDisable(UIBehaviour) UIBehaviourExtensions.InvokeAwake(UIBehaviour) UIBehaviourExtensions.InvokeRebuild(UIBehaviour, CanvasUpdate) UIBehaviourExtensions.InvokeLateUpdate(UIBehaviour) UIBehaviourExtensions.InvokeUpdate(UIBehaviour) UIBehaviourExtensions.InvokeOnRectTransformDimensionsChange(UIBehaviour) UIBehaviourExtensions.InvokeOnCanvasGroupChanged(UIBehaviour) UIBehaviourExtensions.InvokeOnDidApplyAnimationProperties(UIBehaviour) SelectableExtensions.InvokeOnPointerDown(Selectable, PointerEventData) SelectableExtensions.InvokeOnPointerUp(Selectable, PointerEventData) SelectableExtensions.InvokeOnPointerEnter(Selectable, PointerEventData) SelectableExtensions.InvokeOnPointerExit(Selectable, PointerEventData) SelectableExtensions.InvokeTriggerAnimation(Selectable, String)"
  },
  "api/UnityEngine.UI.GridLayoutGroup.Corner.html": {
    "href": "api/UnityEngine.UI.GridLayoutGroup.Corner.html",
    "title": "Enum GridLayoutGroup.Corner | Unity UI | 1.0.0",
    "keywords": "Enum GridLayoutGroup.Corner Which corner is the starting corner for the grid. Namespace : UnityEngine.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public enum Corner Fields Name Description LowerLeft Lower Left corner. LowerRight Lower Right corner. UpperLeft Upper Left corner. UpperRight Upper Right corner."
  },
  "api/UnityEngine.UI.GridLayoutGroup.Constraint.html": {
    "href": "api/UnityEngine.UI.GridLayoutGroup.Constraint.html",
    "title": "Enum GridLayoutGroup.Constraint | Unity UI | 1.0.0",
    "keywords": "Enum GridLayoutGroup.Constraint Constraint type on either the number of columns or rows. Namespace : UnityEngine.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public enum Constraint Fields Name Description FixedColumnCount Constrain the number of columns to a specified number. FixedRowCount Constraint the number of rows to a specified number. Flexible Don't constrain the number of rows or columns."
  },
  "api/InputfieldTests.FakeInputModule.html": {
    "href": "api/InputfieldTests.FakeInputModule.html",
    "title": "Class FakeInputModule | Unity UI | 1.0.0",
    "keywords": "Class FakeInputModule Inheritance Object UIBehaviour BaseInputModule FakeInputModule Inherited Members BaseInputModule.m_RaycastResultCache BaseInputModule.m_InputOverride BaseInputModule.input BaseInputModule.inputOverride BaseInputModule.eventSystem BaseInputModule.OnEnable() BaseInputModule.OnDisable() BaseInputModule.FindFirstRaycast(List<RaycastResult>) BaseInputModule.DetermineMoveDirection(Single, Single) BaseInputModule.DetermineMoveDirection(Single, Single, Single) BaseInputModule.FindCommonRoot(GameObject, GameObject) BaseInputModule.HandlePointerExitAndEnter(PointerEventData, GameObject) BaseInputModule.GetAxisEventData(Single, Single, Single) BaseInputModule.GetBaseEventData() BaseInputModule.IsPointerOverGameObject(Int32) BaseInputModule.ShouldActivateModule() BaseInputModule.DeactivateModule() BaseInputModule.ActivateModule() BaseInputModule.UpdateModule() BaseInputModule.IsModuleSupported() UIBehaviour.Awake() UIBehaviour.Start() UIBehaviour.OnDestroy() UIBehaviour.IsActive() UIBehaviour.OnRectTransformDimensionsChange() UIBehaviour.OnBeforeTransformParentChanged() UIBehaviour.OnTransformParentChanged() UIBehaviour.OnDidApplyAnimationProperties() UIBehaviour.OnCanvasGroupChanged() UIBehaviour.OnCanvasHierarchyChanged() UIBehaviour.IsDestroyed() Namespace : InputfieldTests <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class FakeInputModule : BaseInputModule Methods Process() Declaration public override void Process() Overrides BaseInputModule.Process() Extension Methods UIBehaviourExtensions.InvokeOnEnable(UIBehaviour) UIBehaviourExtensions.InvokeOnDisable(UIBehaviour) UIBehaviourExtensions.InvokeAwake(UIBehaviour) UIBehaviourExtensions.InvokeRebuild(UIBehaviour, CanvasUpdate) UIBehaviourExtensions.InvokeLateUpdate(UIBehaviour) UIBehaviourExtensions.InvokeUpdate(UIBehaviour) UIBehaviourExtensions.InvokeOnRectTransformDimensionsChange(UIBehaviour) UIBehaviourExtensions.InvokeOnCanvasGroupChanged(UIBehaviour) UIBehaviourExtensions.InvokeOnDidApplyAnimationProperties(UIBehaviour)"
  },
  "api/UnityEngine.UI.IMaterialModifier.html": {
    "href": "api/UnityEngine.UI.IMaterialModifier.html",
    "title": "Interface IMaterialModifier | Unity UI | 1.0.0",
    "keywords": "Interface IMaterialModifier Use this interface to modify a Material that renders a Graphic. The Material is modified before the it is passed to the CanvasRenderer. Namespace : UnityEngine.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public interface IMaterialModifier Remarks When a Graphic sets a material that is passed (in order) to any components on the GameObject that implement IMaterialModifier. This component can modify the material to be used for rendering. Methods GetModifiedMaterial(Material) Perform material modification in this function. Declaration Material GetModifiedMaterial(Material baseMaterial) Parameters Type Name Description Material baseMaterial The material that is to be modified Returns Type Description Material The modified material."
  },
  "api/UnityEngine.UI.IMaskable.html": {
    "href": "api/UnityEngine.UI.IMaskable.html",
    "title": "Interface IMaskable | Unity UI | 1.0.0",
    "keywords": "Interface IMaskable This element is capable of being masked out. Namespace : UnityEngine.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public interface IMaskable Methods RecalculateMasking() Recalculate masking for this element and all children elements. Declaration void RecalculateMasking() Remarks Use this to update the internal state (recreate materials etc)."
  },
  "api/UnityEngine.UI.GridLayoutGroup.html": {
    "href": "api/UnityEngine.UI.GridLayoutGroup.html",
    "title": "Class GridLayoutGroup | Unity UI | 1.0.0",
    "keywords": "Class GridLayoutGroup Inheritance Object UIBehaviour LayoutGroup GridLayoutGroup Inherited Members LayoutGroup.m_Padding LayoutGroup.padding LayoutGroup.m_ChildAlignment LayoutGroup.childAlignment LayoutGroup.rectTransform LayoutGroup.m_Tracker LayoutGroup.rectChildren LayoutGroup.minWidth LayoutGroup.preferredWidth LayoutGroup.flexibleWidth LayoutGroup.minHeight LayoutGroup.preferredHeight LayoutGroup.flexibleHeight LayoutGroup.layoutPriority LayoutGroup.OnEnable() LayoutGroup.OnDisable() LayoutGroup.OnDidApplyAnimationProperties() LayoutGroup.GetTotalMinSize(Int32) LayoutGroup.GetTotalPreferredSize(Int32) LayoutGroup.GetTotalFlexibleSize(Int32) LayoutGroup.GetStartOffset(Int32, Single) LayoutGroup.GetAlignmentOnAxis(Int32) LayoutGroup.SetLayoutInputForAxis(Single, Single, Single, Int32) LayoutGroup.SetChildAlongAxis(RectTransform, Int32, Single) LayoutGroup.SetChildAlongAxisWithScale(RectTransform, Int32, Single, Single) LayoutGroup.SetChildAlongAxis(RectTransform, Int32, Single, Single) LayoutGroup.SetChildAlongAxisWithScale(RectTransform, Int32, Single, Single, Single) LayoutGroup.OnRectTransformDimensionsChange() LayoutGroup.OnTransformChildrenChanged() LayoutGroup.SetProperty<T>(T, T) LayoutGroup.SetDirty() UIBehaviour.Awake() UIBehaviour.Start() UIBehaviour.OnDestroy() UIBehaviour.IsActive() UIBehaviour.OnBeforeTransformParentChanged() UIBehaviour.OnTransformParentChanged() UIBehaviour.OnCanvasGroupChanged() UIBehaviour.OnCanvasHierarchyChanged() UIBehaviour.IsDestroyed() Namespace : UnityEngine.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class GridLayoutGroup : LayoutGroup, ILayoutElement, ILayoutGroup, ILayoutController Constructors GridLayoutGroup() Declaration protected GridLayoutGroup() Fields m_CellSize Declaration protected Vector2 m_CellSize Field Value Type Description Vector2 m_Constraint Declaration protected GridLayoutGroup.Constraint m_Constraint Field Value Type Description GridLayoutGroup.Constraint m_ConstraintCount Declaration protected int m_ConstraintCount Field Value Type Description Int32 m_Spacing Declaration protected Vector2 m_Spacing Field Value Type Description Vector2 m_StartAxis Declaration protected GridLayoutGroup.Axis m_StartAxis Field Value Type Description GridLayoutGroup.Axis m_StartCorner Declaration protected GridLayoutGroup.Corner m_StartCorner Field Value Type Description GridLayoutGroup.Corner Properties cellSize The size to use for each cell in the grid. Declaration public Vector2 cellSize { get; set; } Property Value Type Description Vector2 constraint Which constraint to use for the GridLayoutGroup. Declaration public GridLayoutGroup.Constraint constraint { get; set; } Property Value Type Description GridLayoutGroup.Constraint Remarks Specifying a constraint can make the GridLayoutGroup work better in conjunction with a [[ContentSizeFitter]] component. When GridLayoutGroup is used on a RectTransform with a manually specified size, there's no need to specify a constraint. constraintCount How many cells there should be along the constrained axis. Declaration public int constraintCount { get; set; } Property Value Type Description Int32 spacing The spacing to use between layout elements in the grid on both axises. Declaration public Vector2 spacing { get; set; } Property Value Type Description Vector2 startAxis Which axis should cells be placed along first Declaration public GridLayoutGroup.Axis startAxis { get; set; } Property Value Type Description GridLayoutGroup.Axis Remarks When startAxis is set to horizontal, an entire row will be filled out before proceeding to the next row. When set to vertical, an entire column will be filled out before proceeding to the next column. startCorner Which corner should the first cell be placed in? Declaration public GridLayoutGroup.Corner startCorner { get; set; } Property Value Type Description GridLayoutGroup.Corner Methods CalculateLayoutInputHorizontal() Called by the layout system to calculate the horizontal layout size. Also see ILayoutElement Declaration public override void CalculateLayoutInputHorizontal() Overrides LayoutGroup.CalculateLayoutInputHorizontal() CalculateLayoutInputVertical() Called by the layout system to calculate the vertical layout size. Also see ILayoutElement Declaration public override void CalculateLayoutInputVertical() Overrides LayoutGroup.CalculateLayoutInputVertical() SetLayoutHorizontal() Called by the layout system Also see ILayoutElement Declaration public override void SetLayoutHorizontal() Overrides LayoutGroup.SetLayoutHorizontal() SetLayoutVertical() Called by the layout system Also see ILayoutElement Declaration public override void SetLayoutVertical() Overrides LayoutGroup.SetLayoutVertical() Extension Methods UIBehaviourExtensions.InvokeOnEnable(UIBehaviour) UIBehaviourExtensions.InvokeOnDisable(UIBehaviour) UIBehaviourExtensions.InvokeAwake(UIBehaviour) UIBehaviourExtensions.InvokeRebuild(UIBehaviour, CanvasUpdate) UIBehaviourExtensions.InvokeLateUpdate(UIBehaviour) UIBehaviourExtensions.InvokeUpdate(UIBehaviour) UIBehaviourExtensions.InvokeOnRectTransformDimensionsChange(UIBehaviour) UIBehaviourExtensions.InvokeOnCanvasGroupChanged(UIBehaviour) UIBehaviourExtensions.InvokeOnDidApplyAnimationProperties(UIBehaviour)"
  },
  "api/UnityEngine.UI.Dropdown.html": {
    "href": "api/UnityEngine.UI.Dropdown.html",
    "title": "Class Dropdown | Unity UI | 1.0.0",
    "keywords": "Class Dropdown Inheritance Object UIBehaviour Selectable Dropdown Inherited Members Selectable.s_Selectables Selectable.s_SelectableCount Selectable.allSelectablesArray Selectable.allSelectableCount Selectable.allSelectables Selectable.AllSelectablesNoAlloc(Selectable[]) Selectable.m_CurrentIndex Selectable.navigation Selectable.transition Selectable.colors Selectable.spriteState Selectable.animationTriggers Selectable.targetGraphic Selectable.interactable Selectable.image Selectable.OnCanvasGroupChanged() Selectable.IsInteractable() Selectable.OnDidApplyAnimationProperties() Selectable.OnEnable() Selectable.OnTransformParentChanged() Selectable.currentSelectionState Selectable.InstantClearState() Selectable.DoStateTransition(Selectable.SelectionState, Boolean) Selectable.FindSelectable(Vector3) Selectable.FindSelectableOnLeft() Selectable.FindSelectableOnRight() Selectable.FindSelectableOnUp() Selectable.FindSelectableOnDown() Selectable.OnMove(AxisEventData) Selectable.IsHighlighted() Selectable.IsPressed() Selectable.OnPointerDown(PointerEventData) Selectable.OnPointerUp(PointerEventData) Selectable.OnPointerEnter(PointerEventData) Selectable.OnPointerExit(PointerEventData) Selectable.OnSelect(BaseEventData) Selectable.OnDeselect(BaseEventData) Selectable.Select() UIBehaviour.OnDestroy() UIBehaviour.IsActive() UIBehaviour.OnRectTransformDimensionsChange() UIBehaviour.OnBeforeTransformParentChanged() UIBehaviour.OnCanvasHierarchyChanged() UIBehaviour.IsDestroyed() Namespace : UnityEngine.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class Dropdown : Selectable, IMoveHandler, IPointerDownHandler, IPointerUpHandler, IPointerEnterHandler, IPointerExitHandler, ISelectHandler, IDeselectHandler, IPointerClickHandler, ISubmitHandler, ICancelHandler, IEventSystemHandler Constructors Dropdown() Declaration protected Dropdown() Properties alphaFadeSpeed The time interval at which a drop down will appear and disappear Declaration public float alphaFadeSpeed { get; set; } Property Value Type Description Single captionImage The Image component to hold the image of the currently selected option. Declaration public Image captionImage { get; set; } Property Value Type Description Image captionText The Text component to hold the text of the currently selected option. Declaration public Text captionText { get; set; } Property Value Type Description Text itemImage The Image component to hold the image of the item Declaration public Image itemImage { get; set; } Property Value Type Description Image itemText The Text component to hold the text of the item. Declaration public Text itemText { get; set; } Property Value Type Description Text onValueChanged Declaration public Dropdown.DropdownEvent onValueChanged { get; set; } Property Value Type Description Dropdown.DropdownEvent options Declaration public List<Dropdown.OptionData> options { get; set; } Property Value Type Description List < Dropdown.OptionData > template The Rect Transform of the template for the dropdown list. Declaration public RectTransform template { get; set; } Property Value Type Description RectTransform value Declaration public int value { get; set; } Property Value Type Description Int32 Methods AddOptions(List<Sprite>) Declaration public void AddOptions(List<Sprite> options) Parameters Type Name Description List < Sprite > options AddOptions(List<String>) Declaration public void AddOptions(List<string> options) Parameters Type Name Description List < String > options AddOptions(List<Dropdown.OptionData>) Declaration public void AddOptions(List<Dropdown.OptionData> options) Parameters Type Name Description List < Dropdown.OptionData > options Awake() Declaration protected override void Awake() Overrides Selectable.Awake() ClearOptions() Clear the list of options in the Dropdown. Declaration public void ClearOptions() CreateBlocker(Canvas) Create a blocker that blocks clicks to other controls while the dropdown list is open. Declaration protected virtual GameObject CreateBlocker(Canvas rootCanvas) Parameters Type Name Description Canvas rootCanvas The root canvas the dropdown is under. Returns Type Description GameObject The created blocker object Remarks Override this method to implement a different way to obtain a blocker GameObject. CreateDropdownList(GameObject) Create the dropdown list to be shown when the dropdown is clicked. The dropdown list should correspond to the provided template GameObject, equivalent to instantiating a copy of it. Declaration protected virtual GameObject CreateDropdownList(GameObject template) Parameters Type Name Description GameObject template The template to create the dropdown list from. Returns Type Description GameObject The created drop down list gameobject. Remarks Override this method to implement a different way to obtain a dropdown list GameObject. CreateItem(Dropdown.DropdownItem) Create a dropdown item based upon the item template. Declaration protected virtual Dropdown.DropdownItem CreateItem(Dropdown.DropdownItem itemTemplate) Parameters Type Name Description Dropdown.DropdownItem itemTemplate e template to create the option item from. Returns Type Description Dropdown.DropdownItem The created dropdown item component Remarks Override this method to implement a different way to obtain an option item. The option item should correspond to the provided template DropdownItem and its GameObject, equivalent to instantiating a copy of it. DestroyBlocker(GameObject) Convenience method to explicitly destroy the previously generated blocker object Declaration protected virtual void DestroyBlocker(GameObject blocker) Parameters Type Name Description GameObject blocker The blocker object to destroy. Remarks Override this method to implement a different way to dispose of a blocker GameObject that blocks clicks to other controls while the dropdown list is open. DestroyDropdownList(GameObject) Convenience method to explicitly destroy the previously generated dropdown list Declaration protected virtual void DestroyDropdownList(GameObject dropdownList) Parameters Type Name Description GameObject dropdownList The dropdown list GameObject to destroy Remarks Override this method to implement a different way to dispose of a dropdown list GameObject. DestroyItem(Dropdown.DropdownItem) Convenience method to explicitly destroy the previously generated Items. Declaration protected virtual void DestroyItem(Dropdown.DropdownItem item) Parameters Type Name Description Dropdown.DropdownItem item The Item to destroy. Remarks Override this method to implement a different way to dispose of an option item. Likely no action needed since destroying the dropdown list destroys all contained items as well. Hide() Hide the dropdown list. I.e. close it. Declaration public void Hide() OnCancel(BaseEventData) This will hide the dropdown list. Declaration public virtual void OnCancel(BaseEventData eventData) Parameters Type Name Description BaseEventData eventData The asocciated event data. Implements ICancelHandler.OnCancel(BaseEventData) Remarks Called by a BaseInputModule when a Cancel event occurs. OnDisable() Declaration protected override void OnDisable() Overrides Selectable.OnDisable() OnPointerClick(PointerEventData) Handling for when the dropdown is initially 'clicked'. Typically shows the dropdown Declaration public virtual void OnPointerClick(PointerEventData eventData) Parameters Type Name Description PointerEventData eventData The asocciated event data. Implements IPointerClickHandler.OnPointerClick(PointerEventData) OnSubmit(BaseEventData) Handling for when the dropdown is selected and a submit event is processed. Typically shows the dropdown Declaration public virtual void OnSubmit(BaseEventData eventData) Parameters Type Name Description BaseEventData eventData The asocciated event data. Implements ISubmitHandler.OnSubmit(BaseEventData) RefreshShownValue() Refreshes the text and image (if available) of the currently selected option. Declaration public void RefreshShownValue() Remarks If you have modified the list of options, you should call this method afterwards to ensure that the visual state of the dropdown corresponds to the updated options. SetValueWithoutNotify(Int32) Set index number of the current selection in the Dropdown without invoking onValueChanged callback. Declaration public void SetValueWithoutNotify(int input) Parameters Type Name Description Int32 input The new index for the current selection. Show() Show the dropdown. Plan for dropdown scrolling to ensure dropdown is contained within screen. We assume the Canvas is the screen that the dropdown must be kept inside. This is always valid for screen space canvas modes. For world space canvases we don't know how it's used, but it could be e.g. for an in-game monitor. We consider it a fair constraint that the canvas must be big enough to contain dropdowns. Declaration public void Show() Start() Declaration protected override void Start() Overrides UIBehaviour.Start() Extension Methods UIBehaviourExtensions.InvokeOnEnable(UIBehaviour) UIBehaviourExtensions.InvokeOnDisable(UIBehaviour) UIBehaviourExtensions.InvokeAwake(UIBehaviour) UIBehaviourExtensions.InvokeRebuild(UIBehaviour, CanvasUpdate) UIBehaviourExtensions.InvokeLateUpdate(UIBehaviour) UIBehaviourExtensions.InvokeUpdate(UIBehaviour) UIBehaviourExtensions.InvokeOnRectTransformDimensionsChange(UIBehaviour) UIBehaviourExtensions.InvokeOnCanvasGroupChanged(UIBehaviour) UIBehaviourExtensions.InvokeOnDidApplyAnimationProperties(UIBehaviour) SelectableExtensions.InvokeOnPointerDown(Selectable, PointerEventData) SelectableExtensions.InvokeOnPointerUp(Selectable, PointerEventData) SelectableExtensions.InvokeOnPointerEnter(Selectable, PointerEventData) SelectableExtensions.InvokeOnPointerExit(Selectable, PointerEventData) SelectableExtensions.InvokeTriggerAnimation(Selectable, String)"
  },
  "api/UnityEngine.EventSystems.BaseInputModule.html": {
    "href": "api/UnityEngine.EventSystems.BaseInputModule.html",
    "title": "Class BaseInputModule | Unity UI | 1.0.0",
    "keywords": "Class BaseInputModule Inheritance Object UIBehaviour BaseInputModule FakeInputModule PointerInputModule Inherited Members UIBehaviour.Awake() UIBehaviour.Start() UIBehaviour.OnDestroy() UIBehaviour.IsActive() UIBehaviour.OnRectTransformDimensionsChange() UIBehaviour.OnBeforeTransformParentChanged() UIBehaviour.OnTransformParentChanged() UIBehaviour.OnDidApplyAnimationProperties() UIBehaviour.OnCanvasGroupChanged() UIBehaviour.OnCanvasHierarchyChanged() UIBehaviour.IsDestroyed() Namespace : UnityEngine.EventSystems <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public abstract class BaseInputModule : UIBehaviour Fields m_InputOverride Declaration protected BaseInput m_InputOverride Field Value Type Description BaseInput m_RaycastResultCache Declaration [NonSerialized] protected List<RaycastResult> m_RaycastResultCache Field Value Type Description List < RaycastResult > Properties eventSystem Declaration protected EventSystem eventSystem { get; } Property Value Type Description EventSystem input The current BaseInput being used by the input module. Declaration public BaseInput input { get; } Property Value Type Description BaseInput inputOverride Used to override the default BaseInput for the input module. Declaration public BaseInput inputOverride { get; set; } Property Value Type Description BaseInput Remarks With this it is possible to bypass the Input system with your own but still use the same InputModule. For example this can be used to feed fake input into the UI or interface with a different input system. Methods ActivateModule() Called when the module is activated. Override this if you want custom code to execute when you activate your module. Declaration public virtual void ActivateModule() DeactivateModule() Called when the module is deactivated. Override this if you want custom code to execute when you deactivate your module. Declaration public virtual void DeactivateModule() DetermineMoveDirection(Single, Single) Given an input movement, determine the best MoveDirection. Declaration protected static MoveDirection DetermineMoveDirection(float x, float y) Parameters Type Name Description Single x X movement. Single y Y movement. Returns Type Description MoveDirection DetermineMoveDirection(Single, Single, Single) Given an input movement, determine the best MoveDirection. Declaration protected static MoveDirection DetermineMoveDirection(float x, float y, float deadZone) Parameters Type Name Description Single x X movement. Single y Y movement. Single deadZone Dead zone. Returns Type Description MoveDirection FindCommonRoot(GameObject, GameObject) Given 2 GameObjects, return a common root GameObject (or null). Declaration protected static GameObject FindCommonRoot(GameObject g1, GameObject g2) Parameters Type Name Description GameObject g1 GameObject to compare GameObject g2 GameObject to compare Returns Type Description GameObject FindFirstRaycast(List<RaycastResult>) Return the first valid RaycastResult. Declaration protected static RaycastResult FindFirstRaycast(List<RaycastResult> candidates) Parameters Type Name Description List < RaycastResult > candidates Returns Type Description RaycastResult GetAxisEventData(Single, Single, Single) Given some input data generate an AxisEventData that can be used by the event system. Declaration protected virtual AxisEventData GetAxisEventData(float x, float y, float moveDeadZone) Parameters Type Name Description Single x X movement. Single y Y movement. Single moveDeadZone Returns Type Description AxisEventData GetBaseEventData() Generate a BaseEventData that can be used by the EventSystem. Declaration protected virtual BaseEventData GetBaseEventData() Returns Type Description BaseEventData HandlePointerExitAndEnter(PointerEventData, GameObject) Declaration protected void HandlePointerExitAndEnter(PointerEventData currentPointerData, GameObject newEnterTarget) Parameters Type Name Description PointerEventData currentPointerData GameObject newEnterTarget IsModuleSupported() Check to see if the module is supported. Override this if you have a platform specific module (eg. TouchInputModule that you do not want to activate on standalone.) Declaration public virtual bool IsModuleSupported() Returns Type Description Boolean Is the module supported. IsPointerOverGameObject(Int32) If the module is pointer based, then override this to return true if the pointer is over an event system object. Declaration public virtual bool IsPointerOverGameObject(int pointerId) Parameters Type Name Description Int32 pointerId Pointer ID Returns Type Description Boolean Is the given pointer over an event system object? OnDisable() Declaration protected override void OnDisable() Overrides UIBehaviour.OnDisable() OnEnable() Declaration protected override void OnEnable() Overrides UIBehaviour.OnEnable() Process() Process the current tick for the module. Declaration public abstract void Process() ShouldActivateModule() Should the module be activated. Declaration public virtual bool ShouldActivateModule() Returns Type Description Boolean UpdateModule() Update the internal state of the Module. Declaration public virtual void UpdateModule() Extension Methods UIBehaviourExtensions.InvokeOnEnable(UIBehaviour) UIBehaviourExtensions.InvokeOnDisable(UIBehaviour) UIBehaviourExtensions.InvokeAwake(UIBehaviour) UIBehaviourExtensions.InvokeRebuild(UIBehaviour, CanvasUpdate) UIBehaviourExtensions.InvokeLateUpdate(UIBehaviour) UIBehaviourExtensions.InvokeUpdate(UIBehaviour) UIBehaviourExtensions.InvokeOnRectTransformDimensionsChange(UIBehaviour) UIBehaviourExtensions.InvokeOnCanvasGroupChanged(UIBehaviour) UIBehaviourExtensions.InvokeOnDidApplyAnimationProperties(UIBehaviour)"
  },
  "api/UnityEditor.UI.InputFieldEditor.html": {
    "href": "api/UnityEditor.UI.InputFieldEditor.html",
    "title": "Class InputFieldEditor | Unity UI | 1.0.0",
    "keywords": "Class InputFieldEditor Inheritance Object SelectableEditor InputFieldEditor Namespace : UnityEditor.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class InputFieldEditor : SelectableEditor Methods OnDisable() Declaration protected override void OnDisable() Overrides SelectableEditor.OnDisable() OnEnable() Declaration protected override void OnEnable() Overrides SelectableEditor.OnEnable() OnInspectorGUI() Declaration public override void OnInspectorGUI() Overrides SelectableEditor.OnInspectorGUI()"
  },
  "api/LayoutTests.LayoutGroupScaling.html": {
    "href": "api/LayoutTests.LayoutGroupScaling.html",
    "title": "Class LayoutGroupScaling | Unity UI | 1.0.0",
    "keywords": "Class LayoutGroupScaling Inheritance Object LayoutGroupScaling Namespace : LayoutTests <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class LayoutGroupScaling : IPrebuildSetup Methods LayoutGroup_CorrectChildScaling() Declaration public IEnumerator LayoutGroup_CorrectChildScaling() Returns Type Description IEnumerator OneTimeTearDown() Declaration public void OneTimeTearDown() Setup() Declaration public void Setup() TearDown() Declaration public void TearDown() TestSetup() Declaration public void TestSetup()"
  },
  "api/UnityEngine.UI.Selectable.SelectionState.html": {
    "href": "api/UnityEngine.UI.Selectable.SelectionState.html",
    "title": "Enum Selectable.SelectionState | Unity UI | 1.0.0",
    "keywords": "Enum Selectable.SelectionState An enumeration of selected states of objects Namespace : UnityEngine.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax protected enum SelectionState Fields Name Description Disabled The UI object cannot be selected. Highlighted The UI object is highlighted. Normal The UI object can be selected. Pressed The UI object is pressed. Selected The UI object is selected"
  },
  "api/UnityEngine.EventSystems.IScrollHandler.html": {
    "href": "api/UnityEngine.EventSystems.IScrollHandler.html",
    "title": "Interface IScrollHandler | Unity UI | 1.0.0",
    "keywords": "Interface IScrollHandler Interface to implement if you wish to receive OnScroll callbacks. Namespace : UnityEngine.EventSystems <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public interface IScrollHandler : IEventSystemHandler Remarks Criteria for this event is implementation dependent. For example see StandAloneInputModule. Methods OnScroll(PointerEventData) Use this callback to detect scroll events. Declaration void OnScroll(PointerEventData eventData) Parameters Type Name Description PointerEventData eventData"
  },
  "manual/script-Scrollbar.html": {
    "href": "manual/script-Scrollbar.html",
    "title": "Scrollbar | Unity UI | 1.0.0",
    "keywords": "Scrollbar The Scrollbar control allows the user to scroll an image or other view that is too large to see completely. Note that the similar Slider control is used for selecting numeric values rather than scrolling. Familiar examples include the vertical Scrollbar at the side of a text editor and the vertical and horizontal pair of bars for viewing a section of a large image or map. Properties Property: Function: Interactable Will this component accept input? See Interactable . Transition Properties that determine the way the control responds visually to user actions. See Transition Options . Navigation Properties that determine the sequence of controls. See Navigation Options . Fill Rect The graphic used for the background area of the control. Handle Rect The graphic used for the sliding \"handle\" part of the control Direction The direction in which the Scrollbar's value will increase when the handle is dragged. The options are Left To Right , Right To Left , Bottom To Top and Top To Bottom . Value Initial position value of the Scrollbar, in the range 0.0 to 1.0. Size Fractional size of the handle within the Scrollbar, in the range 0.0 to 1.0. Number Of Steps The number of distinct scroll positions allowed by the Scrollbar. Events Property: Function: On Value Changed A UnityEvent that is invoked when the current value of the Scrollbar changes. The event can send the value as a float type dynamic argument. Details The value of a Scrollbar is determined by the position of the handle along its length with the value being reported as a fraction between the extreme ends. For example, the default left-to-right bar has a value of 0.0 at the left end, 1.0 at the right end and 0.5 indicates the halfway point. A scrollbar can be oriented vertically by choosing Top To Bottom or Bottom To Top for the Direction property. A significant difference between the Scrollbar and the similar Slider control is that the Scrollbar's handle can change in size to represent the distance of scrolling available; when the view can scroll only a short way, the handle will fill up most of the bar and only allow a slight shift either direction. The Scrollbar has a single event called On Value Changed that responds as the user drags the handle. The current value is passed to the even function as a float parameter. Typical use cases for a scrollbar include: Scrolling a piece of text vertically. Scrolling a timeline horizontally. Used as a pair, scrolling a large image both horizontally and vertically to view a zoomed section. The size of the handle changes to indicate the degree of zooming and therefore the available distance for scrolling."
  },
  "manual/script-LayoutElement.html": {
    "href": "manual/script-LayoutElement.html",
    "title": "Layout Element | Unity UI | 1.0.0",
    "keywords": "Layout Element If you want to override the minimum, preferred, or flexible size of a layout element, you can do that by adding a Layout Element component to the GameObject. A layout controller allocates width or height to a layout element in the following order: First, the layout controller allocates the minimum size properties ( Min Width , Min Height ). If there is sufficient available space, the layout controller allocates the preferred size properties ( Preferred Width , Preferred Height ). If there is additional available space, the layout controller allocates the flexible size properties ( Flexible Width , Flexible Height ). For more information about minimum, preferred, and flexible size, see documentation on Auto Layout . Properties When you enable a width or height property, a value field appears next to it. Use this value field to enter the exact value for the width or height. Min and Preferred sizes are in regular units, while the Flexible sizes are in relative units. Property: Function: Ignore Layout When enabled, the layout system ignores this layout element. Min Width The minimum width this layout element should have. Min Height The minimum height this layout element should have. Preferred Width The preferred width this layout element should have before additional available width is allocated. Preferred Height The preferred height this layout element should have before additional available height is allocated. Flexible Width The relative amount of additional available width this layout element should fill out relative to its siblings. Flexible Height The relative amount of additional available height this layout element should fill out relative to its siblings. Layout Priority The layout priority for this component. If a GameObject has more than one component with layout properties (for example, an Image component and a LayoutElement component), the layout system uses the property values from the component with the highest Layout Priority . If the components have the same Layout Priority , the layout system uses the highest value for each property, regardless of which component it comes from. Description The Layout Element component lets you override the values for one or more of the layout properties. Enable the checkbox for a property you want to override and then specify the value you want to override with. Minimum and preferred sizes are defined in regular units, while the flexible sizes are defined in relative units. If any layout element has flexible size greater than zero, it means that all the available space will be filled out. The relative flexible size values of the siblings determines how big a proportion of the available space each sibling fills out. Most commonly, flexible width and height is set to just 0 or 1. Specifying both a preferred size and a flexible size can make sense in certain cases. Flexible sizes are only allocated after all preferred sizes have been fully allocated. Thus, a layout element which has a flexible size specified but no preferred size will keep its minimum size until other layout elements have grown to their full preferred size, and only then begin to grow based on additional available space. By also specifying a flexible size, this can be avoided and the element can grow to its preferred size in tandem with the other layout elements that have preferred sizes, and then grow further once all flexible sizes have been allocated."
  },
  "manual/class-RectTransform.html": {
    "href": "manual/class-RectTransform.html",
    "title": "Rect Transform | Unity UI | 1.0.0",
    "keywords": "Rect Transform The Rect Transform component is the 2D layout counterpart of the Transform component. Where Transform represents a single point, Rect Transform represent a rectangle that a UI element can be placed inside. If the parent of a Rect Transform is also a Rect Transform, the child Rect Transform can also specify how it should be positioned and sized relative to the parent rectangle. Properties Property: Function: Pos (X, Y, Z) Position of the rectangle's pivot point relative to the anchors. The pivot point is the location around which the rectangle rotates. Width/Height Width and height of the rectangle. Left, Top, Right, Bottom Positions of the rectangle's edges relative to their anchors. This can be thought of as padding inside the rectangle defined by the anchors. Shown in place of Pos and Width/Height when the anchors are separated (see below). To access these options click the square Anchor Presets box at the top left of the RectTransform component. Anchors The anchor points for the lower left corner and the upper right corner of the rectangle. Min The anchor point for the lower left corner of the rectangle defined as a fraction of the size of the parent rectangle. 0,0 corresponds to anchoring to the lower left corner of the parent, while 1,1 corresponds to anchoring to the upper right corner of the parent. Max The anchor point for the upper right corner of the rectangle defined as a fraction of the size of the parent rectangle. 0,0 corresponds to anchoring to the lower left corner of the parent, while 1,1 corresponds to anchoring to the upper right corner of the parent. Pivot Location of the pivot point around which the rectangle rotates, defined as a fraction of the size of the rectangle itself. 0,0 corresponds to the lower left corner while 1,1 corresponds to the upper right corner. Rotation Angle of rotation (in degrees) of the object around its pivot point along the X, Y and Z axis. Scale Scale factor applied to the object in the X, Y and Z dimensions. Blueprint Mode Edit RectTransforms as if they were not rotated and scaled. This enabled snapping too. Raw Edit Mode When enabled, editing pivot and anchor values will not counter adjust the position and size of the rectangle in order to make it stay in one place. Details Note that some RectTransform calculations are performed at the end of a frame, just before calculating UI vertices, in order to ensure that they are up to date with all the latest changes performed throughout the frame. This means that they haven't yet been calculated for the first time in the Start callback and first Update callback. You can work around this by creating a Start() callback and adding Canvas.ForceUpdateCanvases() method to it. This will force Canvas to be updated not at the end of the frame, but when that method is called. See the Basic Layout page for a full introduction and overview of how to use the Rect Transform."
  },
  "manual/class-CanvasGroup.html": {
    "href": "manual/class-CanvasGroup.html",
    "title": "Canvas Group | Unity UI | 1.0.0",
    "keywords": "Canvas Group The Canvas Group can be used to control certain aspects of a whole group of UI elements from one place without needing to handle them each individually. The properties of the Canvas Group affect the GameObject it is on as well as all children. Properties Property: Function: Alpha The opacity of the UI elements in this group. The value is between 0 and 1 where 0 is fully transparent and 1 is fully opaque. Note that elements retain their own transparency as well, so the Canvas Group alpha and the alpha values of the individual UI elements are multiplied with each other. Interactable Determines if this component will accept input. When it is set to false interaction is disabled. Block Raycasts Will this component act as a collider for Raycasts? You will need to call the RayCast function on the graphic raycaster attached to the Canvas. This does not apply to Physics.Raycast . Ignore Parent Groups Will this group also be affected by the settings in Canvas Group components further up in the Game Object hierarchy, or will it ignore those and hence override them? Details Typical uses of Canvas Group are: Fading in or out a whole window by adding a Canvas Group on the GameObject of the Window and control its Alpha property. Making a whole set of controls non-interactable (\"grayed out\") by adding a Canvas Group to a parent GameObject and setting its Interactable property to false. Making one or more UI elements not block mouse events by placing a Canvas Group component on the element or one of its parents and setting its Block Raycasts property to false."
  },
  "license/LICENSE.html": {
    "href": "license/LICENSE.html",
    "title": "| Unity UI | 1.0.0",
    "keywords": "Unity Companion Package License v1.0 (\" License \") Copyright © 2020 Unity Technologies ApS (\" Unity \") Unity hereby grants to you a worldwide, non-exclusive, no-charge, and royalty-free copyright license to reproduce, prepare derivative works of, publicly display, publicly perform, sublicense, and distribute the software that is made available with this License (\" Software \"), subject to the following terms and conditions: Unity Companion Use Only . Exercise of the license granted herein is limited to exercise for the creation, use, and/or distribution of applications, software, or other content pursuant to a valid Unity development engine software license (\" Engine License \"). That means while use of the Software is not limited to use in the software licensed under the Engine License, the Software may not be used for any purpose other than the creation, use, and/or distribution of Engine License-dependent applications, software, or other content. No other exercise of the license granted herein is permitted. No Modification of Engine License . Neither this License nor any exercise of the license granted herein modifies the Engine License in any way. Ownership & Grant Back to You . 3.1. You own your content. In this License, \"derivative works\" means derivatives of the Software itself--works derived only from the Software by you under this License (for example, modifying the code of the Software itself to improve its efficacy); “derivative works” of the Software do not include, for example, games, apps, or content that you create using the Software. You keep all right, title, and interest to your own content. 3.2. Unity owns its content. While you keep all right, title, and interest to your own content per the above, as between Unity and you, Unity will own all right, title, and interest to all intellectual property rights (including patent, trademark, and copyright) in the Software and derivative works of the Software, and you hereby assign and agree to assign all such rights in those derivative works to Unity. 3.3. You have a license to those derivative works. Subject to this License, Unity grants to you the same worldwide, non-exclusive, no-charge, and royalty-free copyright license to derivative works of the Software you create as is granted to you for the Software under this License. Trademarks . You are not granted any right or license under this License to use any trademarks, service marks, trade names, products names, or branding of Unity or its affiliates (\" Trademarks \"). Descriptive uses of Trademarks are permitted; see, for example, Unity’s Branding Usage Guidelines at https://unity3d.com/public-relations/brand . Notices & Third-Party Rights . This License, including the copyright notice above, must be provided in all substantial portions of the Software and derivative works thereof (or, if that is impracticable, in any other location where such notices are customarily placed). Further, if the Software is accompanied by a Unity \"third-party notices\" or similar file, you acknowledge and agree that software identified in that file is governed by those separate license terms. DISCLAIMER, LIMITATION OF LIABILITY . THE SOFTWARE AND ANY DERIVATIVE WORKS THEREOF IS PROVIDED ON AN \"AS IS\" BASIS, AND IS PROVIDED WITHOUT WARRANTY OF ANY KIND, WHETHER EXPRESS OR IMPLIED, INCLUDING ANY WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, AND/OR NONINFRINGEMENT. IN NO EVENT SHALL ANY COPYRIGHT HOLDER OR AUTHOR BE LIABLE FOR ANY CLAIM, DAMAGES (WHETHER DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL, INCLUDING PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES, LOSS OF USE, DATA, OR PROFITS, AND BUSINESS INTERRUPTION), OR OTHER LIABILITY WHATSOEVER, WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM OR OUT OF, OR IN CONNECTION WITH, THE SOFTWARE OR ANY DERIVATIVE WORKS THEREOF OR THE USE OF OR OTHER DEALINGS IN SAME, EVEN WHERE ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. USE IS ACCEPTANCE and License Versions . Your receipt and use of the Software constitutes your acceptance of this License and its terms and conditions. Software released by Unity under this License may be modified or updated and the License with it; upon any such modification or update, you will comply with the terms of the updated License for any use of any of the Software under the updated License. Use in Compliance with Law and Termination . Your exercise of the license granted herein will at all times be in compliance with applicable law and will not infringe any proprietary rights (including intellectual property rights); this License will terminate immediately on any breach by you of this License. Severability . If any provision of this License is held to be unenforceable or invalid, that provision will be enforced to the maximum extent possible and the other provisions will remain in full force and effect. Governing Law and Venue . This License is governed by and construed in accordance with the laws of Denmark, except for its conflict of laws rules; the United Nations Convention on Contracts for the International Sale of Goods will not apply. If you reside (or your principal place of business is) within the United States, you and Unity agree to submit to the personal and exclusive jurisdiction of and venue in the state and federal courts located in San Francisco County, California concerning any dispute arising out of this License (\" Dispute \"). If you reside (or your principal place of business is) outside the United States, you and Unity agree to submit to the personal and exclusive jurisdiction of and venue in the courts located in Copenhagen, Denmark concerning any Dispute."
  },
  "license/index.html": {
    "href": "license/index.html",
    "title": "| Unity UI | 1.0.0",
    "keywords": "window.location.replace('LICENSE.html')"
  },
  "manual/UIReference.html": {
    "href": "manual/UIReference.html",
    "title": "UI Reference | Unity UI | 1.0.0",
    "keywords": "UI Reference This section goes into more depth about Unity’s UI features."
  },
  "manual/script-Dropdown.html": {
    "href": "manual/script-Dropdown.html",
    "title": "Dropdown | Unity UI | 1.0.0",
    "keywords": "Dropdown The Dropdown can be used to let the user choose a single option from a list of options. The control shows the currently chosen option. Once clicked, it opens up the list of options so a new option can be chosen. Upon choosing a new option, the list of closed again, and the control shows the new selected option. The list is also closed if the user clicks on the control itself, or anywhere else inside the Canvas. Properties Property: Function: Interactable Will this component will accept input? See Interactable . Transition Properties that determine the way the control responds visually to user actions. See Transition Options . Navigation Properties that determine the sequence of controls. See Navigation Options . Template The Rect Transform of the template for the dropdown list. See instructions below. Caption Text The Text component to hold the text of the currently selected option. (Optional) Caption Image The Image component to hold the image of the currently selected option. (Optional) Item Text The Text component to hold the text of the item. (Optional) Item Image The Image component to hold the image of the item. (Optional) Value The index of the currently selected option. 0 is the first option, 1 is the second, and so on. Options The list of possible options. A text string and an image can be specified for each option. Events Property: Function: On Value Changed A UnityEvent that is invoked when a user has clicked one of the options in the dropdown list. Details The list of options is specified in the Inspector or can be assigned from code. For each option a text string can be specified, and optionally an image as well, if the Dropdown is setup to support it. The button has a single event called On Value Changed that responds when the user completes a click on one of the options in the list. It supports sending an integer number value that is the index of the selected option. 0 is the first option, 1 is the second, and so on. The template system The Dropdown control is designed to have a child GameObject which serves as a template for the dropdown list that is shown when clicking the dropdown control. The template GameObject is inactive by default, but can be made active while editing the template to better see what's going on. A reference to the template object must be specified in the Template property of the Dropdown component. The template must have a single item in it with a Toggle component on. When the actual dropdown list is created upon clicking the dropdown control, this item is duplicated multiple times, with one copy used for each option in the list. The parent of the item is automatically resized so it can fit all the items inside. The template can be setup in many different ways. The setup used by the GameObject > UI > Dropdown menu item includes a scroll view, such that if there are too many options to show at once, a scrollbar will appear and the user can scroll through the options. This is however not a mandatory part of the template setup. (See the ScrollRect page for more information about setup of Scroll Views.) Setup of text and image support The dropdown supports one text content and one image content for each option. Both text and image is optional. They can only be used if the Dropdown is setup to support it. The dropdown supports text for each option when the Caption Text and Item Text properties are both setup. These are setup by default when using the GameObject > UI > Dropdown menu item. The Caption Text is the Text component to hold the text for the currently selected option. It is typically a child to the Dropdown GameObject. The Item Text is the Text component to hold the text for each option. It is typically a child to the Item GameObject. The dropdown supports an image for each option when the Caption Image and Item Image properties are both setup. These are not setup by default. The Caption Image is the Image component to hold the image for the currently selected option. It is typically a child to the Dropdown GameObject. The Item Image is the Image component to hold the image for each option. It is typically a child to the Item GameObject. The actual text and images used for the dropdowns are specified in the Options property of the Dropdown component, or can be set from code. Placement of the dropdown list The placement of the dropdown list in relation to the dropdown control is determined by the anchoring and pivot of the Rect Transform of the Template. By default, the list will appear below the control. This is achieved by anchoring the template to the bottom of the control. The pivot of the template also needs to be at the top, so that as the template is expanded to accommodate a variable number of option items, it only expands downwards. The Dropdown control has simple logic to prevent that the dropdown is displayed outside the bounds of the Canvas, since this would make it impossible to select certain options. If the dropdown at its default position is not fully within the Canvas rectangle, its position in relation to the control is reversed. For example, a list that is shown below the control by default will be shown above it instead. This logic is quite simple and has certain limitations. The dropdown template needs to be no larger than half the Canvas size minus the size of the dropdown control, otherwise there may not be room for the list at either position if the dropdown control is placed in the middle of the Canvas."
  },
  "manual/script-ContentSizeFitter.html": {
    "href": "manual/script-ContentSizeFitter.html",
    "title": "Content Size Fitter | Unity UI | 1.0.0",
    "keywords": "Content Size Fitter Properties Property: Function: Horizontal Fit How the width is controlled. Unconstrained Do not drive the width based on the layout element. Min Size Drive the width based on the minimum width of the layout element. Preferred Size Drive the width based on the preferred width of the layout element. Vertical Fit How the height is controlled. Unconstrained Do not drive the height based on the layout element. Min Size Drive the height based on the minimum height of the layout element. Preferred Size Drive the height based on the preferred height of the layout element. Description The Content Size Fitter functions as a layout controller that controls the size of its own layout element. The size is determined by the minimum or preferred sizes provided by layout element components on the Game Object. Such layout elements can be Image or Text components, layout groups, or a Layout Element component. It's worth keeping in mind that when a Rect Transform is resized - whether by a Content Size Fitter or something else - the resizing is around the pivot. This means that the direction of the resizing can be controlled using the pivot. For example, when the pivot is in the center, the Content Size Fitter will expand the Rect Transform out equally in all directions. And when the pivot is in the upper left corner, the Content Size Fitter will expand the Rect Transform down and to the right."
  },
  "manual/UICanvas.html": {
    "href": "manual/UICanvas.html",
    "title": "Canvas | Unity UI | 1.0.0",
    "keywords": "Canvas The Canvas is the area that all UI elements should be inside. The Canvas is a Game Object with a Canvas component on it, and all UI elements must be children of such a Canvas. Creating a new UI element, such as an Image using the menu GameObject > UI > Image , automatically creates a Canvas, if there isn't already a Canvas in the scene. The UI element is created as a child to this Canvas. The Canvas area is shown as a rectangle in the Scene View. This makes it easy to position UI elements without needing to have the Game View visible at all times. Canvas uses the EventSystem object to help the Messaging System. Draw order of elements UI elements in the Canvas are drawn in the same order they appear in the Hierarchy. The first child is drawn first, the second child next, and so on. If two UI elements overlap, the later one will appear on top of the earlier one. To change which element appear on top of other elements, simply reorder the elements in the Hierarchy by dragging them. The order can also be controlled from scripting by using these methods on the Transform component: SetAsFirstSibling, SetAsLastSibling, and SetSiblingIndex. Render Modes The Canvas has a Render Mode setting which can be used to make it render in screen space or world space. Screen Space - Overlay This render mode places UI elements on the screen rendered on top of the scene. If the screen is resized or changes resolution, the Canvas will automatically change size to match this. Screen Space - Camera This is similar to Screen Space - Overlay , but in this render mode the Canvas is placed a given distance in front of a specified Camera . The UI elements are rendered by this camera, which means that the Camera settings affect the appearance of the UI. If the Camera is set to Perspective , the UI elements will be rendered with perspective, and the amount of perspective distortion can be controlled by the Camera Field of View . If the screen is resized, changes resolution, or the camera frustum changes, the Canvas will automatically change size to match as well. World Space In this render mode, the Canvas will behave as any other object in the scene. The size of the Canvas can be set manually using its Rect Transform, and UI elements will render in front of or behind other objects in the scene based on 3D placement. This is useful for UIs that are meant to be a part of the world. This is also known as a \"diegetic interface\"."
  },
  "manual/script-ToggleGroup.html": {
    "href": "manual/script-ToggleGroup.html",
    "title": "Toggle Group | Unity UI | 1.0.0",
    "keywords": "Toggle Group A Toggle Group is not a visible UI control but rather a way to modify the behavior of a set of Toggles . Toggles that belong to the same group are constrained so that only one of them can switched on at a time - pressing one of them to switch it on automatically switches the others off. Properties Property: Function: Allow Switch Off Is it allowed that no toggle is switched on? If this setting is enabled, pressing the toggle that is currently switched on will switch it off, so that no toggle is switched on. If this setting is disabled, pressing the toggle that is currently switched on will not change its state. Description The Toggle Group is setup by dragging the Toggle Group object to the Group property of each of the Toggles in the group. Toggle Groups are useful anywhere the user must make a choice from a mutually exclusive set of options. Common examples include selecting player character types, speed settings (slow, medium, fast, etc), preset colors and days of the week. You can have more than one Toggle Group object in the scene at a time, so you can create several separate groups if necessary. Unlike other UI elements, an object with a Toggle Group component does not need to be a child of a Canvas object, although the Toggles themselves still do. Note that the Toggle Group will not enforce its constraint right away if multiple toggles in the group are switched on when the scene is loaded or when the group is instantiated. Only when a new toggle is swicthed on are the others switched off. This means it's up to you to ensure that only one toggle is switched on from the beginning."
  },
  "manual/InputModules.html": {
    "href": "manual/InputModules.html",
    "title": "Input Modules | Unity UI | 1.0.0",
    "keywords": "Input Modules An Input Module is where the main logic of an event system can be configured and customized. Out of the box there are two provided Input Modules, one designed for Standalone, and one designed for Touch input. Each module receives and dispatches events as you would expect on the given configuration. Input modules are where the 'business logic' of the Event System take place. When the Event System is enabled it looks at what Input Modules are attached and passes update handling to the specific module. Input modules are designed to be extended or modified based on the input systems that you wish to support. Their purpose is to map hardware specific input (such as touch, joystick, mouse, motion controller) into events that are sent via the messaging system. The built in Input Modules are designed to support common game configurations such as touch input, controller input, keyboard input, and mouse input. They send a variety of events to controls in the application, if you implement the specific interfaces on your MonoBehaviours. All of the UI components implement the interfaces that make sense for the given component."
  },
  "manual/comp-UIEffects.html": {
    "href": "manual/comp-UIEffects.html",
    "title": "UI Effect Components | Unity UI | 1.0.0",
    "keywords": "UI Effect Components The effects components allow adding simple effects to Text and Image graphics, such as shadow and outline. Shadow Outline Position as UV1"
  },
  "manual/script-VerticalLayoutGroup.html": {
    "href": "manual/script-VerticalLayoutGroup.html",
    "title": "Vertical Layout Group | Unity UI | 1.0.0",
    "keywords": "Vertical Layout Group The Vertical Layout Group component places its child layout elements on top of each other. Their heights are determined by their respective minimum, preferred, and flexible heights according to the following model: The minimum heights of all the child layout elements are added together and the spacing between them is added as well. The result is the mimimum height of the Vertical Layout Group. The preferred heights of all the child layout elements are added together and the spacing between them is added as well. The result is the preferred height of the Vertical Layout Group. If the Vertical Layout Group is at its minimum height or smaller, all the child layout elements will also have their minimum height. The closer the Vertical Layout group is to its preferred height, the closer each child layout element will also get to their preferred height. If the Vertical Layout Group is taller than its preferred height, it will distribute the extra available space proportionally to the child layout elements according to their respective flexible heights. For more information about minimum, preferred, and flexible height, see the documentation on Auto Layout . Properties Property: Function: Padding The padding inside the edges of the layout group. Spacing The spacing between the layout elements. Child Alignment The alignment to use for the child layout elements if they don't fill out all the available space. Control Child Size Whether the Layout Group controls the width and height of its child layout elements. Use Child Scale Whether the Layout Group considers the scale of its child layout elements when sizing and laying out elements. Width and Height correspond to the Scale > X and Scale > Y values in each child layout element's Rect Transform component. Child Force Expand Whether to force the child layout elements to expand to fill additional available space."
  },
  "manual/script-AspectRatioFitter.html": {
    "href": "manual/script-AspectRatioFitter.html",
    "title": "Aspect Ratio Fitter | Unity UI | 1.0.0",
    "keywords": "Aspect Ratio Fitter Properties Property: Function: Aspect Mode How the rectangle is resized to enforce the aspect ratio. None Do not make the rect fit the aspect ratio. Width Controls Height The height is automatically adjusted based on the width. Height Controls Width The width is automatically adjusted based on the height. Fit In Parent The width, height, position, and anchors are automatically adjusted to make the rect fit inside the rect of the parent while keeping the aspect ratio. The may be some space inside the parent rect which is not covered by this rect. Envelope Parent The width, height, position, and anchors are automatically adjusted to make the rect cover the entire area of the parent while keeping the aspect ratio. This rect may extend further out than the parent rect. Aspect Ratio The aspect ratio to enforce. This is the width divided by the height. Description The Aspect Ratio Fitter functions as a layout controller that controls the size of its own layout element. It can adjust the height to fit the width or vice versa, or it can make the element fit inside its parent or envelope its parent. The Aspect Ratio Fitter does not take layout information into account such as minimum size and preferred size. It's worth keeping in mind that when a Rect Transform is resized - whether by an Aspect Ratio Fitter or something else - the resizing is around the pivot. This means that the pivot can be used to control the alignment of the rectangle. For example, a pivot placed at the top center will make the rectangle grow evenly to both sides, and only grow downwards while the top edge remain at its position."
  },
  "manual/HOWTO-UIFitContentSize.html": {
    "href": "manual/HOWTO-UIFitContentSize.html",
    "title": "Making UI elements fit the size of their content | Unity UI | 1.0.0",
    "keywords": "Making UI elements fit the size of their content Normally when positioning a UI element with its Rect Transform, its position and size is specified manually (optionally including behavior to stretch with the parent Rect Transform). However, sometimes you may want the rectangle to be automatically sized to fit the content of the UI element. This can be done by adding a component called Content Size Fitter. Fit to size of Text In order to make a Rect Transform with a Text component on it fit the text content, add a Content Size Fitter component to the same Game Object which has the Text component. Then set both the Horizontal Fit and Vertical Fit dropdowns to the Preferred setting. How does it work? What happens here is that the Text component functions as a Layout Element that can provide information about how big its minimum and preferred size is. In a manual layout this information is not used. A Content Size Fitter is a type of Layout Controller, which listens to layout information provided by Layout Elements and control the size of the Rect Transform according to this. Remember the pivot When UI elements are automatically resized to fit their content, you should pay extra attention to the pivot of the Rect Transform. The pivot will stay in place when the element is resized, so by setting the pivot position you can control in which direction the element will expand or shrink. For example, if the pivot is in the center, then the element will expand equally in all directions, and if the pivot is in the upper left corner, then the element will expand to the right and down. Fit to size of UI element with child Text If you have a UI element, such as a Button, that has a background image and a child Game Object with a Text component on it, you probably want the whole UI element to fit the size of the text - maybe with some padding. In order to do this, first add a Horizontal Layout Group to the UI element, then add a Content Size Fitter too. Set the Horizontal Fit, the Vertical Fit, or both to the Preferred setting. You can add and tweak padding using the padding property in the Horizontal Layout Group. Why use a Horizontal Layout Group? Well, it could have been a Vertical Layout Group as well - as long as there is only a single child, they produce the same result. How does it work? The Horizontal (or Vertical) Layout Group functions both as a Layout Controller and as a Layout Element. First it listens to the layout information provided by the children in the group - in this case the child Text. Then it determines how large the group must be (at minimum, and preferably) in order to be able to contain all the children, and it functions as a Layout Element that provides this information about its minimum and preferred size. The Content Size Fitter listens to layout information provided by any Layout Element on the same Game Object - in this case provided by the Horizontal (or Vertical) Layout Group. Depending on its settings, it then controls the size of the Rect Transform based on this information. Once the size of the Rect Transform has been set, the Horizontal (or Vertical) Layout Group makes sure to position and size its children according to the available space. See the page about the Horizontal Layout Group for more information about how it controls the positions and sizes of its children. Make children of a Layout Group fit their respective sizes If you have a Layout Group (horizontal or vertical) and want each of the UI elements in the group to fit their respective content, what do you do? You can't put a Content Size Fitter on each child. The reason is that the Content Size Fitter wants control over its own Rect Transform, but the parent Layout Group also wants control over the child Rect Transform. This creates a conflict and the result is undefined behavior. However, it isn't necessary either. The parent Layout Group can already make each child fit the size of the content. What you need to do is to disable the Child Force Expand toggles on the Layout Group. If the children are themselves Layout Groups too, you may need to disable the Child Force Expand toggles on those too. Once the children no longer expand with flexible width, their alignment can be specified in the Layout Group using the Child Alignment setting. What if you want some of the children to expand to fill additional available space, but not the other children? You can easily control this by adding a Layout Element component to the children you want to expand and enabling the Flexible Width or Flexible Height properties on those Layout Elements. The parent Layout Group should still have the Child Force Expand toggles disabled, otherwise all the children will expand flexibly. How does it work? A Game Object can have multiple components that each provide layout information about minimum, preferred and flexible sizes. A priority system determines which values take effect over others. The Layout Element component has a higher priority than the Text, Image, and Layout Group components, so it can be used to override any layout information values they provide. When the Layout Group listens to the layout information provided by the children, it will take the overridden flexible sizes into account. Then, when controlling the sizes of the children, it will not make them any bigger than their preferred sizes. However, if the Layout Group has the Child Force Expand option enabled, it will always make the flexible sizes of all the children be at least 1. More information This page has explained solutions to a few common use cases. For a more in depth explanation of the auto layout system, see the UI Auto Layout page."
  },
  "manual/ugui.html": {
    "href": "manual/ugui.html",
    "title": "About Unity UI | Unity UI | 1.0.0",
    "keywords": "About Unity UI Unity UI is a UI toolkit for developing user interfaces for games and applications. It is a GameObject-based UI system that uses Components and the Game View to arrange, position, and style user interfaces. You cannot use Unity UI to create or change user interfaces within the Unity Editor. Installing Unity UI Unity UI is a core package. A version of it is included in each Unity release. To remove this package, or reinstall it after removal, follow the instructions in the Package Manager documentation . Getting documentation User documentation The Unity UI user documentation is in the Unity Manual . It provides a basic overview of the available components, and a few how-tos. API documentation You can find Class descriptions and API compatibility information in the Scripting API section of this documentation. Getting support For questions and assistance, visit the Unity UI section of the Unity Forum."
  },
  "manual/TableOfContents.html": {
    "href": "manual/TableOfContents.html",
    "title": "| Unity UI | 1.0.0",
    "keywords": "Unity UI: Unity User Interface Canvas Basic Layout Visual Components Interaction Components Animation Integration Auto Layout Rich Text Events MessagingSystem InputModules SupportedEvents Raycasters Reference Rect Transform Canvas Components Canvas Canvas Scaler Canvas Group Canvas Renderer Visual UIInteractionComponents Text Image Raw Image Mask RectMask2D UI Effect Components Shadow Outline Position as UV1 Interaction Components Selectable Base Class Transition Options Navigation Options Button Toggle Toggle Group Slider Scrollbar Dropdown Input Field Scroll Rect Auto Layout Layout Element Content Size Fitter Aspect Ratio Fitter Horizontal Layout Group Vertical Layout Group Grid Layout Group Events script-EventSystem script-GraphicRaycaster script-PhysicsRaycaster script-Physics2DRaycaster script-StandaloneInputModule script-TouchInputModule script-EventTrigger UI How Tos Designing UI for Multiple Resolutions Making UI elements fit the size of their content Creating a World Space UI Creating UI elements from scripting Creating Screen Transitions"
  },
  "manual/script-Selectable.html": {
    "href": "manual/script-Selectable.html",
    "title": "Selectable Base Class | Unity UI | 1.0.0",
    "keywords": "Selectable Base Class The Selectable Class is the base class for all the interaction components and it handles the items that are in common. Property: Function: Interactable This determines if this component will accept input. When it is set to false interaction is disabled and the transition state will be set to the disabled state. Transition Within a selectable component there are several Transition Options depending on what state the selectable is currently in. The different states are: normal, highlighted, pressed and disabled. Navigation There are also a number of Navigation Options to control how keyboard navigation of the controls is implemented."
  },
  "manual/script-ScrollRect.html": {
    "href": "manual/script-ScrollRect.html",
    "title": "Scroll Rect | Unity UI | 1.0.0",
    "keywords": "Scroll Rect A Scroll Rect can be used when content that takes up a lot of space needs to be displayed in a small area. The Scroll Rect provides functionality to scroll over this content. Usually a Scroll Rect is combined with a Mask in order to create a scroll view, where only the scrollable content inside the Scroll Rect is visible. It can also additionally be combined with one or two Scrollbars that can be dragged to scroll horizontally or vertically. Properties Property: Function: Content This is a reference to the Rect Transform of the UI element to be scrolled, for example a large image. Horizontal Enables horizontal scrolling Vertical Enables vertical scrolling Movement Type Unrestricted, Elastic or Clamped. Use Elastic or Clamped to force the content to remain within the bounds of the Scroll Rect. Elastic mode bounces the content when it reaches the edge of the Scroll Rect Elasticity This is the amount of bounce used in the elasticity mode. Inertia When Inertia is set the content will continue to move when the pointer is released after a drag. When Inertia is not set the content will only move when dragged. Deceleration Rate When Inertia is set the deceleration rate determines how quickly the contents stop moving. A rate of 0 will stop the movement immediately. A value of 1 means the movement will never slow down. Scroll Sensitivity The sensitivity to scroll wheel and track pad scroll events. Viewport Reference to the viewport Rect Transform that is the parent of the content Rect Transform. Horizontal Scrollbar Optional reference to a horizontal scrollbar element. Visibility Whether the scrollbar should automatically be hidden when it isn't needed, and optionally expand the viewport as well. Spacing The space between the scrollbar and the viewport. Vertical Scrollbar Optional reference to a vertical scrollbar element. Visibility Whether the scrollbar should automatically be hidden when it isn't needed, and optionally expand the viewport as well. Spacing The space between the scrollbar and the viewport. Events Property: Function: On Value Changed A UnityEvent that is invoked when the scroll position of the Scroll Rect changes. The event can send the current scroll position as a Vector2 type dynamic argument. Details The important elements in a scroll view are the viewport , the scrolling content , and optionally one or two scrollbars . The root GameObject has the Scroll Rect component. The viewport has a Mask component. The viewport can either be the root GameObject, or a separate GameObject that's a child to the root. If auto-hiding scrollbars are used, it must be a child. The viewport Rect Transform needs to be referenced in the Viewport property of the Scroll Rect. All the scrolling content must be children of a single content GameObject that is a child to the viewport. The content Rect Transform needs to be referenced in the Content property of the Scroll Rect. The scrollbars - if used - are children to the root GameObject. See the Scrollbar page for more details on the setup of a scrollbar and see the section Scrollbar setup below for information about setup of scrollbars with a scroll view. This image shows a setup where the viewport is a child to the scroll view root. This is the default used when using the GameObject > UI > Scroll View menu option. To scroll content, the input must be received from inside the bounds of the ScrollRect, not on the content itself. Take care when using Unrestricted scrolling movement as it is possible to lose control of the content in an irretrievable way. When using Elastic or Constrained movement it is best to position the content so that it starts within the bounds of the ScrollRect, or undesirable behaviour may occur as the RectTransform tries to bring the content back within its bounds. Scrollbar setup Optionally, the Scroll Rect can be linked to a horizontal and/or a vertical Scrollbar . These are typically placed in the hierarchy as siblings to the viewport, and when present, should be dragged into the Horizontal Scrollbar and Vertical Scrollbar properties of the Scroll Rect, respectively. Note that the Direction property on such a horizontal Scrollbar should be set to Left To Right , and on the vertical Scrollbar to Bottom To Top . The scrollbars can optionally have auto-hiding behaviour that hides the scrollbars if the content doesn't need to scroll because it isn't larger than the viewport. Note that the auto-hiding only ever happens in Play Mode. In Edit Mode the scrollbars are always shown. This prevents marking the scene as dirty when it shouldn't be, and also help authoring content with proportions that there's room for even when the scrollbars are shown. If one or both scrollbars have their visibility behaviour set to Auto Hide And Expand View , the viewport is automatically expanded when the scrollbars are hidden in order to take up the extra room where the scrollbars would otherwise have been. With this setup, the position and size of the view is driven by the Scroll Rect, and the width of the horizontal scrollbar as well as the height of the vertical scrollbar is driven as well. With this setup the viewport as well as the scrollbars must be children to the Scroll Rect root GameObject. Hints The pivot and anchors of the content RectTransform can be used to determine how the content is aligned inside the scroll view if the content grows or shrinks. If the content should stay aligned with the top, set the anchors to the top of the parent, and set the pivot to the top position. See the page Making UI elements fit the size of their content for information about how to make the content Rect Transform automatically resize to fit the content."
  },
  "manual/script-SelectableTransition.html": {
    "href": "manual/script-SelectableTransition.html",
    "title": "Transition Options | Unity UI | 1.0.0",
    "keywords": "Transition Options Within a selectable component there are several transition options depending on what state the selectable is currently in. The different states are: normal, highlighted, pressed and disabled. Transition Options: Function: None This option is for the button to have no state effects at all. Color Tint Changes the colour of the button depending on what state it is in. It is possible to select the colour for each individual state. It is also possible to set the Fade Duration between the different states. The higher the number is, the slower the fade between colors will be. Sprite Swap Allows different sprites to display depending on what state the button is currently in, the sprites can be customised. Animation Allows animations to occur depending on the state of the button, an animator component must exist in order to use animation transition. It’s important to make sure root motion is disabled. To create an animation controller click on generate animation (or create your own) and make sure that an animation controller has been added to the animator component of the button. Each Transition option (except None) provides additional options for controlling the transitions. We'll go into details with those in each of the sections below. Color Tint Property: Function: Target Graphic The graphic used for the interaction component. Normal Color The normal color of the control Highlighted Color The color of the control when it is highlighted Pressed Color The color of the control when it is pressed Disabled Color The color of the control when it is disabled Color Multiplier This multiplies the tint color for each transition by its value. With this you can create colors greater than 1 to brighten the colors (or alpha channel) on graphic elements whose base color is less than white (or less then full alpha). Fade Duration The time taken, in seconds, to fade from one state to another Sprite Swap Property: Function: Target Graphic The normal sprite to use Highlighted Sprite Sprite to use when the control is highlighted Pressed Sprite Sprite to use when the control is pressed Disabled Sprite Sprite to use when the control is disabled Animation Property: Function: Normal Trigger The normal animation trigger to use Highlighted Trigger Trigger to use when the control is highlighted Pressed Trigger Trigger to use when the control is pressed Disabled Trigger Trigger to use when the control is disabled"
  },
  "manual/script-SelectableNavigation.html": {
    "href": "manual/script-SelectableNavigation.html",
    "title": "Navigation Options | Unity UI | 1.0.0",
    "keywords": "Navigation Options Property: Function: Navigation The Navigation options refers to how the navigation of UI elements in play mode will be controlled. None No keyboard navigation. Also ensures that it does not receive focus from clicking/tapping on it. Horizontal Navigates Horizontally. Vertical Navigates Vertically. Automatic Automatic Navigation. Explicit In this mode you can explicitly specify where the control navigates to for different arrow keys. Visualize Selecting Visualize gives you a visual representation of the navigation you have set up in the scene window. See below. In the above visualization mode, the arrows indicate how the change of focus is set up for the collection of controls as a group. That means - for each individual UI control - you can see which UI control will get focus next, if the user presses an arrow key when the given control has focus. So in the example shown above, If the \"button\" has focus and the user presses the right arrow key, the first (left-hand) vertical slider will then become focused. Note that the vertical sliders can't be focused-away-from using up or down keys, because they control the value of the slider. The same is true of the horizontal sliders and the left/right arrow keys."
  },
  "manual/script-PhysicsRaycaster.html": {
    "href": "manual/script-PhysicsRaycaster.html",
    "title": "Physics Raycaster | Unity UI | 1.0.0",
    "keywords": "Physics Raycaster The Raycaster raycasts against 3D objects in the scene. This allows messages to be sent to 3D physics objects that implement event interfaces. Properties Property: Function: Depth Get the depth of the configured camera. Event Camera Get the camera that is used for this module. Event Mask Logical and of Camera mask and eventMask. Final Event Mask Logical and of Camera mask and eventMask."
  },
  "manual/script-Physics2DRaycaster.html": {
    "href": "manual/script-Physics2DRaycaster.html",
    "title": "Physics 2D Raycaster | Unity UI | 1.0.0",
    "keywords": "Physics 2D Raycaster The 2D Raycaster raycasts against 2D objects in the scene. This allows messages to be sent to 2D physics objects that implement event interfaces. The Camera GameObject needs to be used and will be added to the GameObject if the Physics 3D Raycaster is not added to the Camera GameObject. For more Raycaster information see Raycasters . Properties Property: Function: Event Camera The camera that will generate rays for this raycaster. Priority Priority of the caster relative to other casters. Sort Order Priority Priority of the raycaster based upon sort order. Render Order Priority Priority of the raycaster based upon render order."
  },
  "api/UnityEngine.EventSystems.IDragHandler.html": {
    "href": "api/UnityEngine.EventSystems.IDragHandler.html",
    "title": "Interface IDragHandler | Unity UI | 1.0.0",
    "keywords": "Interface IDragHandler Namespace : UnityEngine.EventSystems <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public interface IDragHandler : IEventSystemHandler Methods OnDrag(PointerEventData) When dragging is occurring this will be called every time the cursor is moved. Declaration void OnDrag(PointerEventData eventData) Parameters Type Name Description PointerEventData eventData"
  },
  "api/UnityEngine.UI.GraphicRegistry.html": {
    "href": "api/UnityEngine.UI.GraphicRegistry.html",
    "title": "Class GraphicRegistry | Unity UI | 1.0.0",
    "keywords": "Class GraphicRegistry Registry which maps a Graphic to the canvas it belongs to. Inheritance Object GraphicRegistry Namespace : UnityEngine.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class GraphicRegistry Constructors GraphicRegistry() Declaration protected GraphicRegistry() Properties instance The singleton instance of the GraphicRegistry. Creates a new instance if it does not exist. Declaration public static GraphicRegistry instance { get; } Property Value Type Description GraphicRegistry Methods GetGraphicsForCanvas(Canvas) Retrieves the list of Graphics associated with a Canvas. Declaration public static IList<Graphic> GetGraphicsForCanvas(Canvas canvas) Parameters Type Name Description Canvas canvas The Canvas to search Returns Type Description IList < Graphic > Returns a list of Graphics. Returns an empty list if no Graphics are associated with the specified Canvas. RegisterGraphicForCanvas(Canvas, Graphic) Associates a Graphic with a Canvas and stores this association in the registry. Declaration public static void RegisterGraphicForCanvas(Canvas c, Graphic graphic) Parameters Type Name Description Canvas c The canvas being associated with the Graphic. Graphic graphic The Graphic being associated with the Canvas. UnregisterGraphicForCanvas(Canvas, Graphic) Dissociates a Graphic from a Canvas, removing this association from the registry. Declaration public static void UnregisterGraphicForCanvas(Canvas c, Graphic graphic) Parameters Type Name Description Canvas c The Canvas to dissociate from the Graphic. Graphic graphic The Graphic to dissociate from the Canvas."
  },
  "api/UnityEditor.UI.SelfControllerEditor.html": {
    "href": "api/UnityEditor.UI.SelfControllerEditor.html",
    "title": "Class SelfControllerEditor | Unity UI | 1.0.0",
    "keywords": "Class SelfControllerEditor Base class for custom editors that are for components that implement the SelfControllerEditor interface. Inheritance Object SelfControllerEditor AspectRatioFitterEditor ContentSizeFitterEditor Namespace : UnityEditor.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class SelfControllerEditor : Editor Methods OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/UnityEditor.UI.AnimationTriggersDrawer.html": {
    "href": "api/UnityEditor.UI.AnimationTriggersDrawer.html",
    "title": "Class AnimationTriggersDrawer | Unity UI | 1.0.0",
    "keywords": "Class AnimationTriggersDrawer Inheritance Object AnimationTriggersDrawer Namespace : UnityEditor.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class AnimationTriggersDrawer : PropertyDrawer Methods GetPropertyHeight(SerializedProperty, GUIContent) Declaration public override float GetPropertyHeight(SerializedProperty prop, GUIContent label) Parameters Type Name Description SerializedProperty prop GUIContent label Returns Type Description Single OnGUI(Rect, SerializedProperty, GUIContent) Declaration public override void OnGUI(Rect rect, SerializedProperty prop, GUIContent label) Parameters Type Name Description Rect rect SerializedProperty prop GUIContent label"
  },
  "api/UnityEngine.EventSystems.ISelectHandler.html": {
    "href": "api/UnityEngine.EventSystems.ISelectHandler.html",
    "title": "Interface ISelectHandler | Unity UI | 1.0.0",
    "keywords": "Interface ISelectHandler Interface to implement if you wish to receive OnSelect callbacks. Namespace : UnityEngine.EventSystems <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public interface ISelectHandler : IEventSystemHandler Remarks Criteria for this event is implementation dependent. For example see StandAloneInputModule. Methods OnSelect(BaseEventData) Declaration void OnSelect(BaseEventData eventData) Parameters Type Name Description BaseEventData eventData"
  },
  "api/Graphics.RawImageTest.html": {
    "href": "api/Graphics.RawImageTest.html",
    "title": "Class RawImageTest | Unity UI | 1.0.0",
    "keywords": "Class RawImageTest Inheritance Object RawImageTest Namespace : Graphics <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class RawImageTest : IPrebuildSetup Methods Setup() Declaration public void Setup() Sprite_Material() Declaration public IEnumerator Sprite_Material() Returns Type Description IEnumerator TearDown() Declaration public void TearDown() TestSetup() Declaration public void TestSetup()"
  },
  "api/UnityEngine.UI.Scrollbar.Direction.html": {
    "href": "api/UnityEngine.UI.Scrollbar.Direction.html",
    "title": "Enum Scrollbar.Direction | Unity UI | 1.0.0",
    "keywords": "Enum Scrollbar.Direction Setting that indicates one of four directions the scrollbar will travel. Namespace : UnityEngine.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public enum Direction Fields Name Description BottomToTop Starting position is the Bottom. LeftToRight Starting position is the Left. RightToLeft Starting position is the Right TopToBottom Starting position is the Top."
  },
  "api/UnityEngine.EventSystems.EventHandle.html": {
    "href": "api/UnityEngine.EventSystems.EventHandle.html",
    "title": "Enum EventHandle | Unity UI | 1.0.0",
    "keywords": "Enum EventHandle Namespace : UnityEngine.EventSystems <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Flags] public enum EventHandle Fields Name Description Unused Used"
  },
  "api/UnityEditor.UI.html": {
    "href": "api/UnityEditor.UI.html",
    "title": "Namespace UnityEditor.UI | Unity UI | 1.0.0",
    "keywords": "Namespace UnityEditor.UI Classes AnimationTriggersDrawer AspectRatioFitterEditor ButtonEditor CanvasScalerEditor ColorBlockDrawer ContentSizeFitterEditor DropdownEditor FontDataDrawer GraphicEditor Editor class used to edit UI Graphics. Extend this class to write your own graphic editor. GridLayoutGroupEditor HorizontalOrVerticalLayoutGroupEditor ImageEditor Editor class used to edit UI Sprites. InputFieldEditor LayoutElementEditor MaskEditor NavigationDrawer RawImageEditor RectMask2DEditor ScrollbarEditor ScrollRectEditor SelectableEditor SelfControllerEditor Base class for custom editors that are for components that implement the SelfControllerEditor interface. SliderEditor SpriteStateDrawer TextEditor ToggleEditor"
  },
  "api/InputfieldTests.TouchInputFieldTests.html": {
    "href": "api/InputfieldTests.TouchInputFieldTests.html",
    "title": "Class TouchInputFieldTests | Unity UI | 1.0.0",
    "keywords": "Class TouchInputFieldTests Inheritance Object BaseInputFieldTests TouchInputFieldTests Inherited Members BaseInputFieldTests.m_PrefabRoot BaseInputFieldTests.CreateInputFieldAsset(String) Namespace : InputfieldTests <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class TouchInputFieldTests : BaseInputFieldTests, IPrebuildSetup Fields kDefaultInputStr Declaration protected const string kDefaultInputStr = \"foobar\" Field Value Type Description String kPrefabPath Declaration protected const string kPrefabPath = \"Assets/Resources/TouchInputFieldPrefab.prefab\" Field Value Type Description String Methods AssignmentAgainstCharacterLimit(String) Declaration public void AssignmentAgainstCharacterLimit(string text) Parameters Type Name Description String text AssignmentAgainstCharacterLimitWithContentType(String) Declaration public void AssignmentAgainstCharacterLimitWithContentType(string text) Parameters Type Name Description String text AssignsShouldHideInput() Declaration public IEnumerator AssignsShouldHideInput() Returns Type Description IEnumerator FocusOpensTouchScreenKeyboard() Declaration public IEnumerator FocusOpensTouchScreenKeyboard() Returns Type Description IEnumerator HonorsCharacterValidationSettingsAssignment(String, String, InputField.CharacterValidation) Declaration public void HonorsCharacterValidationSettingsAssignment(string input, string output, InputField.CharacterValidation validation) Parameters Type Name Description String input String output InputField.CharacterValidation validation HonorsCharacterValidationSettingsTypingWithSelection(String, String, InputField.CharacterValidation) Declaration public IEnumerator HonorsCharacterValidationSettingsTypingWithSelection(string input, string output, InputField.CharacterValidation validation) Parameters Type Name Description String input String output InputField.CharacterValidation validation Returns Type Description IEnumerator OnetimeTearDown() Declaration public void OnetimeTearDown() SendsEndEditEventOnDeselect() Declaration public IEnumerator SendsEndEditEventOnDeselect() Returns Type Description IEnumerator Setup() Declaration public void Setup() StripsNullCharacters2() Declaration public void StripsNullCharacters2() TearDown() Declaration public void TearDown() TestSetup() Declaration public void TestSetup()"
  },
  "api/UnityEngine.UI.Navigation.Mode.html": {
    "href": "api/UnityEngine.UI.Navigation.Mode.html",
    "title": "Enum Navigation.Mode | Unity UI | 1.0.0",
    "keywords": "Enum Navigation.Mode Namespace : UnityEngine.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Flags] public enum Mode Fields Name Description Automatic Automatic navigation. Explicit Explicit navigation. Horizontal Horizontal Navigation. None No navigation is allowed from this object. Vertical Vertical navigation."
  },
  "api/UnityEngine.EventSystems.AxisEventData.html": {
    "href": "api/UnityEngine.EventSystems.AxisEventData.html",
    "title": "Class AxisEventData | Unity UI | 1.0.0",
    "keywords": "Class AxisEventData Event Data associated with Axis Events (Controller / Keyboard). Inheritance Object AbstractEventData BaseEventData AxisEventData Inherited Members BaseEventData.currentInputModule BaseEventData.selectedObject AbstractEventData.m_Used AbstractEventData.Reset() AbstractEventData.Use() AbstractEventData.used Namespace : UnityEngine.EventSystems <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class AxisEventData : BaseEventData Constructors AxisEventData(EventSystem) Declaration public AxisEventData(EventSystem eventSystem) Parameters Type Name Description EventSystem eventSystem Properties moveDir MoveDirection for this event. Declaration public MoveDirection moveDir { get; set; } Property Value Type Description MoveDirection moveVector Raw input vector associated with this event. Declaration public Vector2 moveVector { get; set; } Property Value Type Description Vector2"
  },
  "api/LayoutTests.html": {
    "href": "api/LayoutTests.html",
    "title": "Namespace LayoutTests | Unity UI | 1.0.0",
    "keywords": "Namespace LayoutTests Classes HorizontalLayoutGroupTests LayoutGroupScaling VerticalLayoutGroupTests"
  },
  "api/UnityEngine.UI.DefaultControls.html": {
    "href": "api/UnityEngine.UI.DefaultControls.html",
    "title": "Class DefaultControls | Unity UI | 1.0.0",
    "keywords": "Class DefaultControls Utility class for creating default implementations of builtin UI controls. Inheritance Object DefaultControls Namespace : UnityEngine.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class DefaultControls Remarks The recommended workflow for using UI controls with the UI system is to create a prefab for each type of control and instantiate those when needed. This way changes can be made to the prefabs which immediately have effect on all used instances. However, in certain cases there can be reasons to create UI controls entirely from code. The DefaultControls class provide methods to create each of the builtin UI controls. The resulting objects are the same as are obtained from using the corresponding UI menu entries in the GameObject menu in the Editor. An example use of this is creating menu items for custom new UI controls that mimics the ones that are builtin in Unity. Some such UI controls may contain other UI controls. For example, a scroll view contains scrollbars.By using the DefaultControls methods to create those parts, it is ensured that they are identical in look and setup to the ones provided in the menu items builtin with Unity. Note that the details of the setup of the UI controls created by the methods in this class may change with later revisions of the UI system.As such, they are not guaranteed to be 100% backwards compatible. It is recommended not to rely on the specific hierarchies of the GameObjects created by these methods, and limit your code to only interface with the root GameObject created by each method. Properties factory Declaration public static DefaultControls.IFactoryControls factory { get; } Property Value Type Description DefaultControls.IFactoryControls Methods CreateButton(DefaultControls.Resources) Create the basic UI button. Declaration public static GameObject CreateButton(DefaultControls.Resources resources) Parameters Type Name Description DefaultControls.Resources resources The resources to use for creation. Returns Type Description GameObject The root GameObject of the created element. Remarks Hierarchy: (root) Button -Text CreateDropdown(DefaultControls.Resources) Create the basic UI dropdown. Declaration public static GameObject CreateDropdown(DefaultControls.Resources resources) Parameters Type Name Description DefaultControls.Resources resources The resources to use for creation. Returns Type Description GameObject The root GameObject of the created element. Remarks Hierarchy: (root) Dropdown Label Arrow Template Viewport Content Item Item Background Item Checkmark Item Label Scrollbar Sliding Area Handle CreateImage(DefaultControls.Resources) Create the basic UI Image. Declaration public static GameObject CreateImage(DefaultControls.Resources resources) Parameters Type Name Description DefaultControls.Resources resources The resources to use for creation. Returns Type Description GameObject The root GameObject of the created element. Remarks Hierarchy: (root) Image CreateInputField(DefaultControls.Resources) Create the basic UI input field. Declaration public static GameObject CreateInputField(DefaultControls.Resources resources) Parameters Type Name Description DefaultControls.Resources resources The resources to use for creation. Returns Type Description GameObject The root GameObject of the created element. Remarks Hierarchy: (root) InputField PlaceHolder Text CreatePanel(DefaultControls.Resources) Create the basic UI Panel. Declaration public static GameObject CreatePanel(DefaultControls.Resources resources) Parameters Type Name Description DefaultControls.Resources resources The resources to use for creation. Returns Type Description GameObject The root GameObject of the created element. Remarks Hierarchy: (root) Image CreateRawImage(DefaultControls.Resources) Create the basic UI RawImage. Declaration public static GameObject CreateRawImage(DefaultControls.Resources resources) Parameters Type Name Description DefaultControls.Resources resources The resources to use for creation. Returns Type Description GameObject The root GameObject of the created element. Remarks Hierarchy: (root) RawImage CreateScrollbar(DefaultControls.Resources) Create the basic UI Scrollbar. Declaration public static GameObject CreateScrollbar(DefaultControls.Resources resources) Parameters Type Name Description DefaultControls.Resources resources The resources to use for creation. Returns Type Description GameObject The root GameObject of the created element. Remarks Hierarchy: (root) Scrollbar Sliding Area Handle CreateScrollView(DefaultControls.Resources) Create the basic UI Scrollview. Declaration public static GameObject CreateScrollView(DefaultControls.Resources resources) Parameters Type Name Description DefaultControls.Resources resources The resources to use for creation. Returns Type Description GameObject The root GameObject of the created element. Remarks Hierarchy: (root) Scrollview Viewport Content Scrollbar Horizontal Sliding Area Handle Scrollbar Vertical Sliding Area Handle CreateSlider(DefaultControls.Resources) Create the basic UI Slider. Declaration public static GameObject CreateSlider(DefaultControls.Resources resources) Parameters Type Name Description DefaultControls.Resources resources The resources to use for creation. Returns Type Description GameObject The root GameObject of the created element. Remarks Hierarchy: (root) Slider Background Fill Area Fill Handle Slide Area Handle CreateText(DefaultControls.Resources) Create the basic UI Text. Declaration public static GameObject CreateText(DefaultControls.Resources resources) Parameters Type Name Description DefaultControls.Resources resources The resources to use for creation. Returns Type Description GameObject The root GameObject of the created element. Remarks Hierarchy: (root) Text CreateToggle(DefaultControls.Resources) Create the basic UI Toggle. Declaration public static GameObject CreateToggle(DefaultControls.Resources resources) Parameters Type Name Description DefaultControls.Resources resources The resources to use for creation. Returns Type Description GameObject The root GameObject of the created element. Remarks Hierarchy: (root) Toggle Background Checkmark Label"
  },
  "api/UnityEngine.UI.VerticalLayoutGroup.html": {
    "href": "api/UnityEngine.UI.VerticalLayoutGroup.html",
    "title": "Class VerticalLayoutGroup | Unity UI | 1.0.0",
    "keywords": "Class VerticalLayoutGroup Inheritance Object UIBehaviour LayoutGroup HorizontalOrVerticalLayoutGroup VerticalLayoutGroup Inherited Members HorizontalOrVerticalLayoutGroup.m_Spacing HorizontalOrVerticalLayoutGroup.spacing HorizontalOrVerticalLayoutGroup.m_ChildForceExpandWidth HorizontalOrVerticalLayoutGroup.childForceExpandWidth HorizontalOrVerticalLayoutGroup.m_ChildForceExpandHeight HorizontalOrVerticalLayoutGroup.childForceExpandHeight HorizontalOrVerticalLayoutGroup.m_ChildControlWidth HorizontalOrVerticalLayoutGroup.childControlWidth HorizontalOrVerticalLayoutGroup.m_ChildControlHeight HorizontalOrVerticalLayoutGroup.childControlHeight HorizontalOrVerticalLayoutGroup.m_ChildScaleWidth HorizontalOrVerticalLayoutGroup.childScaleWidth HorizontalOrVerticalLayoutGroup.m_ChildScaleHeight HorizontalOrVerticalLayoutGroup.childScaleHeight HorizontalOrVerticalLayoutGroup.reverseArrangement HorizontalOrVerticalLayoutGroup.m_ReverseArrangement HorizontalOrVerticalLayoutGroup.CalcAlongAxis(Int32, Boolean) HorizontalOrVerticalLayoutGroup.SetChildrenAlongAxis(Int32, Boolean) LayoutGroup.m_Padding LayoutGroup.padding LayoutGroup.m_ChildAlignment LayoutGroup.childAlignment LayoutGroup.rectTransform LayoutGroup.m_Tracker LayoutGroup.rectChildren LayoutGroup.minWidth LayoutGroup.preferredWidth LayoutGroup.flexibleWidth LayoutGroup.minHeight LayoutGroup.preferredHeight LayoutGroup.flexibleHeight LayoutGroup.layoutPriority LayoutGroup.OnEnable() LayoutGroup.OnDisable() LayoutGroup.OnDidApplyAnimationProperties() LayoutGroup.GetTotalMinSize(Int32) LayoutGroup.GetTotalPreferredSize(Int32) LayoutGroup.GetTotalFlexibleSize(Int32) LayoutGroup.GetStartOffset(Int32, Single) LayoutGroup.GetAlignmentOnAxis(Int32) LayoutGroup.SetLayoutInputForAxis(Single, Single, Single, Int32) LayoutGroup.SetChildAlongAxis(RectTransform, Int32, Single) LayoutGroup.SetChildAlongAxisWithScale(RectTransform, Int32, Single, Single) LayoutGroup.SetChildAlongAxis(RectTransform, Int32, Single, Single) LayoutGroup.SetChildAlongAxisWithScale(RectTransform, Int32, Single, Single, Single) LayoutGroup.OnRectTransformDimensionsChange() LayoutGroup.OnTransformChildrenChanged() LayoutGroup.SetProperty<T>(T, T) LayoutGroup.SetDirty() UIBehaviour.Awake() UIBehaviour.Start() UIBehaviour.OnDestroy() UIBehaviour.IsActive() UIBehaviour.OnBeforeTransformParentChanged() UIBehaviour.OnTransformParentChanged() UIBehaviour.OnCanvasGroupChanged() UIBehaviour.OnCanvasHierarchyChanged() UIBehaviour.IsDestroyed() Namespace : UnityEngine.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class VerticalLayoutGroup : HorizontalOrVerticalLayoutGroup, ILayoutElement, ILayoutGroup, ILayoutController Constructors VerticalLayoutGroup() Declaration protected VerticalLayoutGroup() Methods CalculateLayoutInputHorizontal() Called by the layout system. Also see ILayoutElement Declaration public override void CalculateLayoutInputHorizontal() Overrides LayoutGroup.CalculateLayoutInputHorizontal() CalculateLayoutInputVertical() Called by the layout system. Also see ILayoutElement Declaration public override void CalculateLayoutInputVertical() Overrides LayoutGroup.CalculateLayoutInputVertical() SetLayoutHorizontal() Called by the layout system. Also see ILayoutElement Declaration public override void SetLayoutHorizontal() Overrides LayoutGroup.SetLayoutHorizontal() SetLayoutVertical() Called by the layout system. Also see ILayoutElement Declaration public override void SetLayoutVertical() Overrides LayoutGroup.SetLayoutVertical() Extension Methods UIBehaviourExtensions.InvokeOnEnable(UIBehaviour) UIBehaviourExtensions.InvokeOnDisable(UIBehaviour) UIBehaviourExtensions.InvokeAwake(UIBehaviour) UIBehaviourExtensions.InvokeRebuild(UIBehaviour, CanvasUpdate) UIBehaviourExtensions.InvokeLateUpdate(UIBehaviour) UIBehaviourExtensions.InvokeUpdate(UIBehaviour) UIBehaviourExtensions.InvokeOnRectTransformDimensionsChange(UIBehaviour) UIBehaviourExtensions.InvokeOnCanvasGroupChanged(UIBehaviour) UIBehaviourExtensions.InvokeOnDidApplyAnimationProperties(UIBehaviour)"
  },
  "api/UnityEngine.UI.Tests.GraphicRaycasterExtension.html": {
    "href": "api/UnityEngine.UI.Tests.GraphicRaycasterExtension.html",
    "title": "Class GraphicRaycasterExtension | Unity UI | 1.0.0",
    "keywords": "Class GraphicRaycasterExtension Inheritance Object GraphicRaycasterExtension Namespace : UnityEngine.UI.Tests <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class GraphicRaycasterExtension Methods InvokeRaycast(Canvas, Camera, Vector2, List<Graphic>) Declaration public static void InvokeRaycast(Canvas canvas, Camera eventCamera, Vector2 pointerPosition, List<Graphic> results) Parameters Type Name Description Canvas canvas Camera eventCamera Vector2 pointerPosition List < Graphic > results"
  },
  "manual/MessagingSystem.html": {
    "href": "manual/MessagingSystem.html",
    "title": "Messaging System | Unity UI | 1.0.0",
    "keywords": "Messaging System The new UI system uses a messaging system designed to replace SendMessage. The system is pure C# and aims to address some of the issues present with SendMessage. The system works using custom interfaces that can be implemented on a MonoBehaviour to indicate that the component is capable of receiving a callback from the messaging system. When the call is made a target GameObject is specified; the call will be issued on all components of the GameObject that implement the specified interface that the call is to be issued against. The messaging system allows for custom user data to be passed, as well as how far through the GameObject hierarchy the event should propagate; that is should it just execute for the specified GameObject, or should it also execute on children and parents. In addition to this the messaging framework provides helper functions to search for and find GameObjects that implement a given messaging interface. The messaging system is generic and designed for use not just by the UI system but also by general game code. It is relatively trivial to add custom messaging events and they will work using the same framework that the UI system uses for all event handling. Defining A Custom Message If you wish to define a custom message it is relatively simple. In the UnityEngine.EventSystems namespace there is a base interface called 'IEventSystemHandler'. Anything that extends from this can be considered as a target for receiving events via the messaging system. public interface ICustomMessageTarget : IEventSystemHandler { // functions that can be called via the messaging system void Message1(); void Message2(); } Once this interface is defined then it can be implemented by a MonoBehaviour. When implemented it defines the functions that will be executed if the given message is issued against this MonoBehaviours GameObject. public class CustomMessageTarget : MonoBehaviour, ICustomMessageTarget { public void Message1() { Debug.Log (\"Message 1 received\"); } public void Message2() { Debug.Log (\"Message 2 received\"); } } Now that a script exists that can receive the message we need to issue the message. Normally this would be in response to some loosely coupled event that occurs. For example, in the UI system we issue events for such things as PointerEnter and PointerExit, as well as a variety of other things that can happen in response to user input into the application. To send a message a static helper class exists to do this. As arguments it requires a target object for the message, some user specific data, and a functor that maps to the specific function in the message interface you wish to target. ExecuteEvents.Execute<ICustomMessageTarget>(target, null, (x,y)=>x.Message1()); This code will execute the function Message1 on any components on the GameObject target that implement the ICustomMessageTarget interface. The scripting documentation for the ExecuteEvents class covers other forms of the Execute functions, such as Executing in children or in parents."
  },
  "api/UnityEditor.UI.RawImageEditor.html": {
    "href": "api/UnityEditor.UI.RawImageEditor.html",
    "title": "Class RawImageEditor | Unity UI | 1.0.0",
    "keywords": "Class RawImageEditor Inheritance Object GraphicEditor RawImageEditor Inherited Members GraphicEditor.m_Script GraphicEditor.m_Color GraphicEditor.m_Material GraphicEditor.m_RaycastTarget GraphicEditor.m_RaycastPadding GraphicEditor.m_ShowNativeSize GraphicEditor.OnDisable() GraphicEditor.SetShowNativeSize(Boolean, Boolean) GraphicEditor.NativeSizeButtonGUI() GraphicEditor.AppearanceControlsGUI() GraphicEditor.RaycastControlsGUI() Namespace : UnityEditor.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class RawImageEditor : GraphicEditor Methods GetInfoString() Info String drawn at the bottom of the Preview Declaration public override string GetInfoString() Returns Type Description String HasPreviewGUI() Allow the texture to be previewed. Declaration public override bool HasPreviewGUI() Returns Type Description Boolean OnEnable() Declaration protected override void OnEnable() Overrides GraphicEditor.OnEnable() OnInspectorGUI() Declaration public override void OnInspectorGUI() Overrides GraphicEditor.OnInspectorGUI() OnPreviewGUI(Rect, GUIStyle) Draw the Image preview. Declaration public override void OnPreviewGUI(Rect rect, GUIStyle background) Parameters Type Name Description Rect rect GUIStyle background"
  },
  "api/UnityEditor.UI.CanvasScalerEditor.html": {
    "href": "api/UnityEditor.UI.CanvasScalerEditor.html",
    "title": "Class CanvasScalerEditor | Unity UI | 1.0.0",
    "keywords": "Class CanvasScalerEditor Inheritance Object CanvasScalerEditor Namespace : UnityEditor.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class CanvasScalerEditor : Editor Methods OnEnable() Declaration protected virtual void OnEnable() OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/Graphics.RectMask2DWithNestedCanvasCullsUsingCorrectCanvasRect.html": {
    "href": "api/Graphics.RectMask2DWithNestedCanvasCullsUsingCorrectCanvasRect.html",
    "title": "Class RectMask2DWithNestedCanvasCullsUsingCorrectCanvasRect | Unity UI | 1.0.0",
    "keywords": "Class RectMask2DWithNestedCanvasCullsUsingCorrectCanvasRect Inheritance Object RectMask2DWithNestedCanvasCullsUsingCorrectCanvasRect Namespace : Graphics <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class RectMask2DWithNestedCanvasCullsUsingCorrectCanvasRect Methods RectMask2DShouldNotCullImagesWithCanvas() Declaration public IEnumerator RectMask2DShouldNotCullImagesWithCanvas() Returns Type Description IEnumerator TearDown() Declaration public void TearDown() TestSetup() Declaration public void TestSetup()"
  },
  "api/UnityEditor.UI.NavigationDrawer.html": {
    "href": "api/UnityEditor.UI.NavigationDrawer.html",
    "title": "Class NavigationDrawer | Unity UI | 1.0.0",
    "keywords": "Class NavigationDrawer Inheritance Object NavigationDrawer Namespace : UnityEditor.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class NavigationDrawer : PropertyDrawer Methods GetPropertyHeight(SerializedProperty, GUIContent) Declaration public override float GetPropertyHeight(SerializedProperty prop, GUIContent label) Parameters Type Name Description SerializedProperty prop GUIContent label Returns Type Description Single OnGUI(Rect, SerializedProperty, GUIContent) Declaration public override void OnGUI(Rect pos, SerializedProperty prop, GUIContent label) Parameters Type Name Description Rect pos SerializedProperty prop GUIContent label"
  },
  "api/UnityEditor.UI.FontDataDrawer.html": {
    "href": "api/UnityEditor.UI.FontDataDrawer.html",
    "title": "Class FontDataDrawer | Unity UI | 1.0.0",
    "keywords": "Class FontDataDrawer Inheritance Object FontDataDrawer Namespace : UnityEditor.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class FontDataDrawer : PropertyDrawer Methods GetPropertyHeight(SerializedProperty, GUIContent) Declaration public override float GetPropertyHeight(SerializedProperty property, GUIContent label) Parameters Type Name Description SerializedProperty property GUIContent label Returns Type Description Single Init(SerializedProperty) Declaration protected void Init(SerializedProperty property) Parameters Type Name Description SerializedProperty property OnGUI(Rect, SerializedProperty, GUIContent) Declaration public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description Rect position SerializedProperty property GUIContent label"
  },
  "api/UnityEngine.UI.ILayoutIgnorer.html": {
    "href": "api/UnityEngine.UI.ILayoutIgnorer.html",
    "title": "Interface ILayoutIgnorer | Unity UI | 1.0.0",
    "keywords": "Interface ILayoutIgnorer A RectTransform will be ignored by the layout system if it has a component which implements ILayoutIgnorer. Namespace : UnityEngine.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public interface ILayoutIgnorer Remarks A components that implements ILayoutIgnorer can be used to make a parent layout group component not consider this RectTransform part of the group. The RectTransform can then be manually positioned despite being a child GameObject of a layout group. Properties ignoreLayout Should this RectTransform be ignored bvy the layout system? Declaration bool ignoreLayout { get; } Property Value Type Description Boolean Remarks Setting this property to true will make a parent layout group component not consider this RectTransform part of the group. The RectTransform can then be manually positioned despite being a child GameObject of a layout group."
  },
  "api/UnityEngine.UI.Clipping.html": {
    "href": "api/UnityEngine.UI.Clipping.html",
    "title": "Class Clipping | Unity UI | 1.0.0",
    "keywords": "Class Clipping Utility class to help when clipping using IClipper. Inheritance Object Clipping Namespace : UnityEngine.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class Clipping Methods FindCullAndClipWorldRect(List<RectMask2D>, out Boolean) Find the Rect to use for clipping. Given the input RectMask2ds find a rectangle that is the overlap of all the inputs. Declaration public static Rect FindCullAndClipWorldRect(List<RectMask2D> rectMaskParents, out bool validRect) Parameters Type Name Description List < RectMask2D > rectMaskParents RectMasks to build the overlap rect from. Boolean validRect Was there a valid Rect found. Returns Type Description Rect The final compounded overlapping rect"
  },
  "api/UnityEngine.EventSystems.IPointerEnterHandler.html": {
    "href": "api/UnityEngine.EventSystems.IPointerEnterHandler.html",
    "title": "Interface IPointerEnterHandler | Unity UI | 1.0.0",
    "keywords": "Interface IPointerEnterHandler Interface to implement if you wish to receive OnPointerEnter callbacks. Namespace : UnityEngine.EventSystems <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public interface IPointerEnterHandler : IEventSystemHandler Remarks Criteria for this event is implementation dependent. For example see StandAloneInputModule. Methods OnPointerEnter(PointerEventData) Use this callback to detect pointer enter events Declaration void OnPointerEnter(PointerEventData eventData) Parameters Type Name Description PointerEventData eventData"
  },
  "api/UnityEngine.EventSystems.RaycastResult.html": {
    "href": "api/UnityEngine.EventSystems.RaycastResult.html",
    "title": "Struct RaycastResult | Unity UI | 1.0.0",
    "keywords": "Struct RaycastResult A hit result from a BaseRaycaster. Namespace : UnityEngine.EventSystems <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct RaycastResult Fields depth Used by raycasters where elements may have the same unit distance, but have specific ordering. Declaration public int depth Field Value Type Description Int32 displayIndex The display index from which the raycast was generated. Declaration public int displayIndex Field Value Type Description Int32 distance Distance to the hit. Declaration public float distance Field Value Type Description Single index Hit index Declaration public float index Field Value Type Description Single module BaseRaycaster that raised the hit. Declaration public BaseRaycaster module Field Value Type Description BaseRaycaster screenPosition The screen position from which the raycast was generated. Declaration public Vector2 screenPosition Field Value Type Description Vector2 sortingLayer The SortingLayer of the hit object. Declaration public int sortingLayer Field Value Type Description Int32 Remarks For UI.Graphic elements this will be the values from that graphic's Canvas For 3D objects this will always be 0. For 2D objects if a 2D Renderer (Sprite, Tilemap, SpriteShape) is attached to the same object as the hit collider that sortingLayerID will be used. sortingOrder The SortingOrder for the hit object. Declaration public int sortingOrder Field Value Type Description Int32 Remarks For Graphic elements this will be the values from that graphics Canvas For 3D objects this will always be 0. For 2D objects if a 2D Renderer (Sprite, Tilemap, SpriteShape) is attached to the same object as the hit collider that sortingOrder will be used. worldNormal The normal at the hit location of the raycast. Declaration public Vector3 worldNormal Field Value Type Description Vector3 worldPosition The world position of the where the raycast has hit. Declaration public Vector3 worldPosition Field Value Type Description Vector3 Properties gameObject The GameObject that was hit by the raycast. Declaration public GameObject gameObject { get; set; } Property Value Type Description GameObject isValid Is there an associated module and a hit GameObject. Declaration public bool isValid { get; } Property Value Type Description Boolean Methods Clear() Reset the result. Declaration public void Clear() ToString() Declaration public override string ToString() Returns Type Description String Overrides ValueType.ToString()"
  },
  "api/UnityEngine.UI.IClipper.html": {
    "href": "api/UnityEngine.UI.IClipper.html",
    "title": "Interface IClipper | Unity UI | 1.0.0",
    "keywords": "Interface IClipper Interface that can be used to recieve clipping callbacks as part of the canvas update loop. Namespace : UnityEngine.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public interface IClipper Methods PerformClipping() Function to to cull / clip children elements. Declaration void PerformClipping() Remarks Called after layout and before Graphic update of the Canvas update loop."
  },
  "api/UnityEngine.UI.BaseMeshEffect.html": {
    "href": "api/UnityEngine.UI.BaseMeshEffect.html",
    "title": "Class BaseMeshEffect | Unity UI | 1.0.0",
    "keywords": "Class BaseMeshEffect Inheritance Object UIBehaviour BaseMeshEffect PositionAsUV1 Shadow Inherited Members UIBehaviour.Awake() UIBehaviour.Start() UIBehaviour.OnDestroy() UIBehaviour.IsActive() UIBehaviour.OnRectTransformDimensionsChange() UIBehaviour.OnBeforeTransformParentChanged() UIBehaviour.OnTransformParentChanged() UIBehaviour.OnCanvasGroupChanged() UIBehaviour.OnCanvasHierarchyChanged() UIBehaviour.IsDestroyed() Namespace : UnityEngine.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public abstract class BaseMeshEffect : UIBehaviour, IMeshModifier Properties graphic The graphic component that the Mesh Effect will aplly to. Declaration protected Graphic graphic { get; } Property Value Type Description Graphic Methods ModifyMesh(Mesh) Function that is called when the Graphic is populating the mesh. Declaration public virtual void ModifyMesh(Mesh mesh) Parameters Type Name Description Mesh mesh The generated mesh of the Graphic element that needs modification. Implements IMeshModifier.ModifyMesh(Mesh) ModifyMesh(VertexHelper) Declaration public abstract void ModifyMesh(VertexHelper vh) Parameters Type Name Description VertexHelper vh Implements IMeshModifier.ModifyMesh(VertexHelper) OnDidApplyAnimationProperties() Called from the native side any time a animation property is changed. Declaration protected override void OnDidApplyAnimationProperties() Overrides UIBehaviour.OnDidApplyAnimationProperties() OnDisable() Declaration protected override void OnDisable() Overrides UIBehaviour.OnDisable() OnEnable() Declaration protected override void OnEnable() Overrides UIBehaviour.OnEnable() Extension Methods UIBehaviourExtensions.InvokeOnEnable(UIBehaviour) UIBehaviourExtensions.InvokeOnDisable(UIBehaviour) UIBehaviourExtensions.InvokeAwake(UIBehaviour) UIBehaviourExtensions.InvokeRebuild(UIBehaviour, CanvasUpdate) UIBehaviourExtensions.InvokeLateUpdate(UIBehaviour) UIBehaviourExtensions.InvokeUpdate(UIBehaviour) UIBehaviourExtensions.InvokeOnRectTransformDimensionsChange(UIBehaviour) UIBehaviourExtensions.InvokeOnCanvasGroupChanged(UIBehaviour) UIBehaviourExtensions.InvokeOnDidApplyAnimationProperties(UIBehaviour)"
  },
  "api/UnityEditor.UI.MaskEditor.html": {
    "href": "api/UnityEditor.UI.MaskEditor.html",
    "title": "Class MaskEditor | Unity UI | 1.0.0",
    "keywords": "Class MaskEditor Inheritance Object MaskEditor Namespace : UnityEditor.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class MaskEditor : Editor Methods OnEnable() Declaration protected virtual void OnEnable() OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/UnityEditor.UI.DropdownEditor.html": {
    "href": "api/UnityEditor.UI.DropdownEditor.html",
    "title": "Class DropdownEditor | Unity UI | 1.0.0",
    "keywords": "Class DropdownEditor Inheritance Object SelectableEditor DropdownEditor Inherited Members SelectableEditor.OnDisable() Namespace : UnityEditor.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class DropdownEditor : SelectableEditor Methods OnEnable() Declaration protected override void OnEnable() Overrides SelectableEditor.OnEnable() OnInspectorGUI() Declaration public override void OnInspectorGUI() Overrides SelectableEditor.OnInspectorGUI()"
  },
  "api/UnityEngine.UI.Image.OriginHorizontal.html": {
    "href": "api/UnityEngine.UI.Image.OriginHorizontal.html",
    "title": "Enum Image.OriginHorizontal | Unity UI | 1.0.0",
    "keywords": "Enum Image.OriginHorizontal Origin for the Image.FillMethod.Horizontal. Namespace : UnityEngine.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public enum OriginHorizontal Fields Name Description Left Origin at the Left side. Right Origin at the Right side."
  },
  "api/UnityEngine.UI.ICanvasElement.html": {
    "href": "api/UnityEngine.UI.ICanvasElement.html",
    "title": "Interface ICanvasElement | Unity UI | 1.0.0",
    "keywords": "Interface ICanvasElement This is an element that can live on a Canvas. Namespace : UnityEngine.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public interface ICanvasElement Properties transform Get the transform associated with the ICanvasElement. Declaration Transform transform { get; } Property Value Type Description Transform Methods GraphicUpdateComplete() Callback sent when this ICanvasElement has completed Graphic rebuild. Declaration void GraphicUpdateComplete() IsDestroyed() Used if the native representation has been destroyed. Declaration bool IsDestroyed() Returns Type Description Boolean Return true if the element is considered destroyed. LayoutComplete() Callback sent when this ICanvasElement has completed layout. Declaration void LayoutComplete() Rebuild(CanvasUpdate) Rebuild the element for the given stage. Declaration void Rebuild(CanvasUpdate executing) Parameters Type Name Description CanvasUpdate executing The current CanvasUpdate stage being rebuild."
  },
  "api/UnityEngine.UI.Dropdown.DropdownItem.html": {
    "href": "api/UnityEngine.UI.Dropdown.DropdownItem.html",
    "title": "Class Dropdown.DropdownItem | Unity UI | 1.0.0",
    "keywords": "Class Dropdown.DropdownItem Inheritance Object Dropdown.DropdownItem Namespace : UnityEngine.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax protected class DropdownItem : MonoBehaviour, IPointerEnterHandler, ICancelHandler, IEventSystemHandler Properties image Declaration public Image image { get; set; } Property Value Type Description Image rectTransform Declaration public RectTransform rectTransform { get; set; } Property Value Type Description RectTransform text Declaration public Text text { get; set; } Property Value Type Description Text toggle Declaration public Toggle toggle { get; set; } Property Value Type Description Toggle Methods OnCancel(BaseEventData) Declaration public virtual void OnCancel(BaseEventData eventData) Parameters Type Name Description BaseEventData eventData Implements ICancelHandler.OnCancel(BaseEventData) OnPointerEnter(PointerEventData) Declaration public virtual void OnPointerEnter(PointerEventData eventData) Parameters Type Name Description PointerEventData eventData Implements IPointerEnterHandler.OnPointerEnter(PointerEventData)"
  },
  "api/UnityEngine.UI.Button.ButtonClickedEvent.html": {
    "href": "api/UnityEngine.UI.Button.ButtonClickedEvent.html",
    "title": "Class Button.ButtonClickedEvent | Unity UI | 1.0.0",
    "keywords": "Class Button.ButtonClickedEvent Inheritance Object Button.ButtonClickedEvent Namespace : UnityEngine.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] public class ButtonClickedEvent : UnityEvent"
  },
  "api/UnityEditor.EventSystems.EventTriggerEditor.html": {
    "href": "api/UnityEditor.EventSystems.EventTriggerEditor.html",
    "title": "Class EventTriggerEditor | Unity UI | 1.0.0",
    "keywords": "Class EventTriggerEditor Inheritance Object EventTriggerEditor Namespace : UnityEditor.EventSystems <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class EventTriggerEditor : Editor Methods OnEnable() Declaration protected virtual void OnEnable() OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "manual/script-PositionAsUV1.html": {
    "href": "manual/script-PositionAsUV1.html",
    "title": "Position as UV1 | Unity UI | 1.0.0",
    "keywords": "Position as UV1 This adds a simple Position as UV1 effect to text and image graphics. Properties Property: Function: Script"
  },
  "manual/script-EventTrigger.html": {
    "href": "manual/script-EventTrigger.html",
    "title": "Event Trigger | Unity UI | 1.0.0",
    "keywords": "Event Trigger The Event Trigger receives events from the Event System and calls registered functions for each event. The Event Trigger can be used to specify functions you wish to be called for each Event System event. You can assign multiple functions to a single event and whenever the Event Trigger receives that event it will call those functions. Note that attaching an Event Trigger component to a GameObject will make that object intercept all events, and no event bubbling will occur from this object! Events Each of the Supported Events can optionally be included in the Event Trigger by clicking the Add New Event Type button."
  },
  "manual/comp-UIAutoLayout.html": {
    "href": "manual/comp-UIAutoLayout.html",
    "title": "Auto Layout | Unity UI | 1.0.0",
    "keywords": "Auto Layout The auto layout system provides ways to place elements in nested layout groups such as horizontal groups, vertical groups, or grids. It also allows elements to automatically be sized according to the contained content. Content Size Fitter Layout Element Horizontal Layout Group Vertical Layout Group Grid Layout Group"
  },
  "manual/class-Canvas.html": {
    "href": "manual/class-Canvas.html",
    "title": "Canvas | Unity UI | 1.0.0",
    "keywords": "Canvas The Canvas component represents the abstract space in which the UI is laid out and rendered. All UI elements must be children of a GameObject that has a Canvas component attached. When you create a UI element object from the menu ( GameObject > Create UI ), a Canvas object will be created automatically if there isn't one in the scene already. Properties Property: Function: Render Mode The way the UI is rendered to the screen or as an object in 3D space (see below). The options are Screen Space - Overlay , Screen Space - Camera and World Space . Pixel Perfect ( Screen Space modes only) Should the UI be rendered without antialiasing for precision? Render Camera ( Screen Space - Camera mode only) The camera to which the UI should be rendered (see below). Plane Distance ( Screen Space - Camera mode only) The distance at which the UI plane should be placed in front of the camera. Event Camera ( World Space mode only) The camera that will be used to process UI events. Receives Events Are UI events processed by this Canvas? Details A single Canvas for all UI elements is sufficient but multiple Canvases in the scene is possible. It is also possible use nested Canvases, where one Canvas is placed as a child of another for optimization purposes. A nested Canvas uses the same Render Mode as its parent. Traditionally, UIs are rendered as if they were simple graphic designs drawn directly on the screen. That is to say, they have no concept of a 3D space being viewed by a camera. Unity supports this kind of screen space rendering but also allows UIs to rendered as objects in the scene, depending on the value of the Render Mode property. The modes available are Screen Space - Overlay , Screen Space - Camera and World Space . Screen Space - Overlay In this mode, the Canvas is scaled to fit the screen and then rendered directly without reference to the scene or a camera (the UI will be rendered even if there is no camera in the scene at all). If the screen's size or resolution are changed then the UI will automatically rescale to fit. The UI will be drawn over any other graphics such as the camera view. Note: The Screen Space - Overlay canvas needs to be stored at the top level of the hierarchy. If this is not used then the UI may disappear from the view. This is a built-in limitation. Keep the Screen Space - Overlay canvas at the top level of the hierarchy to get expected results. Screen Space - Camera In this mode, the Canvas is rendered as if it were drawn on a plane object some distance in front of a given camera. The onscreen size of the UI does not vary with the distance since it is always rescaled to fit exactly within the camera frustum . If the screen's size or resolution or the camera frustum are changed then the UI will automatically rescale to fit. Any 3D objects in the scene that are closer to the camera than the UI plane will be rendered in front of the UI, while objects behind the plane will be obscured. World Space This mode renders the UI as if it were a plane object in the scene. Unlike Screen Space - Camera mode, however, the plane need not face the camera and can be oriented however you like. The size of the Canvas can be set using its Rect Transform but its onscreen size will depend on the viewing angle and distance of the camera. Other scene objects can pass behind, through or in front of the Canvas. Hints Read more about setting up a World Space Canvas on the Creating a World Space UI page. For information about making your Canvas and UI scale to different resolutions or aspect ratios, see the Designing UI for Multiple Resolutions page as well as the Canvas Scaler page."
  },
  "manual/StyledText.html": {
    "href": "manual/StyledText.html",
    "title": "Rich Text | Unity UI | 1.0.0",
    "keywords": "Rich Text The text for UI elements and text meshes can incorporate multiple font styles and sizes. Rich text is supported both for the UI System and the legacy GUI system. The Text, GUIStyle, GUIText and TextMesh classes have a Rich Text setting which instructs Unity to look for markup tags within the text. The Debug.Log function can also use these markup tags to enhance error reports from code. The tags are not displayed but indicate style changes to be applied to the text. Markup format The markup system is inspired by HTML but isn't intended to be strictly compatible with standard HTML. The basic idea is that a section of text can be enclosed inside a pair of matching tags:- We are <b>not</b> amused. As the example shows, the tags are just pieces of text inside the \"angle bracket\" characters, < and > . You place the opening tag at the beginning of the section. The text inside the tag denotes its name (which in this case is just b ). You place another tag at the end of the section. This is the closing tag. It has the same name as the opening tag, but the name is prefixed with a slash / character. Every opening tag must have a corresponding closing tag. If you don't close an opening tag, it is rendered as regular text. The tags are not displayed to the user directly but are interpreted as instructions for styling the text they enclose. The b tag used in the example above applies boldface to the word \"not\", so the text appears ons creen as:- We are not amused A marked up section of text (including the tags that enclose it) is referred to as an element . Nested elements It is possible to apply more than one style to a section of text by \"nesting\" one element inside another We are <b><i>definitely not</i></b> amused The <i> tag applies italic style, so this would be presented onscreen as We are definitely not amused Note the ordering of the closing tags, which is in reverse to that of the opening tags. The reason for this is perhaps clearer when you consider that the inner tags need not span the whole text of the outermost element We are <b>absolutely <i>definitely</i> not</b> amused which gives We are absolutely definitely not amused Tag parameters Some tags have a simple all-or-nothing effect on the text but others might allow for variations. For example, the color tag needs to know which color to apply. Information like this is added to tags by the use of parameters :- We are <color=green>green</color> with envy Which produces this result: Note that the ending tag doesn't include the parameter value. Optionally, the value can be surrounded by quotation marks but this isn't required. Tag parameters cannot include blank spaces. For example: We are <color = green>green</color> with envy does not work because of the spaces to either side of the = character. Supported tags The following list describes all the styling tags supported by Unity. Tag Description Example Notes b Renders the text in boldface. We are <b>not</b> amused. i Renders the text in italics. We are <i>usually</i> not amused. size Sets the size of the text according to the parameter value, given in pixels. We are <size=50>largely</size> unaffected. Although this tag is available for Debug.Log, you will find that the line spacing in the window bar and Console looks strange if the size is set too large. color Sets the color of the text according to the parameter value. The color can be specified in the traditional HTML format. #rrggbbaa ...where the letters correspond to pairs of hexadecimal digits denoting the red, green, blue and alpha (transparency) values for the color. For example, cyan at full opacity would be specified by color=#00ffffff ... You can specify hexadecimal values in uppercase or lowercase; #FF0000 is equivalent to #ff0000 . We are <color=#ff0000ff>colorfully</color> amused Another option is to use the name of the color. This is easier to understand but naturally, the range of colors is limited and full opacity is always assumed. <color=cyan>some text</color> The available color names are given in the table below . material This is only useful for text meshes and renders a section of text with a material specified by the parameter. The value is an index into the text mesh's array of materials as shown by the inspector. We are <material=2>texturally</material> amused quad This is only useful for text meshes and renders an image inline with the text. It takes parameters that specify the material to use for the image, the image height in pixels, and a further four that denote a rectangular area of the image to display. Unlike the other tags, quad does not surround a piece of text and so there is no ending tag - the slash character is placed at the end of the initial tag to indicate that it is \"self-closing\". <quad material=1 size=20 x=0.1 y=0.1 width=0.5 height=0.5> This selects the material at position in the renderer's material array and sets the height of the image to 20 pixels. The rectangular area of image starts at given by the x, y, width and height values, which are all given as a fraction of the unscaled width and height of the texture. Supported colors The following table lists colors for which you can use a name instead of a hexadecimal tag in the <color> rich text tag. Color name Hex value Swatch aqua (same as cyan) #00ffffff black #000000ff blue #0000ffff brown #a52a2aff cyan (same as aqua) #00ffffff darkblue #0000a0ff fuchsia (same as magenta) #ff00ffff green #008000ff grey #808080ff lightblue #add8e6ff lime #00ff00ff magenta (same as fuchsia) #ff00ffff maroon #800000ff navy #000080ff olive #808000ff orange #ffa500ff purple #800080ff red #ff0000ff silver #c0c0c0ff teal #008080ff white #ffffffff yellow #ffff00ff Editor GUI Rich text is disabled by default in the editor GUI system but it can be enabled explicitly using a custom GUIStyle . The richText property should be set to true and the style passed to the GUI function in question: GUIStyle style = new GUIStyle (); style.richText = true; GUILayout.Label(\"<size=30>Some <color=yellow>RICH</color> text</size>\",style);"
  },
  "manual/Raycasters.html": {
    "href": "manual/Raycasters.html",
    "title": "Raycasters | Unity UI | 1.0.0",
    "keywords": "Raycasters The Event System needs a method for detecting where current input events need to be sent to, and this is provided by the Raycasters. Given a screen space position they will collect all potential targets, figure out if they are under the given position, and then return the object that is closest to the screen. There are a few types of Raycasters that are provided: Graphic Raycaster - Used for UI elements, lives on a Canvas and searches within the canvas Physics 2D Raycaster - Used for 2D physics elements Physics Raycaster - Used for 3D physics elements When a Raycaster is present and enabled in the scene it will be used by the Event System whenever a query is issued from an Input Module. If multiple Raycasters are used then they will all have casting happen against them and the results will be sorted based on distance to the elements."
  },
  "manual/comp-CanvasComponents.html": {
    "href": "manual/comp-CanvasComponents.html",
    "title": "Canvas Components | Unity UI | 1.0.0",
    "keywords": "Canvas Components All UI Components are placed within a Canvas . Canvas Canvas Scaler Canvas Group Canvas Renderer"
  },
  "manual/script-Mask.html": {
    "href": "manual/script-Mask.html",
    "title": "Mask | Unity UI | 1.0.0",
    "keywords": "Mask A Mask is not a visible UI control but rather a way to modify the appearance of a control's child elements. The mask restricts (ie, \"masks\") the child elements to the shape of the parent. So, if the child is larger than the parent then only the part of the child that fits within the parent will be visible. Properties Property: Function: Show Graphic Should the graphic of the masking (parent) object be drawn with alpha over the child object? Description A common use of a Mask is to show a small section of a large Image, using say a Panel object (menu: GameObject > Create UI > Panel ) as a \"frame\". You can achieve this by firstly making the Image a child of the Panel object. You should position the Image so that the area that should be visible is directly behind the Panel area. Then, add a Mask component to the Panel. The areas of the child Image outside the panel will become invisible since they are masked by the shape of the Panel. If the image is then moved around then only the part revealed by the Panel will be visible. The movement could be controlled by Scrollbars to create a scrollable viewer for a map, say. Implementation Masking is implemented using the stencil buffer of the GPU. *The first Mask element writes a 1 to the stencil buffer *All elements below the mask check when rendering, and only render to areas where there is a 1 in the stencil buffer *Nested Masks will write incremental bit masks into the buffer, this means that renderable children need to have the logical & of the stencil values to be rendered."
  },
  "manual/script-GridLayoutGroup.html": {
    "href": "manual/script-GridLayoutGroup.html",
    "title": "Grid Layout Group | Unity UI | 1.0.0",
    "keywords": "Grid Layout Group The Grid Layout Group component places its child layout elements in a grid. Properties Property: Function: Padding The padding inside the edges of the layout group. Cell Size The size to use for each layout element in the group. Spacing The spacing between the layout elements. Start Corner The corner where the first element is located. Start Axis Which primary axis to place elements along. Horizontal will fill an entire row before a new row is started. Vertical will fill an entire column before a new column is started. Child Alignment The alignment to use for the layout elements if they don't fill out all the available space. Constraint Constraint the grid to a fixed number of rows or columns to aid the auto layout system. Description Unlike other layout groups, the Grid Layout Group ignores the minimum, preferred, and flexible size properties of its contained layout elements and instead assigns a fixed size to all of them which is defined with the Cell Size property of the Grid Layout Group itself. Grid Layout Group and auto layout There are special considerations to be aware of when using the Grid Layout Group as part of an auto layout setup, such as using it with a Content Size Fitter . The auto layout system calculates the horizontal and vertical sizes independently. This can be at odds with the Grid Layout Group, where the number of rows depends on the number of columns and vice versa. For any given number of cells, there are different combinations of row count and column count that can make the grid fit its content. In order to aid the layout system, you can specify that you intent the table to have a fixed number of columns or rows by using the Constraint property. Here are suggested ways of using the Layout System with a Content Size Fitter: Flexible width and fixed height To setup a grid with a flexible width and fixed height, where the grid expands horizontally as more elements are added, you can set these properties as follows: Grid Layout Group Constraint: Fixed Row Count Content Size Fitter Horizontal Fit: Preferred Size Content Size Fitter Vertical Fit: Preferred Size or Unconstrained If unconstrained Vertical Fit is used, it's up to you to give the grid a height that is big enough to fit the specified row count of cells. Fixed width and flexible height To setup a grid with a fixed width and flexible height, where the grid expands vertically as more elements are added, you can set these properties as follows: Grid Layout Group Constraint: Fixed Column Count Content Size Fitter Horizontal Fit: Preferred Size or Unconstrained Content Size Fitter Vertical Fit: Preferred Size If unconstrained Horizontal Fit is used, it's up to you to give the grid a width that is big enough to fit the specified column count of cells. Both flexible width and height If you want a grid with both a flexible width and height you can do that, but you will have no control over the specific number of rows and columns. The grid will attempt to make the row and column count approximately the same. You can set these properties as follows: Grid Layout Group Constraint: Flexible Content Size Fitter Horizontal Fit: Preferred Size Content Size Fitter Vertical Fit: Preferred Size"
  },
  "manual/comp-UIInteraction.html": {
    "href": "manual/comp-UIInteraction.html",
    "title": "Interaction Components | Unity UI | 1.0.0",
    "keywords": "Interaction Components The interaction components in the UI system handle interaction, such as mouse or touch events and interaction using a keyboard or controller. Selectable Base Class Button Toggle Toggle Group Slider Scrollbar Scroll Rect InputField"
  },
  "manual/class-CanvasRenderer.html": {
    "href": "manual/class-CanvasRenderer.html",
    "title": "Canvas Renderer | Unity UI | 1.0.0",
    "keywords": "Canvas Renderer The Canvas Renderer component renders a graphical UI object contained within a Canvas . Properties The Canvas Renderer has no properties exposed in the inspector. Details The standard UI objects available from the menu ( GameObject > Create UI ) all have Canvas Renderers attached wherever they are required but you may need to add this component manually for custom UI objects. Although there are no properties exposed in the inspector, a few properties and function can be accessed from scripts - see the CanvasRenderer page in the Script Reference for full details."
  },
  "manual/index.html": {
    "href": "manual/index.html",
    "title": "Unity UI: Unity User Interface | Unity UI | 1.0.0",
    "keywords": "Unity UI: Unity User Interface Unity UI is a UI toolkit for developing user interfaces for games and applications. It is a GameObject-based UI system that uses Components and the Game View to arrange, position, and style user interfaces. ​ You cannot use Unity UI to create or change user interfaces in the Unity Editor. This documentation describes Unity UI features such as creating a Canvas, positioning and animating elements, defining user interactions, and sizing layouts automatically."
  },
  "manual/HOWTO-UIWorldSpace.html": {
    "href": "manual/HOWTO-UIWorldSpace.html",
    "title": "Creating a World Space UI | Unity UI | 1.0.0",
    "keywords": "Creating a World Space UI The UI system makes it easy to create UI that is positioned in the world among other 2D or 3D objects in the Scene. Start by creating a UI element (such as an Image) if you don't already have one in your scene by using GameObject > UI > Image. This will also create a Canvas for you. Set the Canvas to World Space Select your Canvas and change the Render Mode to World Space. Now your Canvas is already positioned in the World and can be seen by all cameras if they are pointed at it, but it is probably huge compared to other objects in your Scene. We'll get back to that. Decide on a resolution First you need to decide what the resolution of the Canvas should be. If it was an image, what should the pixel resolution of the image be? Something like 800x600 might be a good starting point. You enter the resolution in the Width and Height values of the Rect Transform of the Canvas. It's probably a good idea to set the position to 0,0 at the same time. Specify the size of the Canvas in the world Now you should consider how big the Canvas should be in the world. You can use the Scale tool to simply scale it down until it has a size that looks good, or you can decide how big it should be in meters. If you want it to have a specific width in meters, you can can calculate the needed scale by using meter_size / canvas_width. For example, if you want it to be 2 meters wide and the Canvas width is 800, you would have 2 / 800 = 0.0025. You then set the Scale property of the Rect Transform on the Canvas to 0.0025 for both X, Y, and Z in order to ensure that it's uniformly scaled. Another way to think of it is that you are controlling the size of one pixel in the Canvas. If the Canvas is scaled by 0.0025, then that is also the size in the world of each pixel in the Canvas. Position the Canvas Unlike a Canvas set to Screen Space, a World Space Canvas can be freely positioned and rotated in the Scene. You can put a Canvas on any wall, floor, ceiling, or slanted surface (or hanging freely in the air of course). Just use the normal Translate and Rotate tools in the toolbar. Create the UI Now you can begin setting up your UI elements and layouts the same way you would with a Screen Space Canvas."
  },
  "manual/UIHowTos.html": {
    "href": "manual/UIHowTos.html",
    "title": "UI How Tos | Unity UI | 1.0.0",
    "keywords": "UI How Tos In this section you can learn about solutions to common UI tasks."
  },
  "manual/script-InputField.html": {
    "href": "manual/script-InputField.html",
    "title": "Input Field | Unity UI | 1.0.0",
    "keywords": "Input Field An Input Field is a way to make the text of a Text Control editable. Like the other interaction controls, it's not a visible UI element in itself and must be combined with one or more visual UI elements in order to be visible. Properties Property: Function: * Interactable * A boolean that determines if the Input Field can be interacted with or not. |* Transition * || Transitions are used to set how the input field transitions when Normal , Highlighted , Pressed or Disabled . | |* Navigation * || Properties that determine the sequence of controls. See Navigation Options .| |* TextComponent * ||A reference to the Text element used as the contents of the Input Field | |* Text * ||Starting Value. The initial text placed in the field before editing begins. | |* Character Limit * ||The value of the maximum number of characters that can be entered into the input field.| |* Content Type * ||Define the type(s) of characters that your input field accepts| | | Standard |Any character can be entered.| | | Autocorrected |The autocorrection determines whether the input tracks unknown words and suggests a more suitable replacement candidate to the user, replacing the typed text automatically unless the user explicitly overrides the action.| | | Integer Number |Allow only whole numbers to be entered.| | | Decimal Number |Allow only numbers and a single decimal point to be entered.| | | Alphanumeric |Allow both letters and numbers. Symbols cannot be entered.| | | Name |Automatically capitalizes the first letter of each word. Note that the user can circumvent the capitalization rules using the Delete key.| | | Email Address |Allows you to enter an Alphanumeric string consisting of a maximum of one @ sign. periods/baseline dots cannot be entered next to each other. | | | Password * |Conceals the characters inputed with an asterisk. Allows symbols.| | | Pin |Conceals the characters inputed with an asterisk. Only allows only whole numbers to be entered.| | | Custom |Allows you to customise the Line Type, Input Type, Keyboard Type and Character Validation.| |* Line Type * ||Defines how text is formatted inside the text field.| | | Single Line |Only allows text to be on a single line.| | | Multi Line Submit |Allows text to use multiple lines. Only uses a new line when needed.| | | Multi Line Newline |Allows text to use multiple lines. User can use a newline by pressing the return key.| |* Placeholder * ||This is an optional ‘empty’ Graphic to show that the Input Field is empty of text. Note that this ‘empty' graphic still displays even when the Input Field is selected (that is; when there is focus on it). eg; \"Enter text...\".| |* Caret Blink Rate * ||Defines the blink rate for the mark placed on the line to indicate a proposed insertion of text.| |* Selection Color * ||The background color of the selected portion of text.| |* Hide Mobile Input * (iOS only) ||Hides the native input field attached to the onscreen keyboard on mobile devices. Note that this only works on iOS devices.| | | | | Events Property: Function: On Value Change A UnityEvent that is invoked when the text content of the Input Field changes. The event can send the current text content as a string type dynamic argument. End Edit A UnityEvent that is invoked when the user finishes editing the text content either by submitting or by clicking somewhere that removes the focus from the Input Field. The event can send the current text content as a string type dynamic argument. Details The Input Field script can be added to any existing Text control object from the menu ( Component > UI > Input Field ). Having done this, you should also drag the object to the Input Field's Text property to enable editing. The Text property of the Text control itself will change as the user types and the value can be retrieved from a script after editing. Note that Rich Text is intentionally not supported for editable Text controls; the field will apply any Rich Text markup instantly when typed but the markup essentially \"disappears\" and there is no subsequent way to change or remove the styling. Hints To obtain the text of the Input Field, use the text property on the InputField component itself, not the text property of the Text component that displays the text. The text property of the Text component may be cropped or may consist of asterisks for passwords."
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "| Unity UI | 1.0.0",
    "keywords": "This is the documentation for the Scripting APIs of this package."
  },
  "manual/script-Button.html": {
    "href": "manual/script-Button.html",
    "title": "Button | Unity UI | 1.0.0",
    "keywords": "Button The Button control responds to a click from the user and is used to initiate or confirm an action. Familiar examples include the Submit and Cancel buttons used on web forms. Properties Property: Function: Interactable Enable Interactable if you want this button to accept input. See API documentation on Interactable for more details. Transition Properties that determine the way the control responds visually to user actions. See Transition Options . Navigation Properties that determine the sequence of controls. See Navigation Options . Events Property: Function: On Click A UnityEvent that Unity invokes when a user clicks the button and releases it. Details The button is designed to initiate an action when the user clicks and releases it. If the mouse is moved off the button control before the click is released, the action does not take place. The button has a single event called On Click that responds when the user completes a click. Typical use cases include: Confirming a decision (eg, starting gameplay or saving a game) Moving to a sub-menu in a GUI Cancelling an action in progress (eg, downloading a new scene)"
  },
  "manual/HOWTO-UIScreenTransition.html": {
    "href": "manual/HOWTO-UIScreenTransition.html",
    "title": "Creating Screen Transitions | Unity UI | 1.0.0",
    "keywords": "Creating Screen Transitions The need to transition between multiple UI screens is fairly common. In this page we will explore a simple way to create and manage those transitions using animation and State Machines to drive and control each screen. Overview The high-level idea is that each of our screens will have an Animator Controller with two states (Open and Closed) and a boolean Parameter (Open). To transition between screens you will only need to close the currently open Screen and open the desired one. To make this process easier we will create a small Class ScreenManager that will keep track and take care of closing any already open Screen for us. The button that triggers the transition will only have to ask the ScreenManager to open the desired screen. Thinking about Navigation If you plan to support controller/keyboard navigation of UI elements, then it's important to have a few things in mind. It's important to avoid having Selectable elements outside the screen since that would enable players to select offscreen elements, we can do that by deactivating any off-screen hierarchy. We also need to make sure when a new screen is shown we set a element from it as selected, otherwise the player would not be able to navigate to the new screen. We will take care of all that in the ScreenManager class below. Setting up the Animator Controller Let's take a look at the most common and minimal setup for the Animation Controller to do a Screen transition. The controller will need a boolean parameter (Open) and two states (Open and Closed), each state should have an animation with only one keyframe, this way we let the State Machine do the transition blending for us. Now we need to create the transition between both states, let's start with the transition from Open to Closed and let's set the condition properly, we want to go from Open to Closed when the parameter Open is set to false. Now we create the transition from Closed to Open and set the condition to go from Closed to Open when the parameter Open is true. Managing the screens With all the above set up, the only thing missing is for us to set the parameter Open to true on the screens Animator we want to transition to and Open to false on the currently open screens Animator. To do that, we will create a small script: using UnityEngine; using UnityEngine.UI; using UnityEngine.EventSystems; using System.Collections; using System.Collections.Generic; public class ScreenManager : MonoBehaviour { //Screen to open automatically at the start of the Scene public Animator initiallyOpen; //Currently Open Screen private Animator m_Open; //Hash of the parameter we use to control the transitions. private int m_OpenParameterId; //The GameObject Selected before we opened the current Screen. //Used when closing a Screen, so we can go back to the button that opened it. private GameObject m_PreviouslySelected; //Animator State and Transition names we need to check against. const string k_OpenTransitionName = \"Open\"; const string k_ClosedStateName = \"Closed\"; public void OnEnable() { //We cache the Hash to the \"Open\" Parameter, so we can feed to Animator.SetBool. m_OpenParameterId = Animator.StringToHash (k_OpenTransitionName); //If set, open the initial Screen now. if (initiallyOpen == null) return; OpenPanel(initiallyOpen); } //Closes the currently open panel and opens the provided one. //It also takes care of handling the navigation, setting the new Selected element. public void OpenPanel (Animator anim) { if (m_Open == anim) return; //Activate the new Screen hierarchy so we can animate it. anim.gameObject.SetActive(true); //Save the currently selected button that was used to open this Screen. (CloseCurrent will modify it) var newPreviouslySelected = EventSystem.current.currentSelectedGameObject; //Move the Screen to front. anim.transform.SetAsLastSibling(); CloseCurrent(); m_PreviouslySelected = newPreviouslySelected; //Set the new Screen as then open one. m_Open = anim; //Start the open animation m_Open.SetBool(m_OpenParameterId, true); //Set an element in the new screen as the new Selected one. GameObject go = FindFirstEnabledSelectable(anim.gameObject); SetSelected(go); } //Finds the first Selectable element in the providade hierarchy. static GameObject FindFirstEnabledSelectable (GameObject gameObject) { GameObject go = null; var selectables = gameObject.GetComponentsInChildren<Selectable> (true); foreach (var selectable in selectables) { if (selectable.IsActive () && selectable.IsInteractable ()) { go = selectable.gameObject; break; } } return go; } //Closes the currently open Screen //It also takes care of navigation. //Reverting selection to the Selectable used before opening the current screen. public void CloseCurrent() { if (m_Open == null) return; //Start the close animation. m_Open.SetBool(m_OpenParameterId, false); //Reverting selection to the Selectable used before opening the current screen. SetSelected(m_PreviouslySelected); //Start Coroutine to disable the hierarchy when closing animation finishes. StartCoroutine(DisablePanelDeleyed(m_Open)); //No screen open. m_Open = null; } //Coroutine that will detect when the Closing animation is finished and it will deactivate the //hierarchy. IEnumerator DisablePanelDeleyed(Animator anim) { bool closedStateReached = false; bool wantToClose = true; while (!closedStateReached && wantToClose) { if (!anim.IsInTransition(0)) closedStateReached = anim.GetCurrentAnimatorStateInfo(0).IsName(k_ClosedStateName); wantToClose = !anim.GetBool(m_OpenParameterId); yield return new WaitForEndOfFrame(); } if (wantToClose) anim.gameObject.SetActive(false); } //Make the provided GameObject selected //When using the mouse/touch we actually want to set it as the previously selected and //set nothing as selected for now. private void SetSelected(GameObject go) { //Select the GameObject. EventSystem.current.SetSelectedGameObject(go); //If we are using the keyboard right now, that's all we need to do. var standaloneInputModule = EventSystem.current.currentInputModule as StandaloneInputModule; if (standaloneInputModule != null) return; //Since we are using a pointer device, we don't want anything selected. //But if the user switches to the keyboard, we want to start the navigation from the provided game object. //So here we set the current Selected to null, so the provided gameObject becomes the Last Selected in the EventSystem. EventSystem.current.SetSelectedGameObject(null); } } Let's hook up this script, we do this by creating a new GameObject, we can rename it \"ScreenManager\" for instance, and add the component above to it. You can assign an initial screen to it, this screen will be open at the start of your scene. Now for the final part, let's make the UI buttons work. Select the button that should trigger the screen transition and add a new action under the On Click () list in the Inspector. Drag the ScreenManager GameObject we just created to the ObjectField, on the dropdown select ScreenManager->OpenPanel (Animator) and drag and drop the panel you want to open when the user clicks the button to the las ObjectField. Notes This technique only requires each screen to have an AnimatorController with an Open parameter and a Closed state to work - it doesn't matter how your screen or State Machine are constructed. This technique also works well with nested screens, meaning you only need one ScreenManager for each nested level. The State Machine we set up above has the default state of Closed, so all of the screens that use this controller start as closed. The ScreenManager provides an initiallyOpen property so you can specify which screen is shown first."
  },
  "manual/HOWTO-UIMultiResolution.html": {
    "href": "manual/HOWTO-UIMultiResolution.html",
    "title": "Designing UI for Multiple Resolutions | Unity UI | 1.0.0",
    "keywords": "Designing UI for Multiple Resolutions Modern games and applications often need to support a wide variety of different screen resolutions and particularly UI layouts need to be able to adapt to that. The UI System in Unity includes a variety of tools for this purpose that can be combined in various ways. In this how-to we're going to use a simple case study and look at and compare the different tools in the context of that. In our case study we have three buttons in the corners of the screen as shown below, and the goal is to adapt this layout to various resolutions. For this how-to we're going to consider four screen resolutions: Phone HD in portrait (640 x 960) and landscape (960 x 640) and Phone SD in portrait (320 x 480) and landscape (480 x 320). The layout is initially setup in the Phone HD Portrait resolution. Using anchors to adapt to different aspect ratios UI elements are by default anchored to the center of the parent rectangle. This means that they keep a constant offset from the center. If the resolution is changed to a landscape aspect ratio with this setup, the buttons may not even be inside the rectangle of the screen anymore. One way to keep the buttons inside the screen is to change the layout such that the locations of the buttons are tied to their respective corners of the screen. The anchors of the top left button can be set to the upper left corner using the Anchors Preset drop down in the Inspector, or by dragging the triangular anchor handles in the Scene View. It's best to do this while the current screen resolution set in the Game View is the one the layout is initially designed for, where the button placement looks correct. (See the UI Basic Layout page for more information on anchors.) Similarly, the anchors for the lower left and lower right buttons can be set to the lower left corner and lower right corner, respectively. Once the buttons have been anchored to their respective corners, they stick to them when changing the resolution to a different aspect ratio. When the screen size is changed to a larger or smaller resolution, the buttons will also remain anchored to their respective corners. However, since they keep their original size as specified in pixels, they may take up a larger or smaller proportion of the screen. This may or may not be desirable, depending on how you would like your layout to behave on screens of different resolutions. In this how-to, we know that the smaller resolutions of Phone SD Portrait and Landscape don't correspond to screens that are physically smaller, but rather just screens with a lower pixel density. On these lower-density screens the buttons shouldn't appear larger than on the high-density screens - they should instead appear with the same size. This means that the buttons should become smaller by the same percentage as the screen is smaller. In other words, the scale of the buttons should follow the screen size. This is where the Canvas Scaler component can help. Scaling with Screen Size The Canvas Scaler component can be added to a root Canvas - a Game Object with a Canvas component on it, which all the UI elements are children of. It is also added by default when creating a new Canvas through the GameObject menu. In the Canvas Scaler component, you can set its UI Scale Mode to Scale With Screen Size . With this scale mode you can specify a resolution to use as reference. If the current screen resolution is smaller or larger than this reference resolution, the scale factor of the Canvas is set accordingly, so all the UI elements are scaled up or down together with the screen resolution. In our case, we set the Canvas Scaler to be the Phone HD portrait resolution of 640 x 960. Now, when setting the screen resolution to the Phone SD portrait resolution of 320 x 480, the entire layout is scaled down so it appears proportionally the same as in full resolution. Everything is scaled down: The button sizes, their distances to the edges of the screen, the button graphics, and the text elements. This means that the layout will appear the same in the Phone SD portrait resolution as in Phone HD portrait; only with a lower pixel density. One thing to be aware of: After adding a Canvas Scaler component, it's important to also check how the layout looks at other aspect ratios. By setting the resolution back to Phone HD landscape, we can see that the buttons now appear bigger than they should (and used to). The reason for the larger buttons in landscape aspect ratio comes down to how the Canvas Scaler setting works. By default it compares the width or the current resolution with the width of the Canvas Scaler and the result is used as the scale factor to scale everything with. Since the current landscape resolution of 960 x 640 has a 1.5 times larger width than the portrait Canvas Scaler of 640 x 960, the layout is scaled up by 1.5. The component has a property called Match which can be 0 (Width), 1 (Height) or a value in between. By default it's set to 0, which compares the current screen width with the Canvas Scaler width as described. If the Match property is set to 0.5 instead, it will compare both the current width to the reference width and the current height to the reference height, and choose a scale factor that's in between the two. Since in this case the landscape resolution is 1.5 times wider but also 1.5 times shorter, those two factor even out and produce a final scale factor of 1, which means the buttons keep their original size. At this point the layout supports all the four screen resolutions using a combination of appropriate anchoring and the Canvas Scaler component on the Canvas. See the Canvas Scaler reference page for more information on different ways to scale UI elements in relation to different screen sizes."
  },
  "manual/comp-UIVisual.html": {
    "href": "manual/comp-UIVisual.html",
    "title": "Visual Components | Unity UI | 1.0.0",
    "keywords": "Visual Components The visual components allow for ease of creation and GUI specific functionality. Text Image Raw Image Mask"
  },
  "manual/script-Image.html": {
    "href": "manual/script-Image.html",
    "title": "Image | Unity UI | 1.0.0",
    "keywords": "Image The Image control displays a non-interactive image to the user. You can use this for purposes such as decorations or icons, and you can change the image from a script to reflect changes in other controls. The control is similar to the Raw Image control, but offers more options for animating the image and accurately filling the control rectangle. However, the Image control requires its Texture to be a Sprite , while the Raw Image can accept any Texture. Properties Property: Function: Source Image The Texture that represents the image to display (which must be imported as a Sprite ). Color The color to apply to the image. Material The Material to use for rendering the image. Raycast Target Enable Raycast Target if you want Unity to consider the image a target for raycasting. Preserve Aspect Ensure the image retains its existing dimension. Set Native Size Set the dimensions of the image box to the original pixel size of the Texture. You must import the image to display as a Sprite to work with the Image control."
  },
  "manual/script-HorizontalLayoutGroup.html": {
    "href": "manual/script-HorizontalLayoutGroup.html",
    "title": "Horizontal Layout Group | Unity UI | 1.0.0",
    "keywords": "Horizontal Layout Group The Horizontal Layout Group component places its child layout elements next to each other, side by side. Their widths are determined by their respective minimum, preferred, and flexible widths according to the following model: The minimum widths of all the child layout elements are added together and the spacing between them is added as well. The result is the mimimum width of the Horizontal Layout Group. The preferred widths of all the child layout elements are added together and the spacing between them is added as well. The result is the preferred width of the Horizontal Layout Group. If the Horizontal Layout Group is at its minimum width or smaller, all the child layout elements will also have their minimum width. The closer the Horizontal Layout group is to its preferred width, the closer each child layout element will also get to their preferred width. If the Horizontal Layout Group is wider than its preferred width, it will distribute the extra available space proportionally to the child layout elements according to their respective flexible widths. For more information about minimum, preferred, and flexible width, see the documentation on Auto Layout . Properties Property: Function: Padding The padding inside the edges of the layout group. Spacing The spacing between the layout elements. Child Alignment The alignment to use for the child layout elements if they don't fill out all the available space. Control Child Size Whether the Layout Group controls the width and height of its child layout elements. Use Child Scale Whether the Layout Group considers the scale of its child layout elements when sizing and laying out elements. Width and Height correspond to the Scale > X and Scale > Y values in each child layout element's Rect Transform component. Child Force Expand Whether to force the child layout elements to expand to fill additional available space."
  },
  "manual/script-Text.html": {
    "href": "manual/script-Text.html",
    "title": "Text | Unity UI | 1.0.0",
    "keywords": "Text The Text control displays a non-interactive piece of text to the user. This can be used to provide captions or labels for other GUI controls or to display instructions or other text. Properties Property: Function: Text The text displayed by the control. Character Font The Font used to display the text. Font Style The style applied to the text. The options are Normal , Bold , Italic and Bold And Italic . Font Size The size of the displayed text. Line Spacing The vertical separation between lines of text. Rich Text Should markup elements in the text be interpreted as Rich Text styling? Paragraph Alignment The horizontal and vertical alignment of the text. Align by Geometry Use the extents of glyph geometry to perform horizontal alignment rather than glyph metrics. Horizontal Overflow The method used to handle the situation where the text is too wide to fit in the rectangle. The options are Wrap and Overflow . Vertical Overflow The method used to handle the situation where wrapped text is too tall to fit in the rectangle. The options are Truncate and Overflow . Best Fit Should Unity ignore the size properties and simply try to fit the text to the control's rectangle? Color The color used to render the text. Material The Material used to render the text. A default text element looks like this: Details Some controls (such as Buttons and Toggles ) have textual descriptions built-in. For controls that have no implicit text (such as Sliders ), you can indicate the purpose using a label created with a Text control. Text is also useful for lists of instructions, story text, conversations and legal disclaimers. The Text control offers the usual parameters for font size, style, etc, and text alignment. When the Rich Text option is enabled, markup elements within the text will be treated as styling information, so you can have just a single word or short section in boldface or in a different color, say (see the page about Rich Text for details of the markup scheme). Hints See the Effects page for how to apply a simple shadow or outline effect to the text."
  },
  "manual/script-StandaloneInputModule.html": {
    "href": "manual/script-StandaloneInputModule.html",
    "title": "Standalone Input Module | Unity UI | 1.0.0",
    "keywords": "Standalone Input Module The module is designed to work as you would expect a controller / mouse input to work. Events for button presses, dragging, and similar are sent in response to input. The module sends pointer events to components as a mouse / input device is moved around, and uses the Graphics Raycaster and Physics Raycaster to calculate which element is currently pointed at by a given pointer device. You can configure these raycasters to detect or ignore parts of your Scene, to suit your requirements. The module sends move events and submit / cancel events in response to Input tracked via the Input window. This works for both keyboard and controller input. The tracked axis and keys can be configured in the module's inspector. Properties Property: Function: Horizontal Axis Type the desired manager name for the horizontal axis button. Vertical Axis Type the desired manager name for the vertical axis. Submit Button Type the desired manager name for the Submit button. Cancel Button Type the desired manager name for the Cancel button. Input Actions Per Second Number of keyboard/controller inputs allowed per second. Repeat Delay Delay in seconds before the input actions per second repeat rate takes effect. Force Module Active Enable this property to force this Standalone Input Module to be active. Details The module uses: Vertical / Horizontal axis for keyboard and controller navigation Submit / Cancel button for sending submit and cancel events Has a timeout between events to only allow a maximum number of events a second. The flow for the module is as follows Send a Move event to the selected object if a valid axis from the Input window is entered Send a submit or cancel event to the selected object if a submit or cancel button is pressed Process Mouse input If it is a new press Send PointerEnter event (sent to every object up the hierarchy that can handle it) Send PointerPress event Cache the drag handler (first element in the hierarchy that can handle it) Send BeginDrag event to the drag handler Set the 'Pressed' object as Selected in the event system If this is a continuing press Process movment Send DragEvent to the cached drag handler Handle PointerEnter and PointerExit events if touch moves between objects If this is a release Send PointerUp event to the object that received the PointerPress If the current hover object is the same as the PointerPress object send a PointerClick event Send a Drop event if there was a drag handler cached Send a EndDrag event to the cached drag handler Process scroll wheel events"
  },
  "manual/script-EventSystem.html": {
    "href": "manual/script-EventSystem.html",
    "title": "Event System Manager | Unity UI | 1.0.0",
    "keywords": "Event System Manager This subsystem is responsible for controlling all the other elements that make up eventing. It coordinates which Input Module is currently active, which GameObject is currently considered 'selected', and a host of other high level Event System concepts. Each 'Update' the Event System receives the call, looks through its Input Modules and figures out which is the Input Module that should be used for this tick. It then delegates the processing to the modules. Properties Property: Function: First Selected The GameObject that was selected first. Send Navigation Events Should the EventSystem allow navigation events (move / submit / cancel). Drag Threshold The soft area for dragging in pixels. Beneath the Properties table is the \"Add Default Input Modules\" button."
  },
  "manual/EventSystemReference.html": {
    "href": "manual/EventSystemReference.html",
    "title": "Event System Reference | Unity UI | 1.0.0",
    "keywords": "Event System Reference This section provides details about the following parts of the event system: Event System Manager Graphic Raycaster Physics Raycaster Physics2D Raycaster Standalone Input Module Touch Input Module Event Trigger"
  },
  "manual/EventSystem.html": {
    "href": "manual/EventSystem.html",
    "title": "Event System | Unity UI | 1.0.0",
    "keywords": "Event System The Event System is a way of sending events to objects in the application based on input, be it keyboard, mouse, touch, or custom input. The Event System consists of a few components that work together to send events. When you add an Event System component to a GameObject you will notice that it does not have much functionality exposed, this is because the Event System itself is designed as a manager and facilitator of communication between Event System modules. The primary roles of the Event System are as follows: Manage which GameObject is considered selected Manage which Input Module is in use Manage Raycasting (if required) Updating all Input Modules as required Input Modules An Input Module is where the main logic of how you want the Event System to behave lives, they are used for: Handling Input Managing event state Sending events to scene objects. Only one Input Module can be active in the Event System at a time, and they must be components on the same GameObject as the Event System component. If you want to write a custom Input Module, send events supported by existing UI components in Unity. To extend and write your own events, see the Messaging System documentation. Raycasters Raycasters are used for figuring out what the pointer is over. It is common for Input Modules to use the Raycasters configured in the Scene to calculate what the pointing device is over. There are 3 provided Raycasters that exist by default: Graphic Raycaster - Used for UI elements Physics 2D Raycaster - Used for 2D physics elements Physics Raycaster - Used for 3D physics elements If you have a 2d / 3d Raycaster configured in your Scene, it is easy to make non-UI elements receive messages from the Input Module. Simply attach a script that implements one of the event interfaces. For examples of this, see the IPointerEnterHandler and IPointerClickHandler Scripting Reference pages."
  },
  "manual/script-Toggle.html": {
    "href": "manual/script-Toggle.html",
    "title": "Toggle | Unity UI | 1.0.0",
    "keywords": "Toggle The Toggle control is a checkbox that allows the user to switch an option on or off. Properties Property: Function: Interactable Will this component will accept input? See Interactable . Transition Properties that determine the way the control responds visually to user actions. See Transition Options . Navigation Properties that determine the sequence of controls. See Navigation Options . Is On Is the toggle switched on from the beginning? Toggle Transition The way the toggle reacts graphically when its value is changed. The options are None (ie, the checkmark simply appears or disappears) and Fade (ie, the checkmark fades in or out). Graphic The image used for the checkmark. Group The Toggle Group (if any) that this Toggle belongs to. Events Property: Function: On Value Changed A UnityEvent that is invoked when the Toggle is clicked. The event can send the current state as a bool type dynamic argument. Details The Toggle control allows the user to switch an option on or off. You can also combine several toggles into a Toggle Group in cases where only one of a set of options should be on at once. The Toggle has a single event called On Value Changed that responds when the user changes the current value. The new value is passed to the event function as a boolean parameter. Typical use cases for Toggles include: Switching an option on or off (eg, playing music during a game). Letting the user confirm they have read a legal disclaimer. Choosing one of a set of options (eg, a day of the week) when used in a Toggle Group. Note that the Toggle is a parent that provides a clickable area to children. If the Toggle has no children (or they are disabled) then it is not clickable."
  },
  "manual/script-RawImage.html": {
    "href": "manual/script-RawImage.html",
    "title": "Raw Image | Unity UI | 1.0.0",
    "keywords": "Raw Image The Raw Image control displays a non-interactive image to the user. You can use this for purposes such as decorations or icons, and you can change the image from a script to reflect changes in other controls. The control is similar to the Image control, but offers more options for animating the image and accurately filling the control rectangle. However, the Image control requires its Texture to be a Sprite , while the Raw Image can accept any Texture. Properties Property: Function: Texture The texture that represents the image to display. Color The color to apply to the image. Material The Material to use for rendering the image. Raycast Target Enable Raycast Target if you want Unity to consider the image a target for raycasting. UV Rectangle The image's offset and size within the control rectangle, given in normalized coordinates (range 0.0 to 1.0). The edges of the image are stretched to fill the space around the UV rectangle. Details Since the Raw Image does not require a sprite texture, you can use it to display any texture available to the Unity player. For example, you might show an image downloaded from a URL using the WWW class or a texture from an object in a game. The UV Rectangle properties allow you to display a small section of a larger image. The X and Y coordinates specify which part of the image is aligned with the bottom left corner of the control. For example, an X coordinate of 0.25 will cut off the leftmost quarter of the image. The W and H (ie, width and height) properties indicate the width and height of the section of image that will be scaled to fit the control rectangle. For example, a width and height of 0.5 will scale a quarter of the image area up to the control rectangle. By changing these properties, you can zoom and scale the image as desired (see also the Scrollbar control)."
  },
  "changelog/CHANGELOG.html": {
    "href": "changelog/CHANGELOG.html",
    "title": "Changelog | Unity UI | 1.0.0",
    "keywords": "Changelog [1.0.0] - 2019-01-08 This is the first release of Unity UI as a built in package."
  },
  "manual/SupportedEvents.html": {
    "href": "manual/SupportedEvents.html",
    "title": "Supported Events | Unity UI | 1.0.0",
    "keywords": "Supported Events The Event System supports a number of events, and they can be customized further in user custom user written Input Modules. The events that are supported by the Standalone Input Module and Touch Input Module are provided by interface and can be implemented on a MonoBehaviour by implementing the interface. If you have a valid Event System configured the events will be called at the correct time. IPointerEnterHandler - OnPointerEnter - Called when a pointer enters the object IPointerExitHandler - OnPointerExit - Called when a pointer exits the object IPointerDownHandler - OnPointerDown - Called when a pointer is pressed on the object IPointerUpHandler - OnPointerUp - Called when a pointer is released (called on the GameObject that the pointer is clicking) IPointerClickHandler - OnPointerClick - Called when a pointer is pressed and released on the same object IInitializePotentialDragHandler - OnInitializePotentialDrag - Called when a drag target is found, can be used to initialize values IBeginDragHandler - OnBeginDrag - Called on the drag object when dragging is about to begin IDragHandler - OnDrag - Called on the drag object when a drag is happening IEndDragHandler - OnEndDrag - Called on the drag object when a drag finishes IDropHandler - OnDrop - Called on the object where a drag finishes IScrollHandler - OnScroll - Called when a mouse wheel scrolls IUpdateSelectedHandler - OnUpdateSelected - Called on the selected object each tick ISelectHandler - OnSelect - Called when the object becomes the selected object IDeselectHandler - OnDeselect - Called on the selected object becomes deselected IMoveHandler - OnMove - Called when a move event occurs (left, right, up, down) ISubmitHandler - OnSubmit - Called when the submit button is pressed ICancelHandler - OnCancel - Called when the cancel button is pressed"
  },
  "manual/script-TouchInputModule.html": {
    "href": "manual/script-TouchInputModule.html",
    "title": "Touch Input Module | Unity UI | 1.0.0",
    "keywords": "Touch Input Module Note: TouchInputModule is obsolete. Touch input is now handled in StandaloneInputModule . This module is designed to work with touch devices. It sends pointer events for touching and dragging in response to user input. The module supports multitouch. The module uses the scene configured Raycasters to calculate what element is currently being touched over. A raycast is issued for each current touch. Properties Property: Function: Force Module Active Forces this module to be active. Details The flow for the module is as follows: For each touch event If it is a new press Send PointerEnter event (sent to every object up the hierarchy that can handle it) Send PointerPress event Cache the drag handler (first element in the hierarchy that can handle it) Send BeginDrag event to the drag handler Set the 'Pressed' object as Selected in the event system If this is a continuing press Process movement Send DragEvent to the cached drag handler Handle PointerEnter and PointerExit events if touch moves between objects If this is a release Send PointerUp event to the object that received the PointerPress If the current hover object is the same as the PointerPress object send a PointerClick event Send a Drop event if there was a drag handler cached Send a EndDrag event to the cached drag handler"
  },
  "manual/script-RectMask2D.html": {
    "href": "manual/script-RectMask2D.html",
    "title": "RectMask2D | Unity UI | 1.0.0",
    "keywords": "RectMask2D A RectMask2D is a masking control similar to the Mask control. The mask restricts the child elements to the rectangle of the parent element. Unlike the standard Mask control it has some limitations, but it also has a number of performance benefits. Description A common use of a RectMask2D is to show small sections of a larger area. Using the RectMask2D to frame this area. The limitations of RectMask2D control are: It only works in 2D space It will not properly mask elements that are not coplanar The advantages of RectMask2D are: It does not use the stencil buffer No extra draw calls No material changes Fast performance"
  },
  "manual/HOWTO-UICreateFromScripting.html": {
    "href": "manual/HOWTO-UICreateFromScripting.html",
    "title": "Creating UI elements from scripting | Unity UI | 1.0.0",
    "keywords": "Creating UI elements from scripting If you are creating a dynamic UI where UI elements appear, disappear, or change based on user actions or other actions in the game, you may need to make a script that instantiates new UI elements based on custom logic. Creating a prefab of the UI element In order to be able to easily instantiate UI elements dynamically, the first step is to create a prefab for the type of UI element that you want to be able to instantiate. Set up the UI element the way you want it to look in the Scene, and then drag the element into the Project View to make it into a prefab. For example, a prefab for a button could be a Game Object with a Image component and a Button component, and a child Game Object with a Text component. Your setup might be different depending on your needs. You might wonder why we don't have a API methods to create the various types of controls, including visuals and everything. The reason is that there are an infinite number of way e.g. a button could be setup. Does it use an image, text, or both? Maybe even multiple images? What is the text font, color, font size, and alignment? What sprite or sprites should the image use? By letting you make a prefab and instantiate that, you can set it up exactly the way you want. And if you later want to change the look and feel of your UI you can just change the prefab and then it will be reflected in your UI, including the dynamically created UI. Instantiating the UI element Prefabs of UI elements are instantiated as normal using the Instantiate method. When setting the parent of the instantiated UI element, it's recommended to do it using the Transform.SetParent method with the worldPositionStays parameter set to false. Positioning the UI element A UI Element is normally positioned using its Rect Transform. If the UI Element is a child of a Layout Group it will be automatically positioned and the positioning step can be skipped. When positioning a Rect Transform it's useful to first determine it has or should have any stretching behavior or not. Stretching behavior happens when the anchorMin and anchorMax properties are not identical. For a non-stretching Rect Transform, the position is set most easily by setting the anchoredPosition and the sizeDelta properties. The anchoredPosition specifies the position of the pivot relative to the anchors. The sizeDelta is just the same as the size when there's no stretching. For a stretching Rect Transform, it can be simpler to set the position using the offsetMin and offsetMax properties. The offsetMin property specifies the corner of the lower left corner of the rect relative to the lower left anchor. The offsetMax property specifies the corner of the upper right corner of the rect relative to the upper right anchor. Customizing the UI Element If you are instantiating multiple UI elements dynamically, it's unlikely that you'll want them all to look the same and do the same. Whether it's buttons in a menu, items in an inventory, or something else, you'll likely want the individual items to have different text or images and to do different things when interacted with. This is done by getting the various components and changing their properties. See the scripting reference for the Image and Text components, and for how to work with UnityEvents from scripting."
  },
  "index.html": {
    "href": "index.html",
    "title": "Home Page. | Unity UI | 1.0.0",
    "keywords": "Home Page. This is the home page for this package."
  },
  "manual/UIAnimationIntegration.html": {
    "href": "manual/UIAnimationIntegration.html",
    "title": "Animation Integration | Unity UI | 1.0.0",
    "keywords": "Animation Integration Animation allows for each transition between control states to be fully animated using Unity's animation system. This is the most powerful of the transition modes due to the number of properties that can be animated simultaneously. To use the Animation transition mode, an Animator Component needs to be attached to the controller element. This can be done automatically by clicking \"Auto Generate Animation\". This also generates an Animator Controller with states already set up, which will need to be saved. The new Animator controller is ready to use straight away. Unlike most Animator Controllers, this controller also stores the animations for the controller's transitions and these can be customised, if desired. For example, if a Button element with an Animator controller attached is selected, the animations for each of the button's states can be edited by opening the Animation window ( Window>Animation ). There is an Animation Clip pop-up menu to select the desired clip. Choose from \"Normal\", \"Highlighted\", \"Pressed\" and \"Disabled\". The Normal State is set by the values on button element itself and can be left empty. On all other states, the most common configuration is a single keyframe at the start of the timeline. The transition animation between states will be handled by the Animator. As an example, the width of the button in the Highlighted State could be changed by selecting the Highlighted state from the Animation Clip pop up menu and with the playhead at the start of the time line: Select the record Button Change the width of the Button in the inspector Exit the record mode. Change to play mode to see how the button grows when highlighted. Any number of properties can have their parameters set in this one keyframe. Several buttons can share the same behaviour by sharing Animator Controllers. The UI Animation transition mode is not compatible with Unity's legacy animation system. You should only use the Animator Component."
  },
  "manual/script-Outline.html": {
    "href": "manual/script-Outline.html",
    "title": "Outline | Unity UI | 1.0.0",
    "keywords": "Outline The Outline component adds a simple outline effect to graphic components such as Text or Image. It must be on the same GameObject as the graphic component. Properties Property: Function: Effect Color The color of the outline. Effect Distance The distance of the outline effect horizontally and vertically. Use Graphic Alpha Multiplies the color of the graphic onto the color of the effect."
  },
  "manual/script-GraphicRaycaster.html": {
    "href": "manual/script-GraphicRaycaster.html",
    "title": "Graphic Raycaster | Unity UI | 1.0.0",
    "keywords": "Graphic Raycaster The Graphic Raycaster is used to raycast against a Canvas. The Raycaster looks at all Graphics on the canvas and determines if any of them have been hit. The Graphic Raycaster can be configured to ignore backfacing Graphics as well as be blocked by 2D or 3D objects that exist in front of it. A manual priority can also be applied if you want processing of this element to be forced to the front or back of the Raycasting. Properties Property: Function: Ignore Reversed Graphics Should graphics facing away from the raycaster be considered? Blocked Objects Type of objects that will block graphic raycasts. Blocking Mask Type of objects that will block graphic raycasts."
  },
  "manual/script-CanvasScaler.html": {
    "href": "manual/script-CanvasScaler.html",
    "title": "Canvas Scaler | Unity UI | 1.0.0",
    "keywords": "Canvas Scaler The Canvas Scaler component is used for controlling the overall scale and pixel density of UI elements in the Canvas. This scaling affects everything under the Canvas, including font sizes and image borders. Properties Property: Function: UI Scale Mode Determines how UI elements in the Canvas are scaled. Constant Pixel Size Makes UI elements retain the same size in pixels regardless of screen size. Scale With Screen Size Makes UI elements bigger the bigger the screen is. Constant Physical Size Makes UI elements retain the same physical size regardless of screen size and resolution. Settings for Constant Pixel Size: Property: Function: Scale Factor Scales all UI elements in the Canvas by this factor. Reference Pixels Per Unit If a sprite has this 'Pixels Per Unit' setting, then one pixel in the sprite will cover one unit in the UI. Settings for Scale With Screen Size: Property: Function: Reference Resolution The resolution the UI layout is designed for. If the screen resolution is larger, the UI will be scaled up, and if it's smaller, the UI will be scaled down. Screen Match Mode A mode used to scale the canvas area if the aspect ratio of the current resolution doesn't fit the reference resolution. Match Width or Height Scale the canvas area with the width as reference, the height as reference, or something in between. Expand Expand the canvas area either horizontally or vertically, so the size of the canvas will never be smaller than the reference. Shrink Crop the canvas area either horizontally or vertically, so the size of the canvas will never be larger than the reference. Match Determines if the scaling is using the width or height as reference, or a mix in between. Reference Pixels Per Unit If a sprite has this 'Pixels Per Unit' setting, then one pixel in the sprite will cover one unit in the UI. Settings for Constant Physical Size: Property: Function: Physical Unit The physical unit to specify positions and sizes in. Fallback Screen DPI The DPI to assume if the screen DPI is not known. Default Sprite DPI The pixels per inch to use for sprites that have a 'Pixels Per Unit' setting that matches the 'Reference Pixels Per Unit' setting. Reference Pixels Per Unit If a sprite has this 'Pixels Per Unit' setting, then its DPI will match the 'Default Sprite DPI' setting. Settings for World Space Canvas (shown when Canvas component is set to World Space): Property: Function: Dynamic Pixels Per Unit The amount of pixels per unit to use for dynamically created bitmaps in the UI, such as Text. Reference Pixels Per Unit If a sprite has this 'Pixels Per Unit' setting, then one pixel in the sprite will cover one unit in the world. If the 'Reference Pixels Per Unit' is set to 1, then the 'Pixels Per Unit' setting in the sprite will be used as-is. Details For a Canvas set to 'Screen Space - Overlay' or 'Screen Space - Camera', the Canvas Scaler UI Scale Mode can be set to Constant Pixel Size, Scale With Screen Size, or Constant Physical Size. Constant Pixel Size Using the Constant Pixel Size mode, positions and sizes of UI elements are specified in pixels on the screen. This is also the default functionality of the Canvas when no Canvas Scaler is attached. However, With the Scale Factor setting in the Canvas Scaler, a constant scaling can be applied to all UI elements in the Canvas. Scale With Screen Size Using the Scale With Screen Size mode, positions and sizes can be specified according to the pixels of a specified reference resolution. If the current screen resolution is larger than the reference resolution, the Canvas will keep having only the resolution of the reference resolution, but will scale up in order to fit the screen. If the current screen resolution is smaller than the reference resolution, the Canvas will similarly be scaled down to fit. If the current screen resolution has a different aspect ratio than the reference resolution, scaling each axis individually to fit the screen would result in non-uniform scaling, which is generally undesirable. Instead of this, the ReferenceResolution component will make the Canvas resolution deviate from the reference resolution in order to respect the aspect ratio of the screen. It is possible to control how this deviation should behave using the Screen Match Mode setting. Constant Physical Size Using the Constant Physical Size mode, positions and sizes of UI elements are specified in physical units, such as millimeters, points, or picas. This mode relies on the device reporting its screen DPI correctly. You can specify a fallback DPI to use for devices that do not report a DPI. World Space For a Canvas set to 'World Space' the Canvas Scaler can be used to control the pixel density of UI elements in the Canvas. Hints See the page Designing UI for Multiple Resolutions for a step by step explanation of how Rect Transform anchoring and Canvas Scaler can be used in conjunction to make UI layouts that adapt to different resolutions and aspect ratios."
  },
  "api/UnityEngine.UI.InputField.InputType.html": {
    "href": "api/UnityEngine.UI.InputField.InputType.html",
    "title": "Enum InputField.InputType | Unity UI | 1.0.0",
    "keywords": "Enum InputField.InputType Type of data expected by the input field mobile keyboard. Namespace : UnityEngine.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public enum InputType Fields Name Description AutoCorrect The mobile autocorrect keyboard. Password The mobile password keyboard. Standard The standard mobile keyboard"
  },
  "api/UnityEngine.EventSystems.IPointerDownHandler.html": {
    "href": "api/UnityEngine.EventSystems.IPointerDownHandler.html",
    "title": "Interface IPointerDownHandler | Unity UI | 1.0.0",
    "keywords": "Interface IPointerDownHandler Interface to implement if you wish to receive OnPointerDown callbacks. Namespace : UnityEngine.EventSystems <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public interface IPointerDownHandler : IEventSystemHandler Remarks Criteria for this event is implementation dependent. For example see StandAloneInputModule. Methods OnPointerDown(PointerEventData) Use this callback to detect pointer down events. Declaration void OnPointerDown(PointerEventData eventData) Parameters Type Name Description PointerEventData eventData"
  },
  "api/UnityEngine.UI.Image.Origin360.html": {
    "href": "api/UnityEngine.UI.Image.Origin360.html",
    "title": "Enum Image.Origin360 | Unity UI | 1.0.0",
    "keywords": "Enum Image.Origin360 One of the points of the Arc for the Image.FillMethod.Radial360. Namespace : UnityEngine.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public enum Origin360 Fields Name Description Bottom Arc starting at the center of the Bottom edge. Left Arc starting at the center of the Left edge. Right Arc starting at the center of the Right edge. Top Arc starting at the center of the Top edge."
  },
  "api/UnityEngine.UI.Image.Origin180.html": {
    "href": "api/UnityEngine.UI.Image.Origin180.html",
    "title": "Enum Image.Origin180 | Unity UI | 1.0.0",
    "keywords": "Enum Image.Origin180 Origin for the Image.FillMethod.Radial180. Namespace : UnityEngine.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public enum Origin180 Fields Name Description Bottom Center of the radial at the center of the Bottom edge. Left Center of the radial at the center of the Left edge. Right Center of the radial at the center of the Right edge. Top Center of the radial at the center of the Top edge."
  },
  "api/UnityEditor.UI.ButtonEditor.html": {
    "href": "api/UnityEditor.UI.ButtonEditor.html",
    "title": "Class ButtonEditor | Unity UI | 1.0.0",
    "keywords": "Class ButtonEditor Inheritance Object SelectableEditor ButtonEditor Inherited Members SelectableEditor.OnDisable() Namespace : UnityEditor.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class ButtonEditor : SelectableEditor Methods OnEnable() Declaration protected override void OnEnable() Overrides SelectableEditor.OnEnable() OnInspectorGUI() Declaration public override void OnInspectorGUI() Overrides SelectableEditor.OnInspectorGUI()"
  },
  "api/Core.InputField.html": {
    "href": "api/Core.InputField.html",
    "title": "Namespace Core.InputField | Unity UI | 1.0.0",
    "keywords": "Namespace Core.InputField Classes CharacterLimitValidation ContentValidation"
  },
  "api/UnityEngine.UI.AspectRatioFitter.html": {
    "href": "api/UnityEngine.UI.AspectRatioFitter.html",
    "title": "Class AspectRatioFitter | Unity UI | 1.0.0",
    "keywords": "Class AspectRatioFitter Inheritance Object UIBehaviour AspectRatioFitter Inherited Members UIBehaviour.Awake() UIBehaviour.Start() UIBehaviour.OnDestroy() UIBehaviour.IsActive() UIBehaviour.OnBeforeTransformParentChanged() UIBehaviour.OnTransformParentChanged() UIBehaviour.OnDidApplyAnimationProperties() UIBehaviour.OnCanvasGroupChanged() UIBehaviour.OnCanvasHierarchyChanged() UIBehaviour.IsDestroyed() Namespace : UnityEngine.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class AspectRatioFitter : UIBehaviour, ILayoutSelfController, ILayoutController Constructors AspectRatioFitter() Declaration protected AspectRatioFitter() Properties aspectMode The mode to use to enforce the aspect ratio. Declaration public AspectRatioFitter.AspectMode aspectMode { get; set; } Property Value Type Description AspectRatioFitter.AspectMode aspectRatio The aspect ratio to enforce. This means width divided by height. Declaration public float aspectRatio { get; set; } Property Value Type Description Single Methods OnDisable() Declaration protected override void OnDisable() Overrides UIBehaviour.OnDisable() OnEnable() Declaration protected override void OnEnable() Overrides UIBehaviour.OnEnable() OnRectTransformDimensionsChange() Function called when this RectTransform or parent RectTransform has changed dimensions. Declaration protected override void OnRectTransformDimensionsChange() Overrides UIBehaviour.OnRectTransformDimensionsChange() SetDirty() Mark the AspectRatioFitter as dirty. Declaration protected void SetDirty() SetLayoutHorizontal() Method called by the layout system. Has no effect Declaration public virtual void SetLayoutHorizontal() Implements ILayoutController.SetLayoutHorizontal() SetLayoutVertical() Method called by the layout system. Has no effect Declaration public virtual void SetLayoutVertical() Implements ILayoutController.SetLayoutVertical() Update() Update the rect based on the delayed dirty. Got around issue of calling onValidate from OnEnable function. Declaration protected virtual void Update() Extension Methods UIBehaviourExtensions.InvokeOnEnable(UIBehaviour) UIBehaviourExtensions.InvokeOnDisable(UIBehaviour) UIBehaviourExtensions.InvokeAwake(UIBehaviour) UIBehaviourExtensions.InvokeRebuild(UIBehaviour, CanvasUpdate) UIBehaviourExtensions.InvokeLateUpdate(UIBehaviour) UIBehaviourExtensions.InvokeUpdate(UIBehaviour) UIBehaviourExtensions.InvokeOnRectTransformDimensionsChange(UIBehaviour) UIBehaviourExtensions.InvokeOnCanvasGroupChanged(UIBehaviour) UIBehaviourExtensions.InvokeOnDidApplyAnimationProperties(UIBehaviour)"
  },
  "api/UnityEditor.UI.GraphicEditor.html": {
    "href": "api/UnityEditor.UI.GraphicEditor.html",
    "title": "Class GraphicEditor | Unity UI | 1.0.0",
    "keywords": "Class GraphicEditor Editor class used to edit UI Graphics. Extend this class to write your own graphic editor. Inheritance Object GraphicEditor ImageEditor RawImageEditor TextEditor Namespace : UnityEditor.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class GraphicEditor : Editor Fields m_Color Declaration protected SerializedProperty m_Color Field Value Type Description SerializedProperty m_Material Declaration protected SerializedProperty m_Material Field Value Type Description SerializedProperty m_RaycastPadding Declaration protected SerializedProperty m_RaycastPadding Field Value Type Description SerializedProperty m_RaycastTarget Declaration protected SerializedProperty m_RaycastTarget Field Value Type Description SerializedProperty m_Script Declaration protected SerializedProperty m_Script Field Value Type Description SerializedProperty m_ShowNativeSize Declaration protected AnimBool m_ShowNativeSize Field Value Type Description AnimBool Methods AppearanceControlsGUI() GUI related to the appearance of the Graphic. Color and Material properties appear here. Declaration protected void AppearanceControlsGUI() NativeSizeButtonGUI() GUI for showing a button that sets the size of the RectTransform to the native size for this Graphic. Declaration protected void NativeSizeButtonGUI() OnDisable() Declaration protected virtual void OnDisable() OnEnable() Declaration protected virtual void OnEnable() OnInspectorGUI() Declaration public override void OnInspectorGUI() RaycastControlsGUI() GUI related to the Raycasting settings for the graphic. Declaration protected void RaycastControlsGUI() SetShowNativeSize(Boolean, Boolean) Set if the 'Set Native Size' button should be visible for this editor. Declaration protected void SetShowNativeSize(bool show, bool instant) Parameters Type Name Description Boolean show Are we showing or hiding the AnimBool for the size. Boolean instant Should the size AnimBool change instantly."
  },
  "api/InputfieldTests.BaseInputFieldTests.html": {
    "href": "api/InputfieldTests.BaseInputFieldTests.html",
    "title": "Class BaseInputFieldTests | Unity UI | 1.0.0",
    "keywords": "Class BaseInputFieldTests Inheritance Object BaseInputFieldTests DesktopInputFieldTests GenericInputFieldTests TouchInputFieldTests Namespace : InputfieldTests <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class BaseInputFieldTests Fields m_PrefabRoot Declaration protected GameObject m_PrefabRoot Field Value Type Description GameObject Methods CreateInputFieldAsset(String) Declaration public void CreateInputFieldAsset(string prefabPath) Parameters Type Name Description String prefabPath"
  },
  "api/UnityEngine.UI.html": {
    "href": "api/UnityEngine.UI.html",
    "title": "Namespace UnityEngine.UI | Unity UI | 1.0.0",
    "keywords": "Namespace UnityEngine.UI Classes AnimationTriggers Structure that stores the state of an animation transition on a Selectable. AspectRatioFitter BaseMeshEffect BaseVertexEffect Button A standard button that sends an event when clicked. Button.ButtonClickedEvent CanvasScaler CanvasUpdateRegistry A place where CanvasElements can register themselves for rebuilding. ClipperRegistry Registry class to keep track of all IClippers that exist in the scene Clipping Utility class to help when clipping using IClipper. ContentSizeFitter DefaultControls Utility class for creating default implementations of builtin UI controls. Dropdown Dropdown.DropdownEvent Dropdown.DropdownItem Dropdown.OptionData Dropdown.OptionDataList FontData FontUpdateTracker Utility class that is used to help with Text update. Graphic Base class for all UI components that should be derived from when creating new Graphic types. GraphicRaycaster GraphicRegistry Registry which maps a Graphic to the canvas it belongs to. GridLayoutGroup HorizontalLayoutGroup HorizontalOrVerticalLayoutGroup Abstract base class for HorizontalLayoutGroup and VerticalLayoutGroup to generalize common functionality. Image Image is a textured element in the UI hierarchy. InputField Turn a simple label into a interactable input field. InputField.OnChangeEvent InputField.SubmitEvent LayoutElement LayoutGroup LayoutRebuilder Wrapper class for managing layout rebuilding of CanvasElement. LayoutUtility Utility functions for querying layout elements for their minimum, preferred, and flexible sizes. Mask MaskableGraphic A Graphic that is capable of being masked out. MaskableGraphic.CullStateChangedEvent MaskUtilities Mask related utility class. This class provides masking-specific utility functions. Outline PositionAsUV1 RawImage Displays a Texture2D for the UI System. RectMask2D Scrollbar Scrollbar.ScrollEvent ScrollRect ScrollRect.ScrollRectEvent Selectable Shadow Slider Slider.SliderEvent StencilMaterial Dynamic material class makes it possible to create custom materials on the fly on a per-Graphic basis, and still have them get cleaned up correctly. Text Toggle A standard toggle that has an on / off state. Toggle.ToggleEvent ToggleGroup VertexHelper A utility class that can aid in the generation of meshes for the UI. VerticalLayoutGroup Structs ColorBlock DefaultControls.Resources Object used to pass resources to use for the default controls. Navigation SpriteState Interfaces DefaultControls.IFactoryControls Factory interface to create a GameObject in this class. It is necessary to use this interface in the whole class so MenuOption and Editor can work using ObjectFactory and default Presets. ICanvasElement This is an element that can live on a Canvas. IClippable Interface for elements that can be clipped if they are under an IClipper IClipper Interface that can be used to recieve clipping callbacks as part of the canvas update loop. ILayoutController Base interface to be implemented by components that control the layout of RectTransforms. ILayoutElement A component is treated as a layout element by the auto layout system if it implements ILayoutElement. ILayoutGroup ILayoutGroup is an ILayoutController that should drive the RectTransforms of its children. ILayoutIgnorer A RectTransform will be ignored by the layout system if it has a component which implements ILayoutIgnorer. ILayoutSelfController IMask IMaskable This element is capable of being masked out. IMaterialModifier Use this interface to modify a Material that renders a Graphic. The Material is modified before the it is passed to the CanvasRenderer. IMeshModifier Interface which allows for the modification of verticies in a Graphic before they are passed to the CanvasRenderer. When a Graphic generates a list of vertices they are passed (in order) to any components on the GameObject that implement IMeshModifier. This component can modify the given Mesh. IVertexModifier Enums AspectRatioFitter.AspectMode Specifies a mode to use to enforce an aspect ratio. CanvasScaler.ScaleMode Determines how UI elements in the Canvas are scaled. CanvasScaler.ScreenMatchMode Scale the canvas area with the width as reference, the height as reference, or something in between. CanvasScaler.Unit The possible physical unit types CanvasUpdate Values of 'update' called on a Canvas update. ContentSizeFitter.FitMode The size fit modes avaliable to use. GraphicRaycaster.BlockingObjects Type of raycasters to check against to check for canvas blocking elements. GridLayoutGroup.Axis The grid axis we are looking at. GridLayoutGroup.Constraint Constraint type on either the number of columns or rows. GridLayoutGroup.Corner Which corner is the starting corner for the grid. Image.FillMethod The possible fill method types for a Filled Image. Image.Origin180 Origin for the Image.FillMethod.Radial180. Image.Origin360 One of the points of the Arc for the Image.FillMethod.Radial360. Image.Origin90 Origin for the Image.FillMethod.Radial90. Image.OriginHorizontal Origin for the Image.FillMethod.Horizontal. Image.OriginVertical Origin for the Image.FillMethod.Vertical. Image.Type Image fill type controls how to display the image. InputField.CharacterValidation The type of characters that are allowed to be added to the string. InputField.ContentType Setting the content type acts as a shortcut for setting a combination of InputType, CharacterValidation, LineType, and TouchScreenKeyboardType InputField.EditState InputField.InputType Type of data expected by the input field mobile keyboard. InputField.LineType The LineType is used to describe the behavior of the InputField. Navigation.Mode Scrollbar.Direction Setting that indicates one of four directions the scrollbar will travel. ScrollRect.MovementType A setting for which behavior to use when content moves beyond the confines of its container. ScrollRect.ScrollbarVisibility Enum for which behavior to use for scrollbar visibility. Selectable.SelectionState An enumeration of selected states of objects Selectable.Transition Transition mode for a Selectable. Slider.Direction Setting that indicates one of four directions. Toggle.ToggleTransition Display settings for when a toggle is activated or deactivated. Delegates InputField.OnValidateInput"
  },
  "api/UnityEngine.UI.HorizontalOrVerticalLayoutGroup.html": {
    "href": "api/UnityEngine.UI.HorizontalOrVerticalLayoutGroup.html",
    "title": "Class HorizontalOrVerticalLayoutGroup | Unity UI | 1.0.0",
    "keywords": "Class HorizontalOrVerticalLayoutGroup Abstract base class for HorizontalLayoutGroup and VerticalLayoutGroup to generalize common functionality. Inheritance Object UIBehaviour LayoutGroup HorizontalOrVerticalLayoutGroup HorizontalLayoutGroup VerticalLayoutGroup Inherited Members LayoutGroup.m_Padding LayoutGroup.padding LayoutGroup.m_ChildAlignment LayoutGroup.childAlignment LayoutGroup.rectTransform LayoutGroup.m_Tracker LayoutGroup.rectChildren LayoutGroup.CalculateLayoutInputHorizontal() LayoutGroup.CalculateLayoutInputVertical() LayoutGroup.minWidth LayoutGroup.preferredWidth LayoutGroup.flexibleWidth LayoutGroup.minHeight LayoutGroup.preferredHeight LayoutGroup.flexibleHeight LayoutGroup.layoutPriority LayoutGroup.SetLayoutHorizontal() LayoutGroup.SetLayoutVertical() LayoutGroup.OnEnable() LayoutGroup.OnDisable() LayoutGroup.OnDidApplyAnimationProperties() LayoutGroup.GetTotalMinSize(Int32) LayoutGroup.GetTotalPreferredSize(Int32) LayoutGroup.GetTotalFlexibleSize(Int32) LayoutGroup.GetStartOffset(Int32, Single) LayoutGroup.GetAlignmentOnAxis(Int32) LayoutGroup.SetLayoutInputForAxis(Single, Single, Single, Int32) LayoutGroup.SetChildAlongAxis(RectTransform, Int32, Single) LayoutGroup.SetChildAlongAxisWithScale(RectTransform, Int32, Single, Single) LayoutGroup.SetChildAlongAxis(RectTransform, Int32, Single, Single) LayoutGroup.SetChildAlongAxisWithScale(RectTransform, Int32, Single, Single, Single) LayoutGroup.OnRectTransformDimensionsChange() LayoutGroup.OnTransformChildrenChanged() LayoutGroup.SetProperty<T>(T, T) LayoutGroup.SetDirty() UIBehaviour.Awake() UIBehaviour.Start() UIBehaviour.OnDestroy() UIBehaviour.IsActive() UIBehaviour.OnBeforeTransformParentChanged() UIBehaviour.OnTransformParentChanged() UIBehaviour.OnCanvasGroupChanged() UIBehaviour.OnCanvasHierarchyChanged() UIBehaviour.IsDestroyed() Namespace : UnityEngine.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public abstract class HorizontalOrVerticalLayoutGroup : LayoutGroup, ILayoutElement, ILayoutGroup, ILayoutController Fields m_ChildControlHeight Declaration protected bool m_ChildControlHeight Field Value Type Description Boolean m_ChildControlWidth Declaration protected bool m_ChildControlWidth Field Value Type Description Boolean m_ChildForceExpandHeight Declaration protected bool m_ChildForceExpandHeight Field Value Type Description Boolean m_ChildForceExpandWidth Declaration protected bool m_ChildForceExpandWidth Field Value Type Description Boolean m_ChildScaleHeight Declaration protected bool m_ChildScaleHeight Field Value Type Description Boolean m_ChildScaleWidth Declaration protected bool m_ChildScaleWidth Field Value Type Description Boolean m_ReverseArrangement Declaration protected bool m_ReverseArrangement Field Value Type Description Boolean m_Spacing Declaration protected float m_Spacing Field Value Type Description Single Properties childControlHeight Returns true if the Layout Group controls the heights of its children. Returns false if children control their own heights. Declaration public bool childControlHeight { get; set; } Property Value Type Description Boolean Remarks If set to false, the layout group will only affect the positions of the children while leaving the heights untouched. The heights of the children can be set via the respective RectTransforms in this case. If set to true, the heights of the children are automatically driven by the layout group according to their respective minimum, preferred, and flexible heights. This is useful if the heights of the children should change depending on how much space is available.In this case the height of each child cannot be set manually in the RectTransform, but the minimum, preferred and flexible height for each child can be controlled by adding a LayoutElement component to it. childControlWidth Returns true if the Layout Group controls the widths of its children. Returns false if children control their own widths. Declaration public bool childControlWidth { get; set; } Property Value Type Description Boolean Remarks If set to false, the layout group will only affect the positions of the children while leaving the widths untouched. The widths of the children can be set via the respective RectTransforms in this case. If set to true, the widths of the children are automatically driven by the layout group according to their respective minimum, preferred, and flexible widths. This is useful if the widths of the children should change depending on how much space is available.In this case the width of each child cannot be set manually in the RectTransform, but the minimum, preferred and flexible width for each child can be controlled by adding a LayoutElement component to it. childForceExpandHeight Whether to force the children to expand to fill additional available vertical space. Declaration public bool childForceExpandHeight { get; set; } Property Value Type Description Boolean childForceExpandWidth Whether to force the children to expand to fill additional available horizontal space. Declaration public bool childForceExpandWidth { get; set; } Property Value Type Description Boolean childScaleHeight Whether to use the y scale of each child when calculating its height. Declaration public bool childScaleHeight { get; set; } Property Value Type Description Boolean childScaleWidth Whether to use the x scale of each child when calculating its width. Declaration public bool childScaleWidth { get; set; } Property Value Type Description Boolean reverseArrangement Whether the order of children objects should be sorted in reverse. Declaration public bool reverseArrangement { get; set; } Property Value Type Description Boolean Remarks If False the first child object will be positioned first. If True the last child object will be positioned first. spacing The spacing to use between layout elements in the layout group. Declaration public float spacing { get; set; } Property Value Type Description Single Methods CalcAlongAxis(Int32, Boolean) Calculate the layout element properties for this layout element along the given axis. Declaration protected void CalcAlongAxis(int axis, bool isVertical) Parameters Type Name Description Int32 axis The axis to calculate for. 0 is horizontal and 1 is vertical. Boolean isVertical Is this group a vertical group? SetChildrenAlongAxis(Int32, Boolean) Set the positions and sizes of the child layout elements for the given axis. Declaration protected void SetChildrenAlongAxis(int axis, bool isVertical) Parameters Type Name Description Int32 axis The axis to handle. 0 is horizontal and 1 is vertical. Boolean isVertical Is this group a vertical group? Extension Methods UIBehaviourExtensions.InvokeOnEnable(UIBehaviour) UIBehaviourExtensions.InvokeOnDisable(UIBehaviour) UIBehaviourExtensions.InvokeAwake(UIBehaviour) UIBehaviourExtensions.InvokeRebuild(UIBehaviour, CanvasUpdate) UIBehaviourExtensions.InvokeLateUpdate(UIBehaviour) UIBehaviourExtensions.InvokeUpdate(UIBehaviour) UIBehaviourExtensions.InvokeOnRectTransformDimensionsChange(UIBehaviour) UIBehaviourExtensions.InvokeOnCanvasGroupChanged(UIBehaviour) UIBehaviourExtensions.InvokeOnDidApplyAnimationProperties(UIBehaviour)"
  },
  "api/UnityEngine.UI.HorizontalLayoutGroup.html": {
    "href": "api/UnityEngine.UI.HorizontalLayoutGroup.html",
    "title": "Class HorizontalLayoutGroup | Unity UI | 1.0.0",
    "keywords": "Class HorizontalLayoutGroup Inheritance Object UIBehaviour LayoutGroup HorizontalOrVerticalLayoutGroup HorizontalLayoutGroup Inherited Members HorizontalOrVerticalLayoutGroup.m_Spacing HorizontalOrVerticalLayoutGroup.spacing HorizontalOrVerticalLayoutGroup.m_ChildForceExpandWidth HorizontalOrVerticalLayoutGroup.childForceExpandWidth HorizontalOrVerticalLayoutGroup.m_ChildForceExpandHeight HorizontalOrVerticalLayoutGroup.childForceExpandHeight HorizontalOrVerticalLayoutGroup.m_ChildControlWidth HorizontalOrVerticalLayoutGroup.childControlWidth HorizontalOrVerticalLayoutGroup.m_ChildControlHeight HorizontalOrVerticalLayoutGroup.childControlHeight HorizontalOrVerticalLayoutGroup.m_ChildScaleWidth HorizontalOrVerticalLayoutGroup.childScaleWidth HorizontalOrVerticalLayoutGroup.m_ChildScaleHeight HorizontalOrVerticalLayoutGroup.childScaleHeight HorizontalOrVerticalLayoutGroup.reverseArrangement HorizontalOrVerticalLayoutGroup.m_ReverseArrangement HorizontalOrVerticalLayoutGroup.CalcAlongAxis(Int32, Boolean) HorizontalOrVerticalLayoutGroup.SetChildrenAlongAxis(Int32, Boolean) LayoutGroup.m_Padding LayoutGroup.padding LayoutGroup.m_ChildAlignment LayoutGroup.childAlignment LayoutGroup.rectTransform LayoutGroup.m_Tracker LayoutGroup.rectChildren LayoutGroup.minWidth LayoutGroup.preferredWidth LayoutGroup.flexibleWidth LayoutGroup.minHeight LayoutGroup.preferredHeight LayoutGroup.flexibleHeight LayoutGroup.layoutPriority LayoutGroup.OnEnable() LayoutGroup.OnDisable() LayoutGroup.OnDidApplyAnimationProperties() LayoutGroup.GetTotalMinSize(Int32) LayoutGroup.GetTotalPreferredSize(Int32) LayoutGroup.GetTotalFlexibleSize(Int32) LayoutGroup.GetStartOffset(Int32, Single) LayoutGroup.GetAlignmentOnAxis(Int32) LayoutGroup.SetLayoutInputForAxis(Single, Single, Single, Int32) LayoutGroup.SetChildAlongAxis(RectTransform, Int32, Single) LayoutGroup.SetChildAlongAxisWithScale(RectTransform, Int32, Single, Single) LayoutGroup.SetChildAlongAxis(RectTransform, Int32, Single, Single) LayoutGroup.SetChildAlongAxisWithScale(RectTransform, Int32, Single, Single, Single) LayoutGroup.OnRectTransformDimensionsChange() LayoutGroup.OnTransformChildrenChanged() LayoutGroup.SetProperty<T>(T, T) LayoutGroup.SetDirty() UIBehaviour.Awake() UIBehaviour.Start() UIBehaviour.OnDestroy() UIBehaviour.IsActive() UIBehaviour.OnBeforeTransformParentChanged() UIBehaviour.OnTransformParentChanged() UIBehaviour.OnCanvasGroupChanged() UIBehaviour.OnCanvasHierarchyChanged() UIBehaviour.IsDestroyed() Namespace : UnityEngine.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class HorizontalLayoutGroup : HorizontalOrVerticalLayoutGroup, ILayoutElement, ILayoutGroup, ILayoutController Constructors HorizontalLayoutGroup() Declaration protected HorizontalLayoutGroup() Methods CalculateLayoutInputHorizontal() Called by the layout system. Also see ILayoutElement Declaration public override void CalculateLayoutInputHorizontal() Overrides LayoutGroup.CalculateLayoutInputHorizontal() CalculateLayoutInputVertical() Called by the layout system. Also see ILayoutElement Declaration public override void CalculateLayoutInputVertical() Overrides LayoutGroup.CalculateLayoutInputVertical() SetLayoutHorizontal() Called by the layout system. Also see ILayoutElement Declaration public override void SetLayoutHorizontal() Overrides LayoutGroup.SetLayoutHorizontal() SetLayoutVertical() Called by the layout system. Also see ILayoutElement Declaration public override void SetLayoutVertical() Overrides LayoutGroup.SetLayoutVertical() Extension Methods UIBehaviourExtensions.InvokeOnEnable(UIBehaviour) UIBehaviourExtensions.InvokeOnDisable(UIBehaviour) UIBehaviourExtensions.InvokeAwake(UIBehaviour) UIBehaviourExtensions.InvokeRebuild(UIBehaviour, CanvasUpdate) UIBehaviourExtensions.InvokeLateUpdate(UIBehaviour) UIBehaviourExtensions.InvokeUpdate(UIBehaviour) UIBehaviourExtensions.InvokeOnRectTransformDimensionsChange(UIBehaviour) UIBehaviourExtensions.InvokeOnCanvasGroupChanged(UIBehaviour) UIBehaviourExtensions.InvokeOnDidApplyAnimationProperties(UIBehaviour)"
  },
  "api/UnityEngine.EventSystems.PointerInputModule.MouseState.html": {
    "href": "api/UnityEngine.EventSystems.PointerInputModule.MouseState.html",
    "title": "Class PointerInputModule.MouseState | Unity UI | 1.0.0",
    "keywords": "Class PointerInputModule.MouseState Inheritance Object PointerInputModule.MouseState Namespace : UnityEngine.EventSystems <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax protected class MouseState Methods AnyPressesThisFrame() Declaration public bool AnyPressesThisFrame() Returns Type Description Boolean AnyReleasesThisFrame() Declaration public bool AnyReleasesThisFrame() Returns Type Description Boolean GetButtonState(PointerEventData.InputButton) Declaration public PointerInputModule.ButtonState GetButtonState(PointerEventData.InputButton button) Parameters Type Name Description PointerEventData.InputButton button Returns Type Description PointerInputModule.ButtonState SetButtonState(PointerEventData.InputButton, PointerEventData.FramePressState, PointerEventData) Declaration public void SetButtonState(PointerEventData.InputButton button, PointerEventData.FramePressState stateForMouseButton, PointerEventData data) Parameters Type Name Description PointerEventData.InputButton button PointerEventData.FramePressState stateForMouseButton PointerEventData data"
  },
  "api/UnityEngine.UI.ToggleGroup.html": {
    "href": "api/UnityEngine.UI.ToggleGroup.html",
    "title": "Class ToggleGroup | Unity UI | 1.0.0",
    "keywords": "Class ToggleGroup Inheritance Object UIBehaviour ToggleGroup Inherited Members UIBehaviour.Awake() UIBehaviour.OnDisable() UIBehaviour.OnDestroy() UIBehaviour.IsActive() UIBehaviour.OnRectTransformDimensionsChange() UIBehaviour.OnBeforeTransformParentChanged() UIBehaviour.OnTransformParentChanged() UIBehaviour.OnDidApplyAnimationProperties() UIBehaviour.OnCanvasGroupChanged() UIBehaviour.OnCanvasHierarchyChanged() UIBehaviour.IsDestroyed() Namespace : UnityEngine.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class ToggleGroup : UIBehaviour Constructors ToggleGroup() Declaration protected ToggleGroup() Fields m_Toggles Declaration protected List<Toggle> m_Toggles Field Value Type Description List < Toggle > Properties allowSwitchOff Is it allowed that no toggle is switched on? Declaration public bool allowSwitchOff { get; set; } Property Value Type Description Boolean Remarks If this setting is enabled, pressing the toggle that is currently switched on will switch it off, so that no toggle is switched on. If this setting is disabled, pressing the toggle that is currently switched on will not change its state. Note that even if allowSwitchOff is false, the Toggle Group will not enforce its constraint right away if no toggles in the group are switched on when the scene is loaded or when the group is instantiated. It will only prevent the user from switching a toggle off. Methods ActiveToggles() Returns the toggles in this group that are active. Declaration public IEnumerable<Toggle> ActiveToggles() Returns Type Description IEnumerable < Toggle > The active toggles in the group. Remarks Toggles belonging to this group but are not active either because their GameObject is inactive or because the Toggle component is disabled, are not returned as part of the list. AnyTogglesOn() Are any of the toggles on? Declaration public bool AnyTogglesOn() Returns Type Description Boolean Are and of the toggles on? EnsureValidState() Ensure that the toggle group still has a valid state. This is only relevant when a ToggleGroup is Started or a Toggle has been deleted from the group. Declaration public void EnsureValidState() GetFirstActiveToggle() Returns the toggle that is the first in the list of active toggles. Declaration public Toggle GetFirstActiveToggle() Returns Type Description Toggle The first active toggle from m_Toggles Remarks Get the active toggle for this group. As the group NotifyToggleOn(Toggle, Boolean) Notify the group that the given toggle is enabled. Declaration public void NotifyToggleOn(Toggle toggle, bool sendCallback = true) Parameters Type Name Description Toggle toggle The toggle that got triggered on. Boolean sendCallback If other toggles should send onValueChanged. OnEnable() Declaration protected override void OnEnable() Overrides UIBehaviour.OnEnable() RegisterToggle(Toggle) Register a toggle with the toggle group so it is watched for changes and notified if another toggle in the group changes. Declaration public void RegisterToggle(Toggle toggle) Parameters Type Name Description Toggle toggle The toggle to register with the group. SetAllTogglesOff(Boolean) Switch all toggles off. Declaration public void SetAllTogglesOff(bool sendCallback = true) Parameters Type Name Description Boolean sendCallback Remarks This method can be used to switch all toggles off, regardless of whether the allowSwitchOff property is enabled or not. Start() Because all the Toggles have registered themselves in the OnEnabled, Start should check to make sure at least one Toggle is active in groups that do not AllowSwitchOff Declaration protected override void Start() Overrides UIBehaviour.Start() UnregisterToggle(Toggle) Unregister a toggle from the group. Declaration public void UnregisterToggle(Toggle toggle) Parameters Type Name Description Toggle toggle The toggle to remove. Extension Methods UIBehaviourExtensions.InvokeOnEnable(UIBehaviour) UIBehaviourExtensions.InvokeOnDisable(UIBehaviour) UIBehaviourExtensions.InvokeAwake(UIBehaviour) UIBehaviourExtensions.InvokeRebuild(UIBehaviour, CanvasUpdate) UIBehaviourExtensions.InvokeLateUpdate(UIBehaviour) UIBehaviourExtensions.InvokeUpdate(UIBehaviour) UIBehaviourExtensions.InvokeOnRectTransformDimensionsChange(UIBehaviour) UIBehaviourExtensions.InvokeOnCanvasGroupChanged(UIBehaviour) UIBehaviourExtensions.InvokeOnDidApplyAnimationProperties(UIBehaviour) ToggleGroupExtension.InvokeValidateToggleIsInGroup(ToggleGroup, Toggle)"
  },
  "api/UnityEngine.UI.Dropdown.DropdownEvent.html": {
    "href": "api/UnityEngine.UI.Dropdown.DropdownEvent.html",
    "title": "Class Dropdown.DropdownEvent | Unity UI | 1.0.0",
    "keywords": "Class Dropdown.DropdownEvent Inheritance Object Dropdown.DropdownEvent Namespace : UnityEngine.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] public class DropdownEvent : UnityEvent<int>"
  },
  "api/UnityEngine.UI.Dropdown.OptionDataList.html": {
    "href": "api/UnityEngine.UI.Dropdown.OptionDataList.html",
    "title": "Class Dropdown.OptionDataList | Unity UI | 1.0.0",
    "keywords": "Class Dropdown.OptionDataList Inheritance Object Dropdown.OptionDataList Namespace : UnityEngine.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] public class OptionDataList Constructors OptionDataList() Declaration public OptionDataList() Properties options The list of options for the dropdown list. Declaration public List<Dropdown.OptionData> options { get; set; } Property Value Type Description List < Dropdown.OptionData >"
  },
  "api/UnityEngine.UI.CanvasScaler.html": {
    "href": "api/UnityEngine.UI.CanvasScaler.html",
    "title": "Class CanvasScaler | Unity UI | 1.0.0",
    "keywords": "Class CanvasScaler Inheritance Object UIBehaviour CanvasScaler Inherited Members UIBehaviour.Awake() UIBehaviour.Start() UIBehaviour.OnDestroy() UIBehaviour.IsActive() UIBehaviour.OnRectTransformDimensionsChange() UIBehaviour.OnBeforeTransformParentChanged() UIBehaviour.OnTransformParentChanged() UIBehaviour.OnDidApplyAnimationProperties() UIBehaviour.OnCanvasGroupChanged() UIBehaviour.OnCanvasHierarchyChanged() UIBehaviour.IsDestroyed() Namespace : UnityEngine.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class CanvasScaler : UIBehaviour Constructors CanvasScaler() Declaration protected CanvasScaler() Fields m_DefaultSpriteDPI Declaration protected float m_DefaultSpriteDPI Field Value Type Description Single m_DynamicPixelsPerUnit Declaration protected float m_DynamicPixelsPerUnit Field Value Type Description Single m_FallbackScreenDPI Declaration protected float m_FallbackScreenDPI Field Value Type Description Single m_MatchWidthOrHeight Declaration protected float m_MatchWidthOrHeight Field Value Type Description Single m_PhysicalUnit Declaration protected CanvasScaler.Unit m_PhysicalUnit Field Value Type Description CanvasScaler.Unit m_ReferencePixelsPerUnit Declaration protected float m_ReferencePixelsPerUnit Field Value Type Description Single m_ReferenceResolution Declaration protected Vector2 m_ReferenceResolution Field Value Type Description Vector2 m_ScaleFactor Declaration protected float m_ScaleFactor Field Value Type Description Single m_ScreenMatchMode Declaration protected CanvasScaler.ScreenMatchMode m_ScreenMatchMode Field Value Type Description CanvasScaler.ScreenMatchMode Properties defaultSpriteDPI The pixels per inch to use for sprites that have a 'Pixels Per Unit' setting that matches the 'Reference Pixels Per Unit' setting. Declaration public float defaultSpriteDPI { get; set; } Property Value Type Description Single dynamicPixelsPerUnit The amount of pixels per unit to use for dynamically created bitmaps in the UI, such as Text. Declaration public float dynamicPixelsPerUnit { get; set; } Property Value Type Description Single fallbackScreenDPI The DPI to assume if the screen DPI is not known. Declaration public float fallbackScreenDPI { get; set; } Property Value Type Description Single matchWidthOrHeight Setting to scale the Canvas to match the width or height of the reference resolution, or a combination. Declaration public float matchWidthOrHeight { get; set; } Property Value Type Description Single Remarks If the setting is set to 0, the Canvas is scaled according to the difference between the current screen resolution width and the reference resolution width. If the setting is set to 1, the Canvas is scaled according to the difference between the current screen resolution height and the reference resolution height. For values in between 0 and 1, the scaling is based on a combination of the relative width and height. Consider an example where the reference resolution of 640x480, and the current screen resolution is a landscape mode of 480x640. If the scaleWidthOrHeight setting is set to 0, the Canvas is scaled by 0.75 because the current resolution width of 480 is 0.75 times the reference resolution width of 640. The Canvas resolution gets a resolution of 640x853.33. This resolution has the same width as the reference resolution width, but has the aspect ratio of the current screen resolution. Note that the Canvas resolution of 640x853.33 is the current screen resolution divided by the scale factor of 0.75. If the scaleWidthOrHeight setting is set to 1, the Canvas is scaled by 1.33 because the current resolution height of 640 is 1.33 times the reference resolution height of 480. The Canvas resolution gets a resolution of 360x480. This resolution has the same height as the reference resolution width, but has the aspect ratio of the current screen resolution. Note that the Canvas resolution of 360x480 is the current screen resolution divided by the scale factor of 1.33. If the scaleWidthOrHeight setting is set to 0.5, we find the horizontal scaling needed (0.75) and the vertical scaling needed (1.33) and find the average. However, we do the average in logarithmic space. A regular average of 0.75 and 1.33 would produce a result of 1.04. However, since multiplying by 1.33 is the same as diving by 0.75, the two scale factor really corresponds to multiplying by 0.75 versus dividing by 0.75, and the average of those two things should even out and produce a neutral result. The average in logarithmic space of 0.75 and 1.33 is exactly 1.0, which is what we want. The Canvas resolution hence ends up being 480x640 which is the current resolution divided by the scale factor of 1.0. The logic works the same for all values. The average between the horizontal and vertical scale factor is a weighted average based on the matchWidthOrHeight value. physicalUnit The physical unit to specify positions and sizes in. Declaration public CanvasScaler.Unit physicalUnit { get; set; } Property Value Type Description CanvasScaler.Unit referencePixelsPerUnit If a sprite has this 'Pixels Per Unit' setting, then one pixel in the sprite will cover one unit in the UI. Declaration public float referencePixelsPerUnit { get; set; } Property Value Type Description Single referenceResolution The resolution the UI layout is designed for. Declaration public Vector2 referenceResolution { get; set; } Property Value Type Description Vector2 Remarks If the screen resolution is larger, the UI will be scaled up, and if it's smaller, the UI will be scaled down. This is done in accordance with the Screen Match Mode. scaleFactor Scales all UI elements in the Canvas by this factor. Declaration public float scaleFactor { get; set; } Property Value Type Description Single screenMatchMode A mode used to scale the canvas area if the aspect ratio of the current resolution doesn't fit the reference resolution. Declaration public CanvasScaler.ScreenMatchMode screenMatchMode { get; set; } Property Value Type Description CanvasScaler.ScreenMatchMode uiScaleMode Determines how UI elements in the Canvas are scaled. Declaration public CanvasScaler.ScaleMode uiScaleMode { get; set; } Property Value Type Description CanvasScaler.ScaleMode Methods Handle() Method that handles calculations of canvas scaling. Declaration protected virtual void Handle() HandleConstantPhysicalSize() Handles canvas scaling for a constant physical size. Declaration protected virtual void HandleConstantPhysicalSize() HandleConstantPixelSize() Handles canvas scaling for a constant pixel size. Declaration protected virtual void HandleConstantPixelSize() HandleScaleWithScreenSize() Handles canvas scaling that scales with the screen size. Declaration protected virtual void HandleScaleWithScreenSize() HandleWorldCanvas() Handles canvas scaling for world canvas. Declaration protected virtual void HandleWorldCanvas() OnDisable() Declaration protected override void OnDisable() Overrides UIBehaviour.OnDisable() OnEnable() Declaration protected override void OnEnable() Overrides UIBehaviour.OnEnable() SetReferencePixelsPerUnit(Single) Sets the referencePixelsPerUnit on the Canvas. Declaration protected void SetReferencePixelsPerUnit(float referencePixelsPerUnit) Parameters Type Name Description Single referencePixelsPerUnit The new reference pixels per Unity value SetScaleFactor(Single) Sets the scale factor on the canvas. Declaration protected void SetScaleFactor(float scaleFactor) Parameters Type Name Description Single scaleFactor The scale factor to use. Update() Checks each frame whether the canvas needs to be rescaled. Declaration protected virtual void Update() Extension Methods UIBehaviourExtensions.InvokeOnEnable(UIBehaviour) UIBehaviourExtensions.InvokeOnDisable(UIBehaviour) UIBehaviourExtensions.InvokeAwake(UIBehaviour) UIBehaviourExtensions.InvokeRebuild(UIBehaviour, CanvasUpdate) UIBehaviourExtensions.InvokeLateUpdate(UIBehaviour) UIBehaviourExtensions.InvokeUpdate(UIBehaviour) UIBehaviourExtensions.InvokeOnRectTransformDimensionsChange(UIBehaviour) UIBehaviourExtensions.InvokeOnCanvasGroupChanged(UIBehaviour) UIBehaviourExtensions.InvokeOnDidApplyAnimationProperties(UIBehaviour)"
  },
  "api/UnityEngine.UI.Toggle.html": {
    "href": "api/UnityEngine.UI.Toggle.html",
    "title": "Class Toggle | Unity UI | 1.0.0",
    "keywords": "Class Toggle A standard toggle that has an on / off state. Inheritance Object UIBehaviour Selectable Toggle Inherited Members Selectable.s_Selectables Selectable.s_SelectableCount Selectable.allSelectablesArray Selectable.allSelectableCount Selectable.allSelectables Selectable.AllSelectablesNoAlloc(Selectable[]) Selectable.m_CurrentIndex Selectable.navigation Selectable.transition Selectable.colors Selectable.spriteState Selectable.animationTriggers Selectable.targetGraphic Selectable.interactable Selectable.image Selectable.Awake() Selectable.OnCanvasGroupChanged() Selectable.IsInteractable() Selectable.OnTransformParentChanged() Selectable.currentSelectionState Selectable.InstantClearState() Selectable.DoStateTransition(Selectable.SelectionState, Boolean) Selectable.FindSelectable(Vector3) Selectable.FindSelectableOnLeft() Selectable.FindSelectableOnRight() Selectable.FindSelectableOnUp() Selectable.FindSelectableOnDown() Selectable.OnMove(AxisEventData) Selectable.IsHighlighted() Selectable.IsPressed() Selectable.OnPointerDown(PointerEventData) Selectable.OnPointerUp(PointerEventData) Selectable.OnPointerEnter(PointerEventData) Selectable.OnPointerExit(PointerEventData) Selectable.OnSelect(BaseEventData) Selectable.OnDeselect(BaseEventData) Selectable.Select() UIBehaviour.IsActive() UIBehaviour.OnRectTransformDimensionsChange() UIBehaviour.OnBeforeTransformParentChanged() UIBehaviour.OnCanvasHierarchyChanged() UIBehaviour.IsDestroyed() Namespace : UnityEngine.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class Toggle : Selectable, IMoveHandler, IPointerDownHandler, IPointerUpHandler, IPointerEnterHandler, IPointerExitHandler, ISelectHandler, IDeselectHandler, IPointerClickHandler, ISubmitHandler, IEventSystemHandler, ICanvasElement Remarks The toggle component is a Selectable that controls a child graphic which displays the on / off state. When a toggle event occurs a callback is sent to any registered listeners of UI.Toggle._onValueChanged. Constructors Toggle() Declaration protected Toggle() Fields graphic Graphic the toggle should be working with. Declaration public Graphic graphic Field Value Type Description Graphic onValueChanged Declaration public Toggle.ToggleEvent onValueChanged Field Value Type Description Toggle.ToggleEvent toggleTransition Transition mode for the toggle. Declaration public Toggle.ToggleTransition toggleTransition Field Value Type Description Toggle.ToggleTransition Properties group Group the toggle belongs to. Declaration public ToggleGroup group { get; set; } Property Value Type Description ToggleGroup isOn Declaration public bool isOn { get; set; } Property Value Type Description Boolean Methods GraphicUpdateComplete() Declaration public virtual void GraphicUpdateComplete() Implements ICanvasElement.GraphicUpdateComplete() LayoutComplete() Declaration public virtual void LayoutComplete() Implements ICanvasElement.LayoutComplete() OnDestroy() Declaration protected override void OnDestroy() Overrides UIBehaviour.OnDestroy() OnDidApplyAnimationProperties() Declaration protected override void OnDidApplyAnimationProperties() Overrides Selectable.OnDidApplyAnimationProperties() OnDisable() Declaration protected override void OnDisable() Overrides Selectable.OnDisable() OnEnable() Declaration protected override void OnEnable() Overrides Selectable.OnEnable() OnPointerClick(PointerEventData) React to clicks. Declaration public virtual void OnPointerClick(PointerEventData eventData) Parameters Type Name Description PointerEventData eventData Implements IPointerClickHandler.OnPointerClick(PointerEventData) OnSubmit(BaseEventData) Declaration public virtual void OnSubmit(BaseEventData eventData) Parameters Type Name Description BaseEventData eventData Implements ISubmitHandler.OnSubmit(BaseEventData) Rebuild(CanvasUpdate) Declaration public virtual void Rebuild(CanvasUpdate executing) Parameters Type Name Description CanvasUpdate executing Implements ICanvasElement.Rebuild(CanvasUpdate) SetIsOnWithoutNotify(Boolean) Set isOn without invoking onValueChanged callback. Declaration public void SetIsOnWithoutNotify(bool value) Parameters Type Name Description Boolean value New Value for isOn. Start() Assume the correct visual state. Declaration protected override void Start() Overrides UIBehaviour.Start() Extension Methods UIBehaviourExtensions.InvokeOnEnable(UIBehaviour) UIBehaviourExtensions.InvokeOnDisable(UIBehaviour) UIBehaviourExtensions.InvokeAwake(UIBehaviour) UIBehaviourExtensions.InvokeRebuild(UIBehaviour, CanvasUpdate) UIBehaviourExtensions.InvokeLateUpdate(UIBehaviour) UIBehaviourExtensions.InvokeUpdate(UIBehaviour) UIBehaviourExtensions.InvokeOnRectTransformDimensionsChange(UIBehaviour) UIBehaviourExtensions.InvokeOnCanvasGroupChanged(UIBehaviour) UIBehaviourExtensions.InvokeOnDidApplyAnimationProperties(UIBehaviour) SelectableExtensions.InvokeOnPointerDown(Selectable, PointerEventData) SelectableExtensions.InvokeOnPointerUp(Selectable, PointerEventData) SelectableExtensions.InvokeOnPointerEnter(Selectable, PointerEventData) SelectableExtensions.InvokeOnPointerExit(Selectable, PointerEventData) SelectableExtensions.InvokeTriggerAnimation(Selectable, String)"
  },
  "api/UnityEngine.UI.Shadow.html": {
    "href": "api/UnityEngine.UI.Shadow.html",
    "title": "Class Shadow | Unity UI | 1.0.0",
    "keywords": "Class Shadow Inheritance Object UIBehaviour BaseMeshEffect Shadow Outline Inherited Members BaseMeshEffect.graphic BaseMeshEffect.OnEnable() BaseMeshEffect.OnDisable() BaseMeshEffect.OnDidApplyAnimationProperties() BaseMeshEffect.ModifyMesh(Mesh) UIBehaviour.Awake() UIBehaviour.Start() UIBehaviour.OnDestroy() UIBehaviour.IsActive() UIBehaviour.OnRectTransformDimensionsChange() UIBehaviour.OnBeforeTransformParentChanged() UIBehaviour.OnTransformParentChanged() UIBehaviour.OnCanvasGroupChanged() UIBehaviour.OnCanvasHierarchyChanged() UIBehaviour.IsDestroyed() Namespace : UnityEngine.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class Shadow : BaseMeshEffect, IMeshModifier Constructors Shadow() Declaration protected Shadow() Properties effectColor Color for the effect Declaration public Color effectColor { get; set; } Property Value Type Description Color effectDistance How far is the shadow from the graphic. Declaration public Vector2 effectDistance { get; set; } Property Value Type Description Vector2 useGraphicAlpha Should the shadow inherit the alpha from the graphic? Declaration public bool useGraphicAlpha { get; set; } Property Value Type Description Boolean Methods ApplyShadow(List<UIVertex>, Color32, Int32, Int32, Single, Single) Duplicate vertices from start to end and turn them into shadows with the given offset. Declaration protected void ApplyShadow(List<UIVertex> verts, Color32 color, int start, int end, float x, float y) Parameters Type Name Description List < UIVertex > verts Vert list to copy Color32 color Shadow color Int32 start The start index in the verts list Int32 end The end index in the vers list Single x The shadows x offset Single y The shadows y offset ApplyShadowZeroAlloc(List<UIVertex>, Color32, Int32, Int32, Single, Single) Declaration protected void ApplyShadowZeroAlloc(List<UIVertex> verts, Color32 color, int start, int end, float x, float y) Parameters Type Name Description List < UIVertex > verts Color32 color Int32 start Int32 end Single x Single y ModifyMesh(VertexHelper) Declaration public override void ModifyMesh(VertexHelper vh) Parameters Type Name Description VertexHelper vh Overrides BaseMeshEffect.ModifyMesh(VertexHelper) Extension Methods UIBehaviourExtensions.InvokeOnEnable(UIBehaviour) UIBehaviourExtensions.InvokeOnDisable(UIBehaviour) UIBehaviourExtensions.InvokeAwake(UIBehaviour) UIBehaviourExtensions.InvokeRebuild(UIBehaviour, CanvasUpdate) UIBehaviourExtensions.InvokeLateUpdate(UIBehaviour) UIBehaviourExtensions.InvokeUpdate(UIBehaviour) UIBehaviourExtensions.InvokeOnRectTransformDimensionsChange(UIBehaviour) UIBehaviourExtensions.InvokeOnCanvasGroupChanged(UIBehaviour) UIBehaviourExtensions.InvokeOnDidApplyAnimationProperties(UIBehaviour)"
  },
  "api/UnityEngine.UI.Dropdown.OptionData.html": {
    "href": "api/UnityEngine.UI.Dropdown.OptionData.html",
    "title": "Class Dropdown.OptionData | Unity UI | 1.0.0",
    "keywords": "Class Dropdown.OptionData Inheritance Object Dropdown.OptionData Namespace : UnityEngine.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] public class OptionData Constructors OptionData() Declaration public OptionData() OptionData(Sprite) Declaration public OptionData(Sprite image) Parameters Type Name Description Sprite image OptionData(String) Declaration public OptionData(string text) Parameters Type Name Description String text OptionData(String, Sprite) Create an object representing a single option for the dropdown list. Declaration public OptionData(string text, Sprite image) Parameters Type Name Description String text Optional text for the option. Sprite image Optional image for the option. Properties image The image associated with the option. Declaration public Sprite image { get; set; } Property Value Type Description Sprite text The text associated with the option. Declaration public string text { get; set; } Property Value Type Description String"
  },
  "api/UnityEngine.UI.VertexHelper.html": {
    "href": "api/UnityEngine.UI.VertexHelper.html",
    "title": "Class VertexHelper | Unity UI | 1.0.0",
    "keywords": "Class VertexHelper A utility class that can aid in the generation of meshes for the UI. Inheritance Object VertexHelper Namespace : UnityEngine.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class VertexHelper : IDisposable Remarks This class implements IDisposable to aid with memory management. Examples using UnityEngine; using UnityEngine.UI; public class ExampleClass : MonoBehaviour { Mesh m; void Start() { Color32 color32 = Color.red; using (var vh = new VertexHelper()) { vh.AddVert(new Vector3(0, 0), color32, new Vector2(0f, 0f)); vh.AddVert(new Vector3(0, 100), color32, new Vector2(0f, 1f)); vh.AddVert(new Vector3(100, 100), color32, new Vector2(1f, 1f)); vh.AddVert(new Vector3(100, 0), color32, new Vector2(1f, 0f)); vh.AddTriangle(0, 1, 2); vh.AddTriangle(2, 3, 0); vh.FillMesh(m); } } } Constructors VertexHelper() Declaration public VertexHelper() VertexHelper(Mesh) Declaration public VertexHelper(Mesh m) Parameters Type Name Description Mesh m Properties currentIndexCount Get the number of indices set on the VertexHelper. Declaration public int currentIndexCount { get; } Property Value Type Description Int32 currentVertCount Current number of vertices in the buffer. Declaration public int currentVertCount { get; } Property Value Type Description Int32 Methods AddTriangle(Int32, Int32, Int32) Add a triangle to the buffer. Declaration public void AddTriangle(int idx0, int idx1, int idx2) Parameters Type Name Description Int32 idx0 index 0 Int32 idx1 index 1 Int32 idx2 index 2 AddUIVertexQuad(UIVertex[]) Add a quad to the stream. Declaration public void AddUIVertexQuad(UIVertex[] verts) Parameters Type Name Description UIVertex [] verts 4 Vertices representing the quad. AddUIVertexStream(List<UIVertex>, List<Int32>) Add a stream of custom UIVertex and corresponding indices. Declaration public void AddUIVertexStream(List<UIVertex> verts, List<int> indices) Parameters Type Name Description List < UIVertex > verts The custom stream of verts to add to the helpers internal data. List < Int32 > indices The custom stream of indices to add to the helpers internal data. AddUIVertexTriangleStream(List<UIVertex>) Add a list of triangles to the stream. Declaration public void AddUIVertexTriangleStream(List<UIVertex> verts) Parameters Type Name Description List < UIVertex > verts Vertices to add. Length should be divisible by 3. AddVert(UIVertex) Add a single vertex to the stream. Declaration public void AddVert(UIVertex v) Parameters Type Name Description UIVertex v The vertex to add AddVert(Vector3, Color32, Vector2) Add a single vertex to the stream. Declaration public void AddVert(Vector3 position, Color32 color, Vector2 uv0) Parameters Type Name Description Vector3 position Position of the vert Color32 color Color of the vert Vector2 uv0 UV of the vert AddVert(Vector3, Color32, Vector2, Vector2, Vector2, Vector2, Vector3, Vector4) Add a single vertex to the stream. Declaration public void AddVert(Vector3 position, Color32 color, Vector2 uv0, Vector2 uv1, Vector2 uv2, Vector2 uv3, Vector3 normal, Vector4 tangent) Parameters Type Name Description Vector3 position Position of the vert Color32 color Color of the vert Vector2 uv0 UV of the vert Vector2 uv1 UV1 of the vert Vector2 uv2 UV2 of the vert Vector2 uv3 UV3 of the vert Vector3 normal Normal of the vert. Vector4 tangent Tangent of the vert AddVert(Vector3, Color32, Vector2, Vector2, Vector3, Vector4) Add a single vertex to the stream. Declaration public void AddVert(Vector3 position, Color32 color, Vector2 uv0, Vector2 uv1, Vector3 normal, Vector4 tangent) Parameters Type Name Description Vector3 position Position of the vert Color32 color Color of the vert Vector2 uv0 UV of the vert Vector2 uv1 UV1 of the vert Vector3 normal Normal of the vert. Vector4 tangent Tangent of the vert Clear() Clear all vertices from the stream. Declaration public void Clear() Dispose() Cleanup allocated memory. Declaration public void Dispose() FillMesh(Mesh) Fill the given mesh with the stream data. Declaration public void FillMesh(Mesh mesh) Parameters Type Name Description Mesh mesh GetUIVertexStream(List<UIVertex>) Create a stream of UI vertex (in triangles) from the stream. Declaration public void GetUIVertexStream(List<UIVertex> stream) Parameters Type Name Description List < UIVertex > stream PopulateUIVertex(ref UIVertex, Int32) Fill a UIVertex with data from index i of the stream. Declaration public void PopulateUIVertex(ref UIVertex vertex, int i) Parameters Type Name Description UIVertex vertex Vertex to populate Int32 i Index to populate. SetUIVertex(UIVertex, Int32) Set a UIVertex at the given index. Declaration public void SetUIVertex(UIVertex vertex, int i) Parameters Type Name Description UIVertex vertex The vertex to fill Int32 i the position in the current list to fill."
  },
  "api/UnityEngine.EventSystems.EventTrigger.Entry.html": {
    "href": "api/UnityEngine.EventSystems.EventTrigger.Entry.html",
    "title": "Class EventTrigger.Entry | Unity UI | 1.0.0",
    "keywords": "Class EventTrigger.Entry Inheritance Object EventTrigger.Entry Namespace : UnityEngine.EventSystems <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] public class Entry Fields callback The desired TriggerEvent to be Invoked. Declaration public EventTrigger.TriggerEvent callback Field Value Type Description EventTrigger.TriggerEvent eventID What type of event is the associated callback listening for. Declaration public EventTriggerType eventID Field Value Type Description EventTriggerType"
  },
  "api/UnityEngine.UI.ScrollRect.ScrollbarVisibility.html": {
    "href": "api/UnityEngine.UI.ScrollRect.ScrollbarVisibility.html",
    "title": "Enum ScrollRect.ScrollbarVisibility | Unity UI | 1.0.0",
    "keywords": "Enum ScrollRect.ScrollbarVisibility Enum for which behavior to use for scrollbar visibility. Namespace : UnityEngine.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public enum ScrollbarVisibility Fields Name Description AutoHide Automatically hide the scrollbar when no scrolling is needed on this axis. The viewport rect will not be changed. AutoHideAndExpandViewport Automatically hide the scrollbar when no scrolling is needed on this axis, and expand the viewport rect accordingly. Permanent Always show the scrollbar."
  },
  "api/UnityEngine.UI.ScrollRect.MovementType.html": {
    "href": "api/UnityEngine.UI.ScrollRect.MovementType.html",
    "title": "Enum ScrollRect.MovementType | Unity UI | 1.0.0",
    "keywords": "Enum ScrollRect.MovementType A setting for which behavior to use when content moves beyond the confines of its container. Namespace : UnityEngine.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public enum MovementType Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class ExampleClass : MonoBehaviour { public ScrollRect myScrollRect; public Scrollbar newScrollBar; //Called when a button is pressed public void Example(int option) { if (option == 0) { myScrollRect.movementType = ScrollRect.MovementType.Clamped; } else if (option == 1) { myScrollRect.movementType = ScrollRect.MovementType.Elastic; } else if (option == 2) { myScrollRect.movementType = ScrollRect.MovementType.Unrestricted; } } } Fields Name Description Clamped Clamped movement. The content can not be moved beyond its container. Elastic Elastic movement. The content is allowed to temporarily move beyond the container, but is pulled back elastically. Unrestricted Unrestricted movement. The content can move forever."
  },
  "api/UnityEngine.UI.InputField.CharacterValidation.html": {
    "href": "api/UnityEngine.UI.InputField.CharacterValidation.html",
    "title": "Enum InputField.CharacterValidation | Unity UI | 1.0.0",
    "keywords": "Enum InputField.CharacterValidation The type of characters that are allowed to be added to the string. Namespace : UnityEngine.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public enum CharacterValidation Remarks Note that the character validation does not validate the entire string as being valid or not. It only does validation on a per-character level, resulting in the typed character either being added to the string or not Fields Name Description Alphanumeric Allows letters A-Z, a-z and numbers 0-9. Decimal Allows decimal numbers (positive or negative). EmailAddress Allows the characters that are allowed in an email address. Integer Allow whole numbers (positive or negative). Characters 0-9 and - (dash / minus sign) are allowed. The dash is only allowed as the first character. Name Only allow names and enforces capitalization. None No validation. Any input is valid."
  },
  "api/UnityEngine.UI.IMeshModifier.html": {
    "href": "api/UnityEngine.UI.IMeshModifier.html",
    "title": "Interface IMeshModifier | Unity UI | 1.0.0",
    "keywords": "Interface IMeshModifier Interface which allows for the modification of verticies in a Graphic before they are passed to the CanvasRenderer. When a Graphic generates a list of vertices they are passed (in order) to any components on the GameObject that implement IMeshModifier. This component can modify the given Mesh. Namespace : UnityEngine.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public interface IMeshModifier Methods ModifyMesh(Mesh) Declaration [Obsolete(\"use IMeshModifier.ModifyMesh (VertexHelper verts) instead\", false)] void ModifyMesh(Mesh mesh) Parameters Type Name Description Mesh mesh ModifyMesh(VertexHelper) Call used to modify mesh. Place any custom mesh processing in this function. Declaration void ModifyMesh(VertexHelper verts) Parameters Type Name Description VertexHelper verts"
  },
  "api/UnityEngine.UI.ContentSizeFitter.html": {
    "href": "api/UnityEngine.UI.ContentSizeFitter.html",
    "title": "Class ContentSizeFitter | Unity UI | 1.0.0",
    "keywords": "Class ContentSizeFitter Inheritance Object UIBehaviour ContentSizeFitter Inherited Members UIBehaviour.Awake() UIBehaviour.Start() UIBehaviour.OnDestroy() UIBehaviour.IsActive() UIBehaviour.OnBeforeTransformParentChanged() UIBehaviour.OnTransformParentChanged() UIBehaviour.OnDidApplyAnimationProperties() UIBehaviour.OnCanvasGroupChanged() UIBehaviour.OnCanvasHierarchyChanged() UIBehaviour.IsDestroyed() Namespace : UnityEngine.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class ContentSizeFitter : UIBehaviour, ILayoutSelfController, ILayoutController Constructors ContentSizeFitter() Declaration protected ContentSizeFitter() Fields m_HorizontalFit Declaration protected ContentSizeFitter.FitMode m_HorizontalFit Field Value Type Description ContentSizeFitter.FitMode m_VerticalFit Declaration protected ContentSizeFitter.FitMode m_VerticalFit Field Value Type Description ContentSizeFitter.FitMode Properties horizontalFit The fit mode to use to determine the width. Declaration public ContentSizeFitter.FitMode horizontalFit { get; set; } Property Value Type Description ContentSizeFitter.FitMode verticalFit The fit mode to use to determine the height. Declaration public ContentSizeFitter.FitMode verticalFit { get; set; } Property Value Type Description ContentSizeFitter.FitMode Methods OnDisable() Declaration protected override void OnDisable() Overrides UIBehaviour.OnDisable() OnEnable() Declaration protected override void OnEnable() Overrides UIBehaviour.OnEnable() OnRectTransformDimensionsChange() Declaration protected override void OnRectTransformDimensionsChange() Overrides UIBehaviour.OnRectTransformDimensionsChange() SetDirty() Declaration protected void SetDirty() SetLayoutHorizontal() Calculate and apply the horizontal component of the size to the RectTransform Declaration public virtual void SetLayoutHorizontal() Implements ILayoutController.SetLayoutHorizontal() SetLayoutVertical() Calculate and apply the vertical component of the size to the RectTransform Declaration public virtual void SetLayoutVertical() Implements ILayoutController.SetLayoutVertical() Extension Methods UIBehaviourExtensions.InvokeOnEnable(UIBehaviour) UIBehaviourExtensions.InvokeOnDisable(UIBehaviour) UIBehaviourExtensions.InvokeAwake(UIBehaviour) UIBehaviourExtensions.InvokeRebuild(UIBehaviour, CanvasUpdate) UIBehaviourExtensions.InvokeLateUpdate(UIBehaviour) UIBehaviourExtensions.InvokeUpdate(UIBehaviour) UIBehaviourExtensions.InvokeOnRectTransformDimensionsChange(UIBehaviour) UIBehaviourExtensions.InvokeOnCanvasGroupChanged(UIBehaviour) UIBehaviourExtensions.InvokeOnDidApplyAnimationProperties(UIBehaviour)"
  },
  "api/UnityEditor.UI.ColorBlockDrawer.html": {
    "href": "api/UnityEditor.UI.ColorBlockDrawer.html",
    "title": "Class ColorBlockDrawer | Unity UI | 1.0.0",
    "keywords": "Class ColorBlockDrawer Inheritance Object ColorBlockDrawer Namespace : UnityEditor.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class ColorBlockDrawer : PropertyDrawer Methods GetPropertyHeight(SerializedProperty, GUIContent) Declaration public override float GetPropertyHeight(SerializedProperty prop, GUIContent label) Parameters Type Name Description SerializedProperty prop GUIContent label Returns Type Description Single OnGUI(Rect, SerializedProperty, GUIContent) Declaration public override void OnGUI(Rect rect, SerializedProperty prop, GUIContent label) Parameters Type Name Description Rect rect SerializedProperty prop GUIContent label"
  },
  "api/UnityEngine.UI.Tests.html": {
    "href": "api/UnityEngine.UI.Tests.html",
    "title": "Namespace UnityEngine.UI.Tests | Unity UI | 1.0.0",
    "keywords": "Namespace UnityEngine.UI.Tests Classes ConcreteGraphic GraphicExtension GraphicRaycasterExtension ImageHook RectMask2DClipping SelectableExtensions ToggleGroupExtension UIBehaviourExtensions"
  },
  "api/UnityEngine.UI.Tests.UIBehaviourExtensions.html": {
    "href": "api/UnityEngine.UI.Tests.UIBehaviourExtensions.html",
    "title": "Class UIBehaviourExtensions | Unity UI | 1.0.0",
    "keywords": "Class UIBehaviourExtensions Inheritance Object UIBehaviourExtensions Namespace : UnityEngine.UI.Tests <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class UIBehaviourExtensions Methods InvokeAwake(UIBehaviour) Declaration public static void InvokeAwake(this UIBehaviour behaviour) Parameters Type Name Description UIBehaviour behaviour InvokeLateUpdate(UIBehaviour) Declaration public static void InvokeLateUpdate(this UIBehaviour behaviour) Parameters Type Name Description UIBehaviour behaviour InvokeMethodAndRethrow(Object, String, Object[]) Declaration public static object InvokeMethodAndRethrow(object obj, string methodName, params object[] args) Parameters Type Name Description Object obj String methodName Object [] args Returns Type Description Object InvokeMethodAndRethrow<T>(Object, String, Object[]) Declaration public static object InvokeMethodAndRethrow<T>(object obj, string methodName, params object[] args) Parameters Type Name Description Object obj String methodName Object [] args Returns Type Description Object Type Parameters Name Description T InvokeOnCanvasGroupChanged(UIBehaviour) Declaration public static void InvokeOnCanvasGroupChanged(this UIBehaviour behaviour) Parameters Type Name Description UIBehaviour behaviour InvokeOnDidApplyAnimationProperties(UIBehaviour) Declaration public static void InvokeOnDidApplyAnimationProperties(this UIBehaviour behaviour) Parameters Type Name Description UIBehaviour behaviour InvokeOnDisable(UIBehaviour) Declaration public static void InvokeOnDisable(this UIBehaviour behaviour) Parameters Type Name Description UIBehaviour behaviour InvokeOnEnable(UIBehaviour) Declaration public static void InvokeOnEnable(this UIBehaviour behaviour) Parameters Type Name Description UIBehaviour behaviour InvokeOnRectTransformDimensionsChange(UIBehaviour) Declaration public static void InvokeOnRectTransformDimensionsChange(this UIBehaviour behaviour) Parameters Type Name Description UIBehaviour behaviour InvokeRebuild(UIBehaviour, CanvasUpdate) Declaration public static void InvokeRebuild(this UIBehaviour behaviour, CanvasUpdate type) Parameters Type Name Description UIBehaviour behaviour CanvasUpdate type InvokeUpdate(UIBehaviour) Declaration public static void InvokeUpdate(this UIBehaviour behaviour) Parameters Type Name Description UIBehaviour behaviour"
  },
  "api/UnityEngine.UI.Scrollbar.html": {
    "href": "api/UnityEngine.UI.Scrollbar.html",
    "title": "Class Scrollbar | Unity UI | 1.0.0",
    "keywords": "Class Scrollbar Inheritance Object UIBehaviour Selectable Scrollbar Inherited Members Selectable.s_Selectables Selectable.s_SelectableCount Selectable.allSelectablesArray Selectable.allSelectableCount Selectable.allSelectables Selectable.AllSelectablesNoAlloc(Selectable[]) Selectable.m_CurrentIndex Selectable.navigation Selectable.transition Selectable.colors Selectable.spriteState Selectable.animationTriggers Selectable.targetGraphic Selectable.interactable Selectable.image Selectable.Awake() Selectable.OnCanvasGroupChanged() Selectable.IsInteractable() Selectable.OnDidApplyAnimationProperties() Selectable.OnTransformParentChanged() Selectable.currentSelectionState Selectable.InstantClearState() Selectable.DoStateTransition(Selectable.SelectionState, Boolean) Selectable.FindSelectable(Vector3) Selectable.IsHighlighted() Selectable.IsPressed() Selectable.OnPointerEnter(PointerEventData) Selectable.OnPointerExit(PointerEventData) Selectable.OnSelect(BaseEventData) Selectable.OnDeselect(BaseEventData) Selectable.Select() UIBehaviour.Start() UIBehaviour.OnDestroy() UIBehaviour.IsActive() UIBehaviour.OnBeforeTransformParentChanged() UIBehaviour.OnCanvasHierarchyChanged() UIBehaviour.IsDestroyed() Namespace : UnityEngine.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class Scrollbar : Selectable, IMoveHandler, IPointerDownHandler, IPointerUpHandler, IPointerEnterHandler, IPointerExitHandler, ISelectHandler, IDeselectHandler, IBeginDragHandler, IDragHandler, IInitializePotentialDragHandler, IEventSystemHandler, ICanvasElement Constructors Scrollbar() Declaration protected Scrollbar() Properties direction The direction of the scrollbar from minimum to maximum value. Declaration public Scrollbar.Direction direction { get; set; } Property Value Type Description Scrollbar.Direction handleRect The RectTransform to use for the handle. Declaration public RectTransform handleRect { get; set; } Property Value Type Description RectTransform numberOfSteps The number of steps to use for the value. A value of 0 disables use of steps. Declaration public int numberOfSteps { get; set; } Property Value Type Description Int32 onValueChanged Handling for when the scrollbar value is changed. Declaration public Scrollbar.ScrollEvent onValueChanged { get; set; } Property Value Type Description Scrollbar.ScrollEvent Remarks Allow for delegate-based subscriptions for faster events than 'eventReceiver', and allowing for multiple receivers. size The size of the scrollbar handle where 1 means it fills the entire scrollbar. Declaration public float size { get; set; } Property Value Type Description Single value The current value of the scrollbar, between 0 and 1. Declaration public float value { get; set; } Property Value Type Description Single Methods ClickRepeat(PointerEventData) Coroutine function for handling continual press during Scrollbar.OnPointerDown. Declaration protected IEnumerator ClickRepeat(PointerEventData eventData) Parameters Type Name Description PointerEventData eventData Returns Type Description IEnumerator FindSelectableOnDown() Prevents selection if we we move on the Vertical axis. See Selectable.FindSelectableOnDown. Declaration public override Selectable FindSelectableOnDown() Returns Type Description Selectable Overrides Selectable.FindSelectableOnDown() FindSelectableOnLeft() Prevents selection if we we move on the Horizontal axis. See Selectable.FindSelectableOnLeft. Declaration public override Selectable FindSelectableOnLeft() Returns Type Description Selectable Overrides Selectable.FindSelectableOnLeft() FindSelectableOnRight() Prevents selection if we we move on the Horizontal axis. See Selectable.FindSelectableOnRight. Declaration public override Selectable FindSelectableOnRight() Returns Type Description Selectable Overrides Selectable.FindSelectableOnRight() FindSelectableOnUp() Prevents selection if we we move on the Vertical axis. See Selectable.FindSelectableOnUp. Declaration public override Selectable FindSelectableOnUp() Returns Type Description Selectable Overrides Selectable.FindSelectableOnUp() GraphicUpdateComplete() See ICanvasElement.GraphicUpdateComplete. Declaration public virtual void GraphicUpdateComplete() Implements ICanvasElement.GraphicUpdateComplete() LayoutComplete() See ICanvasElement.LayoutComplete. Declaration public virtual void LayoutComplete() Implements ICanvasElement.LayoutComplete() OnBeginDrag(PointerEventData) Handling for when the scrollbar value is begin being dragged. Declaration public virtual void OnBeginDrag(PointerEventData eventData) Parameters Type Name Description PointerEventData eventData Implements IBeginDragHandler.OnBeginDrag(PointerEventData) OnDisable() Declaration protected override void OnDisable() Overrides Selectable.OnDisable() OnDrag(PointerEventData) Handling for when the scrollbar value is dragged. Declaration public virtual void OnDrag(PointerEventData eventData) Parameters Type Name Description PointerEventData eventData Implements IDragHandler.OnDrag(PointerEventData) OnEnable() Declaration protected override void OnEnable() Overrides Selectable.OnEnable() OnInitializePotentialDrag(PointerEventData) See: IInitializePotentialDragHandler.OnInitializePotentialDrag Declaration public virtual void OnInitializePotentialDrag(PointerEventData eventData) Parameters Type Name Description PointerEventData eventData Implements IInitializePotentialDragHandler.OnInitializePotentialDrag(PointerEventData) OnMove(AxisEventData) Handling for movement events. Declaration public override void OnMove(AxisEventData eventData) Parameters Type Name Description AxisEventData eventData Overrides Selectable.OnMove(AxisEventData) OnPointerDown(PointerEventData) Event triggered when pointer is pressed down on the scrollbar. Declaration public override void OnPointerDown(PointerEventData eventData) Parameters Type Name Description PointerEventData eventData Overrides Selectable.OnPointerDown(PointerEventData) OnPointerUp(PointerEventData) Event triggered when pointer is released after pressing on the scrollbar. Declaration public override void OnPointerUp(PointerEventData eventData) Parameters Type Name Description PointerEventData eventData Overrides Selectable.OnPointerUp(PointerEventData) OnRectTransformDimensionsChange() Declaration protected override void OnRectTransformDimensionsChange() Overrides UIBehaviour.OnRectTransformDimensionsChange() Rebuild(CanvasUpdate) Declaration public virtual void Rebuild(CanvasUpdate executing) Parameters Type Name Description CanvasUpdate executing Implements ICanvasElement.Rebuild(CanvasUpdate) SetDirection(Scrollbar.Direction, Boolean) Set the direction of the scrollbar, optionally setting the layout as well. Declaration public void SetDirection(Scrollbar.Direction direction, bool includeRectLayouts) Parameters Type Name Description Scrollbar.Direction direction The direction of the scrollbar. Boolean includeRectLayouts Should the layout be flipped together with the direction? SetValueWithoutNotify(Single) Set the value of the scrollbar without invoking onValueChanged callback. Declaration public virtual void SetValueWithoutNotify(float input) Parameters Type Name Description Single input The new value for the scrollbar. Update() Update the rect based on the delayed update visuals. Got around issue of calling sendMessage from onValidate. Declaration protected virtual void Update() Extension Methods UIBehaviourExtensions.InvokeOnEnable(UIBehaviour) UIBehaviourExtensions.InvokeOnDisable(UIBehaviour) UIBehaviourExtensions.InvokeAwake(UIBehaviour) UIBehaviourExtensions.InvokeRebuild(UIBehaviour, CanvasUpdate) UIBehaviourExtensions.InvokeLateUpdate(UIBehaviour) UIBehaviourExtensions.InvokeUpdate(UIBehaviour) UIBehaviourExtensions.InvokeOnRectTransformDimensionsChange(UIBehaviour) UIBehaviourExtensions.InvokeOnCanvasGroupChanged(UIBehaviour) UIBehaviourExtensions.InvokeOnDidApplyAnimationProperties(UIBehaviour) SelectableExtensions.InvokeOnPointerDown(Selectable, PointerEventData) SelectableExtensions.InvokeOnPointerUp(Selectable, PointerEventData) SelectableExtensions.InvokeOnPointerEnter(Selectable, PointerEventData) SelectableExtensions.InvokeOnPointerExit(Selectable, PointerEventData) SelectableExtensions.InvokeTriggerAnimation(Selectable, String)"
  },
  "api/UnityEngine.UI.LayoutRebuilder.html": {
    "href": "api/UnityEngine.UI.LayoutRebuilder.html",
    "title": "Class LayoutRebuilder | Unity UI | 1.0.0",
    "keywords": "Class LayoutRebuilder Wrapper class for managing layout rebuilding of CanvasElement. Inheritance Object LayoutRebuilder Namespace : UnityEngine.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class LayoutRebuilder : ICanvasElement Properties transform Declaration public Transform transform { get; } Property Value Type Description Transform Implements ICanvasElement.transform Methods Equals(Object) Does the passed rebuilder point to the same CanvasElement. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The other object to compare Returns Type Description Boolean Are they equal Overrides Object.Equals(Object) ForceRebuildLayoutImmediate(RectTransform) Forces an immediate rebuild of the layout element and child layout elements affected by the calculations. Declaration public static void ForceRebuildLayoutImmediate(RectTransform layoutRoot) Parameters Type Name Description RectTransform layoutRoot The layout element to perform the layout rebuild on. Remarks Normal use of the layout system should not use this method. Instead MarkLayoutForRebuild should be used instead, which triggers a delayed layout rebuild during the next layout pass. The delayed rebuild automatically handles objects in the entire layout hierarchy in the correct order, and prevents multiple recalculations for the same layout elements. However, for special layout calculation needs, ::ref::ForceRebuildLayoutImmediate can be used to get the layout of a sub-tree resolved immediately. This can even be done from inside layout calculation methods such as ILayoutController.SetLayoutHorizontal orILayoutController.SetLayoutVertical. Usage should be restricted to cases where multiple layout passes are unavaoidable despite the extra cost in performance. GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides Object.GetHashCode() GraphicUpdateComplete() Declaration public void GraphicUpdateComplete() Implements ICanvasElement.GraphicUpdateComplete() IsDestroyed() Has the native representation of this LayoutRebuilder been destroyed? Declaration public bool IsDestroyed() Returns Type Description Boolean Implements ICanvasElement.IsDestroyed() LayoutComplete() Declaration public void LayoutComplete() Implements ICanvasElement.LayoutComplete() MarkLayoutForRebuild(RectTransform) Mark the given RectTransform as needing it's layout to be recalculated during the next layout pass. Declaration public static void MarkLayoutForRebuild(RectTransform rect) Parameters Type Name Description RectTransform rect Rect to rebuild. Rebuild(CanvasUpdate) Declaration public void Rebuild(CanvasUpdate executing) Parameters Type Name Description CanvasUpdate executing Implements ICanvasElement.Rebuild(CanvasUpdate) ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString()"
  },
  "api/UnityEngine.UI.ILayoutGroup.html": {
    "href": "api/UnityEngine.UI.ILayoutGroup.html",
    "title": "Interface ILayoutGroup | Unity UI | 1.0.0",
    "keywords": "Interface ILayoutGroup ILayoutGroup is an ILayoutController that should drive the RectTransforms of its children. Inherited Members ILayoutController.SetLayoutHorizontal() ILayoutController.SetLayoutVertical() Namespace : UnityEngine.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public interface ILayoutGroup : ILayoutController Remarks ILayoutGroup derives from ILayoutController and requires the same members to be implemented."
  },
  "api/UnityEngine.UI.Graphic.html": {
    "href": "api/UnityEngine.UI.Graphic.html",
    "title": "Class Graphic | Unity UI | 1.0.0",
    "keywords": "Class Graphic Base class for all UI components that should be derived from when creating new Graphic types. Inheritance Object UIBehaviour Graphic MaskableGraphic ConcreteGraphic Inherited Members UIBehaviour.Awake() UIBehaviour.Start() UIBehaviour.IsActive() UIBehaviour.OnCanvasGroupChanged() UIBehaviour.IsDestroyed() Namespace : UnityEngine.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public abstract class Graphic : UIBehaviour, ICanvasElement Constructors Graphic() Declaration protected Graphic() Fields m_CachedMesh Declaration [NonSerialized] protected Mesh m_CachedMesh Field Value Type Description Mesh m_CachedUvs Declaration [NonSerialized] protected Vector2[] m_CachedUvs Field Value Type Description Vector2 [] m_Material Declaration protected Material m_Material Field Value Type Description Material m_OnDirtyLayoutCallback Declaration [NonSerialized] protected UnityAction m_OnDirtyLayoutCallback Field Value Type Description UnityAction m_OnDirtyMaterialCallback Declaration [NonSerialized] protected UnityAction m_OnDirtyMaterialCallback Field Value Type Description UnityAction m_OnDirtyVertsCallback Declaration [NonSerialized] protected UnityAction m_OnDirtyVertsCallback Field Value Type Description UnityAction m_SkipLayoutUpdate Declaration [NonSerialized] protected bool m_SkipLayoutUpdate Field Value Type Description Boolean m_SkipMaterialUpdate Declaration [NonSerialized] protected bool m_SkipMaterialUpdate Field Value Type Description Boolean s_DefaultUI Declaration protected static Material s_DefaultUI Field Value Type Description Material s_Mesh Declaration [NonSerialized] protected static Mesh s_Mesh Field Value Type Description Mesh s_WhiteTexture Declaration protected static Texture2D s_WhiteTexture Field Value Type Description Texture2D Properties canvas A reference to the Canvas this Graphic is rendering to. Declaration public Canvas canvas { get; } Property Value Type Description Canvas Remarks In the situation where the Graphic is used in a hierarchy with multiple Canvases, the Canvas closest to the root will be used. canvasRenderer A reference to the CanvasRenderer populated by this Graphic. Declaration public CanvasRenderer canvasRenderer { get; } Property Value Type Description CanvasRenderer color Declaration public virtual Color color { get; set; } Property Value Type Description Color defaultGraphicMaterial Default material used to draw UI elements if no explicit material was specified. Declaration public static Material defaultGraphicMaterial { get; } Property Value Type Description Material defaultMaterial Returns the default material for the graphic. Declaration public virtual Material defaultMaterial { get; } Property Value Type Description Material depth Absolute depth of the graphic, used by rendering and events -- lowest to highest. Declaration public int depth { get; } Property Value Type Description Int32 Examples The depth is relative to the first root canvas. Canvas Graphic - 1 Graphic - 2 Nested Canvas Graphic - 3 Graphic - 4 Graphic - 5 This value is used to determine draw and event ordering. mainTexture The graphic's texture. (Read Only). Declaration public virtual Texture mainTexture { get; } Property Value Type Description Texture Remarks This is the Texture that gets passed to the CanvasRenderer, Material and then Shader _MainTex. When implementing your own Graphic you can override this to control which texture goes through the UI Rendering pipeline. Bear in mind that Unity tries to batch UI elements together to improve performance, so its ideal to work with atlas to reduce the number of draw calls. material The Material set by the user Declaration public virtual Material material { get; set; } Property Value Type Description Material materialForRendering The material that will be sent for Rendering (Read only). Declaration public virtual Material materialForRendering { get; } Property Value Type Description Material Remarks This is the material that actually gets sent to the CanvasRenderer. By default it's the same as [[Graphic.material]]. When extending Graphic you can override this to send a different material to the CanvasRenderer than the one set by Graphic.material. This is useful if you want to modify the user set material in a non destructive manner. raycastPadding Padding to be applied to the masking X = Left Y = Bottom Z = Right W = Top Declaration public Vector4 raycastPadding { get; set; } Property Value Type Description Vector4 raycastTarget Should this graphic be considered a target for raycasting? Declaration public virtual bool raycastTarget { get; set; } Property Value Type Description Boolean rectTransform The RectTransform component used by the Graphic. Cached for speed. Declaration public RectTransform rectTransform { get; } Property Value Type Description RectTransform useLegacyMeshGeneration Declaration protected bool useLegacyMeshGeneration { get; set; } Property Value Type Description Boolean workerMesh Declaration protected static Mesh workerMesh { get; } Property Value Type Description Mesh Methods CrossFadeAlpha(Single, Single, Boolean) Tweens the alpha of the CanvasRenderer color associated with this Graphic. Declaration public virtual void CrossFadeAlpha(float alpha, float duration, bool ignoreTimeScale) Parameters Type Name Description Single alpha Target alpha. Single duration Duration of the tween in seconds. Boolean ignoreTimeScale Should ignore [[Time.scale]]? CrossFadeColor(Color, Single, Boolean, Boolean) Tweens the CanvasRenderer color associated with this Graphic. Declaration public virtual void CrossFadeColor(Color targetColor, float duration, bool ignoreTimeScale, bool useAlpha) Parameters Type Name Description Color targetColor Target color. Single duration Tween duration. Boolean ignoreTimeScale Should ignore Time.scale? Boolean useAlpha Should also Tween the alpha channel? CrossFadeColor(Color, Single, Boolean, Boolean, Boolean) Tweens the CanvasRenderer color associated with this Graphic. Declaration public virtual void CrossFadeColor(Color targetColor, float duration, bool ignoreTimeScale, bool useAlpha, bool useRGB) Parameters Type Name Description Color targetColor Target color. Single duration Tween duration. Boolean ignoreTimeScale Should ignore Time.scale? Boolean useAlpha Should also Tween the alpha channel? Boolean useRGB Should the color or the alpha be used to tween GetPixelAdjustedRect() Returns a pixel perfect Rect closest to the Graphic RectTransform. Declaration public Rect GetPixelAdjustedRect() Returns Type Description Rect A Pixel perfect Rect. Remarks Note: This is only accurate if the Graphic root Canvas is in Screen Space. GraphicUpdateComplete() Declaration public virtual void GraphicUpdateComplete() Implements ICanvasElement.GraphicUpdateComplete() LayoutComplete() Declaration public virtual void LayoutComplete() Implements ICanvasElement.LayoutComplete() OnBeforeTransformParentChanged() Declaration protected override void OnBeforeTransformParentChanged() Overrides UIBehaviour.OnBeforeTransformParentChanged() OnCanvasHierarchyChanged() Declaration protected override void OnCanvasHierarchyChanged() Overrides UIBehaviour.OnCanvasHierarchyChanged() OnCullingChanged() This method must be called when CanvasRenderer.cull is modified. Declaration public virtual void OnCullingChanged() Remarks This can be used to perform operations that were previously skipped because the Graphic was culled. OnDestroy() Declaration protected override void OnDestroy() Overrides UIBehaviour.OnDestroy() OnDidApplyAnimationProperties() Declaration protected override void OnDidApplyAnimationProperties() Overrides UIBehaviour.OnDidApplyAnimationProperties() OnDisable() Clear references. Declaration protected override void OnDisable() Overrides UIBehaviour.OnDisable() OnEnable() Mark the Graphic and the canvas as having been changed. Declaration protected override void OnEnable() Overrides UIBehaviour.OnEnable() OnFillVBO(List<UIVertex>) Declaration [Obsolete(\"Use OnPopulateMesh instead.\", true)] protected virtual void OnFillVBO(List<UIVertex> vbo) Parameters Type Name Description List < UIVertex > vbo OnPopulateMesh(Mesh) Declaration [Obsolete(\"Use OnPopulateMesh(VertexHelper vh) instead.\", false)] protected virtual void OnPopulateMesh(Mesh m) Parameters Type Name Description Mesh m OnPopulateMesh(VertexHelper) Callback function when a UI element needs to generate vertices. Fills the vertex buffer data. Declaration protected virtual void OnPopulateMesh(VertexHelper vh) Parameters Type Name Description VertexHelper vh VertexHelper utility. Remarks Used by Text, UI.Image, and RawImage for example to generate vertices specific to their use case. OnRectTransformDimensionsChange() Declaration protected override void OnRectTransformDimensionsChange() Overrides UIBehaviour.OnRectTransformDimensionsChange() OnTransformParentChanged() Declaration protected override void OnTransformParentChanged() Overrides UIBehaviour.OnTransformParentChanged() PixelAdjustPoint(Vector2) Adjusts the given pixel to be pixel perfect. Declaration public Vector2 PixelAdjustPoint(Vector2 point) Parameters Type Name Description Vector2 point Local space point. Returns Type Description Vector2 Pixel perfect adjusted point. Remarks Note: This is only accurate if the Graphic root Canvas is in Screen Space. Raycast(Vector2, Camera) When a GraphicRaycaster is raycasting into the scene it does two things. First it filters the elements using their RectTransform rect. Then it uses this Raycast function to determine the elements hit by the raycast. Declaration public virtual bool Raycast(Vector2 sp, Camera eventCamera) Parameters Type Name Description Vector2 sp Screen point being tested Camera eventCamera Camera that is being used for the testing. Returns Type Description Boolean True if the provided point is a valid location for GraphicRaycaster raycasts. Rebuild(CanvasUpdate) Rebuilds the graphic geometry and its material on the PreRender cycle. Declaration public virtual void Rebuild(CanvasUpdate update) Parameters Type Name Description CanvasUpdate update The current step of the rendering CanvasUpdate cycle. Implements ICanvasElement.Rebuild(CanvasUpdate) Remarks See CanvasUpdateRegistry for more details on the canvas update cycle. RegisterDirtyLayoutCallback(UnityAction) Add a listener to receive notification when the graphics layout is dirtied. Declaration public void RegisterDirtyLayoutCallback(UnityAction action) Parameters Type Name Description UnityAction action The method to call when invoked. RegisterDirtyMaterialCallback(UnityAction) Add a listener to receive notification when the graphics material is dirtied. Declaration public void RegisterDirtyMaterialCallback(UnityAction action) Parameters Type Name Description UnityAction action The method to call when invoked. RegisterDirtyVerticesCallback(UnityAction) Add a listener to receive notification when the graphics vertices are dirtied. Declaration public void RegisterDirtyVerticesCallback(UnityAction action) Parameters Type Name Description UnityAction action The method to call when invoked. SetAllDirty() Set all properties of the Graphic dirty and needing rebuilt. Dirties Layout, Vertices, and Materials. Declaration public virtual void SetAllDirty() SetLayoutDirty() Mark the layout as dirty and needing rebuilt. Declaration public virtual void SetLayoutDirty() Remarks Send a OnDirtyLayoutCallback notification if any elements are registered. See RegisterDirtyLayoutCallback SetMaterialDirty() Mark the material as dirty and needing rebuilt. Declaration public virtual void SetMaterialDirty() Remarks Send a OnDirtyMaterialCallback notification if any elements are registered. See RegisterDirtyMaterialCallback SetNativeSize() Make the Graphic have the native size of its content. Declaration public virtual void SetNativeSize() SetVerticesDirty() Mark the vertices as dirty and needing rebuilt. Declaration public virtual void SetVerticesDirty() Remarks Send a OnDirtyVertsCallback notification if any elements are registered. See RegisterDirtyVerticesCallback UnregisterDirtyLayoutCallback(UnityAction) Remove a listener from receiving notifications when the graphics layout are dirtied Declaration public void UnregisterDirtyLayoutCallback(UnityAction action) Parameters Type Name Description UnityAction action The method to call when invoked. UnregisterDirtyMaterialCallback(UnityAction) Remove a listener from receiving notifications when the graphics material are dirtied Declaration public void UnregisterDirtyMaterialCallback(UnityAction action) Parameters Type Name Description UnityAction action The method to call when invoked. UnregisterDirtyVerticesCallback(UnityAction) Remove a listener from receiving notifications when the graphics vertices are dirtied Declaration public void UnregisterDirtyVerticesCallback(UnityAction action) Parameters Type Name Description UnityAction action The method to call when invoked. UpdateGeometry() Call to update the geometry of the Graphic onto the CanvasRenderer. Declaration protected virtual void UpdateGeometry() UpdateMaterial() Call to update the Material of the graphic onto the CanvasRenderer. Declaration protected virtual void UpdateMaterial() Extension Methods UIBehaviourExtensions.InvokeOnEnable(UIBehaviour) UIBehaviourExtensions.InvokeOnDisable(UIBehaviour) UIBehaviourExtensions.InvokeAwake(UIBehaviour) UIBehaviourExtensions.InvokeRebuild(UIBehaviour, CanvasUpdate) UIBehaviourExtensions.InvokeLateUpdate(UIBehaviour) UIBehaviourExtensions.InvokeUpdate(UIBehaviour) UIBehaviourExtensions.InvokeOnRectTransformDimensionsChange(UIBehaviour) UIBehaviourExtensions.InvokeOnCanvasGroupChanged(UIBehaviour) UIBehaviourExtensions.InvokeOnDidApplyAnimationProperties(UIBehaviour) GraphicExtension.InvokeOnPopulateMesh(Graphic, VertexHelper)"
  },
  "manual/UIInteractionComponents.html": {
    "href": "manual/UIInteractionComponents.html",
    "title": "Interaction Components | Unity UI | 1.0.0",
    "keywords": "Interaction Components This section covers components in the UI system that handles interaction, such as mouse or touch events and interaction using a keyboard or controller. The interaction components are not visible on their own, and must be combined with one or more visual components in order to work correctly. Common Functionality Most of the interaction components have some things in common. They are selectables, which means they have shared built-in functionality for visualising transitions between states (normal, highlighted, pressed, disabled), and for navigation to other selectables using keyboard or controller. This shared functionality is described on the Selectable page. The interaction components have at least one UnityEvent that is invoked when user interacts with the component in specific way. The UI system catches and logs any exceptions that propagate out of code attached to UnityEvent. Button A Button has an OnClick UnityEvent to define what it will do when clicked. See the Button page for details on using the Button component. Toggle A Toggle has an Is On checkbox that determines whether the Toggle is currently on or off. This value is flipped when the user clicks the Toggle, and a visual checkmark can be turned on or off accordingly. It also has an OnValueChanged UnityEvent to define what it will do when the value is changed. See the Toggle page for details on using the Toggle component. Toggle Group A Toggle Group can be used to group a set of Toggles that are mutually exclusive. Toggles that belong to the same group are constrained so that only one of them can be selected at a time - selecting one of them automatically deselects all the others. See the Toggle Group page for details on using the Toggle Group component. Slider A Slider has a decimal number Value that the user can drag between a minimum and maximum value. It can be either horizontal or vertical. It also has a OnValueChanged UnityEvent to define what it will do when the value is changed. See the Slider page for details on using the Slider component. Scrollbar A Scrollbar has a decimal number Value between 0 and 1. When the user drags the scrollbar, the value changes accordingly. Scrollbars are often used together with a Scroll Rect and a Mask to create a scroll view. The Scrollbar has a Size value between 0 and 1 that determines how big the handle is as a fraction of the entire scrollbar length. This is often controlled from another component to indicate how big a proportion of the content in a scroll view is visible. The Scroll Rect component can automatically do this. The Scrollbar can be either horizontal or vertical. It also has a OnValueChanged UnityEvent to define what it will do when the value is changed. See the Scrollbar page for details on using the Scrollbar component. Dropdown A Dropdown has a list of options to choose from. A text string and optionally an image can be specified for each option, and can be set either in the Inspector or dynamically from code. It has a OnValueChanged UnityEvent to define what it will do when the currently chosen option is changed. See the Dropdown page for details on using the Dropdown component. Input Field An Input Field is used to make the text of a Text Element editable by the user. It has a UnityEvent to define what it will do when the text content is changed, and an another to define what it will do when the user has finished editing it. See the Input Field page for details on using the Input Field component. Scroll Rect (Scroll View) A Scroll Rect can be used when content that takes up a lot of space needs to be displayed in a small area. The Scroll Rect provides functionality to scroll over this content. Usually a Scroll Rect is combined with a Mask in order to create a scroll view, where only the scrollable content inside the Scroll Rect is visible. It can also additionally be combined with one or two Scrollbars that can be dragged to scroll horizontally or vertically. See the Scroll Rect page for details on using the Scroll Rect component."
  },
  "manual/UIVisualComponents.html": {
    "href": "manual/UIVisualComponents.html",
    "title": "Visual Components | Unity UI | 1.0.0",
    "keywords": "Visual Components With the introduction of the UI system, new Components have been added that will help you create GUI specific functionality. This section will cover the basics of the new Components that can be created. Text The Text component, which is also known as a Label, has a Text area for entering the text that will be displayed. It is possible to set the font, font style, font size and whether or not the text has rich text capability. There are options to set the alignment of the text, settings for horizontal and vertical overflow which control what happens if the text is larger than the width or height of the rectangle, and a Best Fit option that makes the text resize to fit the available space. Image An Image has a Rect Transform component and an Image component. A sprite can be applied to the Image component under the Target Graphic field, and its colour can be set in the Color field. A material can also be applied to the Image component. The Image Type field defines how the applied sprite will appear, the options are: Simple - Scales the whole sprite equally. Sliced - Utilises the 3x3 sprite division so that resizing does not distort corners and only the center part is stretched. Tiled - Similar to Sliced, but tiles (repeats) the center part rather than stretching it. For sprites with no borders at all, the entire sprite is tiled. Filled - Shows the sprite in the same way as Simple does except that it fills in the sprite from an origin in a defined direction, method and amount. The option to Set Native Size, which is shown when Simple or Filled is selected, resets the image to the original sprite size. Images can be imported as UI sprites by selecting Sprite( 2D / UI) from the 'Texture Type' settings. Sprites have extra import settings compared to the old GUI sprites, the biggest difference is the addition of the sprite editor. The sprite editor provides the option of 9-slicing the image, this splits the image into 9 areas so that if the sprite is resized the corners are not stretched or distorted. Raw Image The Image component takes a sprite but Raw Image takes a texture (no borders etc). Raw Image should only be used if necessary otherwise Image will be suitable in the majority of cases. Mask A Mask is not a visible UI control but rather a way to modify the appearance of a control’s child elements. The mask restricts (ie, “masks”) the child elements to the shape of the parent. So, if the child is larger than the parent then only the part of the child that fits within the parent will be visible. Effects Visual components can also have various simple effects applied, such as a simple drop shadow or outline. See the UI Effects reference page for more information."
  },
  "manual/script-Slider.html": {
    "href": "manual/script-Slider.html",
    "title": "Slider | Unity UI | 1.0.0",
    "keywords": "Slider The Slider control allows the user to select a numeric value from a predetermined range by dragging the mouse. Note that the similar ScrollBar control is used for scrolling rather than selecting numeric values. Familiar examples include difficulty settings in games and brightness settings in image editors. Properties Property: Function: Interactable Will this component accept input? See Interactable . Transition Properties that determine the way the control responds visually to user actions. See Transition Options . Navigation Properties that determine the sequence of controls. See Navigation Options . Fill Rect The graphic used for the fill area of the control. Handle Rect The graphic used for the sliding \"handle\" part of the control Direction The direction in which the slider's value will increase when the handle is dragged. The options are Left To Right , Right To Left , Bottom To Top and Top To Bottom . Min Value The value of the slider when the handle is at its extreme lower end (determined by the Direction property). Max Value The value of the slider when the handle is at its extreme upper end (determined by the Direction property). Whole Numbers Should the slider be constrained to integer values? Value Current numeric value of the slider. If the value is set in the inspector it will be used as the initial value, but this will change at runtime when the value changes. Events Property: Function: On Value Changed A UnityEvent that is invoked when the current value of the Slider has changed. The event can send the current value as a float type dynamic argument. The value is passed as a float type regardless of whether the Whole Numbers property is enabled. Details The value of a Slider is determined by the position of the handle along its length. The value increases from the Min Value up to the Max Value in proportion to the distance the handle is dragged. The default behaviour is for the slider to increase from left to right but it is also possible to reverse this behavior using the Direction property. You can also set the slider to increase vertically by selecting Bottom To Top or Top To Bottom for the Direction property. The slider has a single event called On Value Changed that responds as the user drags the handle. The current numeric value of the slider is passed to the function as a float parameter. Typical use cases include: Choosing a level of difficulty in a game, brightness of a light, etc. Setting a distance, size, time or angle."
  },
  "manual/script-Shadow.html": {
    "href": "manual/script-Shadow.html",
    "title": "Shadow | Unity UI | 1.0.0",
    "keywords": "Shadow The Shadow component adds a simple outline effect to graphic components such as Text or Image. It must be on the same GameObject as the graphic component. Properties Property: Function: Effect Color The color of the shadow. Effect Distance The offset of the shadow expressed as a vector. Use Graphic Alpha Multiplies the color of the graphic onto the color of the effect."
  },
  "api/UnityEngine.UI.RawImage.html": {
    "href": "api/UnityEngine.UI.RawImage.html",
    "title": "Class RawImage | Unity UI | 1.0.0",
    "keywords": "Class RawImage Displays a Texture2D for the UI System. Inheritance Object UIBehaviour Graphic MaskableGraphic RawImage Inherited Members MaskableGraphic.m_ShouldRecalculateStencil MaskableGraphic.m_MaskMaterial MaskableGraphic.m_IncludeForMasking MaskableGraphic.onCullStateChanged MaskableGraphic.maskable MaskableGraphic.m_ShouldRecalculate MaskableGraphic.m_StencilValue MaskableGraphic.GetModifiedMaterial(Material) MaskableGraphic.Cull(Rect, Boolean) MaskableGraphic.SetClipRect(Rect, Boolean) MaskableGraphic.SetClipSoftness(Vector2) MaskableGraphic.OnEnable() MaskableGraphic.OnDisable() MaskableGraphic.OnTransformParentChanged() MaskableGraphic.ParentMaskStateChanged() MaskableGraphic.OnCanvasHierarchyChanged() MaskableGraphic.RecalculateClipping() MaskableGraphic.RecalculateMasking() Graphic.s_DefaultUI Graphic.s_WhiteTexture Graphic.defaultGraphicMaterial Graphic.m_Material Graphic.m_SkipLayoutUpdate Graphic.m_SkipMaterialUpdate Graphic.color Graphic.raycastTarget Graphic.raycastPadding Graphic.m_OnDirtyLayoutCallback Graphic.m_OnDirtyVertsCallback Graphic.m_OnDirtyMaterialCallback Graphic.s_Mesh Graphic.m_CachedMesh Graphic.m_CachedUvs Graphic.useLegacyMeshGeneration Graphic.SetAllDirty() Graphic.SetLayoutDirty() Graphic.SetVerticesDirty() Graphic.SetMaterialDirty() Graphic.OnRectTransformDimensionsChange() Graphic.OnBeforeTransformParentChanged() Graphic.depth Graphic.rectTransform Graphic.canvas Graphic.canvasRenderer Graphic.defaultMaterial Graphic.material Graphic.materialForRendering Graphic.OnDestroy() Graphic.OnCullingChanged() Graphic.Rebuild(CanvasUpdate) Graphic.LayoutComplete() Graphic.GraphicUpdateComplete() Graphic.UpdateMaterial() Graphic.UpdateGeometry() Graphic.workerMesh Graphic.OnFillVBO(List<UIVertex>) Graphic.OnPopulateMesh(Mesh) Graphic.Raycast(Vector2, Camera) Graphic.PixelAdjustPoint(Vector2) Graphic.GetPixelAdjustedRect() Graphic.CrossFadeColor(Color, Single, Boolean, Boolean) Graphic.CrossFadeColor(Color, Single, Boolean, Boolean, Boolean) Graphic.CrossFadeAlpha(Single, Single, Boolean) Graphic.RegisterDirtyLayoutCallback(UnityAction) Graphic.UnregisterDirtyLayoutCallback(UnityAction) Graphic.RegisterDirtyVerticesCallback(UnityAction) Graphic.UnregisterDirtyVerticesCallback(UnityAction) Graphic.RegisterDirtyMaterialCallback(UnityAction) Graphic.UnregisterDirtyMaterialCallback(UnityAction) UIBehaviour.Awake() UIBehaviour.Start() UIBehaviour.IsActive() UIBehaviour.OnCanvasGroupChanged() UIBehaviour.IsDestroyed() Namespace : UnityEngine.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class RawImage : MaskableGraphic, ICanvasElement, IClippable, IMaskable, IMaterialModifier Remarks If you don't have or don't wish to create an atlas, you can simply use this script to draw a texture. Keep in mind though that this will create an extra draw call with each RawImage present, so it's best to use it only for backgrounds or temporary visible graphics. Constructors RawImage() Declaration protected RawImage() Properties mainTexture Returns the texture used to draw this Graphic. Declaration public override Texture mainTexture { get; } Property Value Type Description Texture Overrides Graphic.mainTexture texture Declaration public Texture texture { get; set; } Property Value Type Description Texture uvRect UV rectangle used by the texture. Declaration public Rect uvRect { get; set; } Property Value Type Description Rect Methods OnDidApplyAnimationProperties() Declaration protected override void OnDidApplyAnimationProperties() Overrides Graphic.OnDidApplyAnimationProperties() OnPopulateMesh(VertexHelper) Declaration protected override void OnPopulateMesh(VertexHelper vh) Parameters Type Name Description VertexHelper vh Overrides Graphic.OnPopulateMesh(VertexHelper) SetNativeSize() Adjust the scale of the Graphic to make it pixel-perfect. Declaration public override void SetNativeSize() Overrides Graphic.SetNativeSize() Remarks This means setting the RawImage's RectTransform.sizeDelta to be equal to the Texture dimensions. Extension Methods UIBehaviourExtensions.InvokeOnEnable(UIBehaviour) UIBehaviourExtensions.InvokeOnDisable(UIBehaviour) UIBehaviourExtensions.InvokeAwake(UIBehaviour) UIBehaviourExtensions.InvokeRebuild(UIBehaviour, CanvasUpdate) UIBehaviourExtensions.InvokeLateUpdate(UIBehaviour) UIBehaviourExtensions.InvokeUpdate(UIBehaviour) UIBehaviourExtensions.InvokeOnRectTransformDimensionsChange(UIBehaviour) UIBehaviourExtensions.InvokeOnCanvasGroupChanged(UIBehaviour) UIBehaviourExtensions.InvokeOnDidApplyAnimationProperties(UIBehaviour) GraphicExtension.InvokeOnPopulateMesh(Graphic, VertexHelper)"
  },
  "api/UnityEngine.UI.PositionAsUV1.html": {
    "href": "api/UnityEngine.UI.PositionAsUV1.html",
    "title": "Class PositionAsUV1 | Unity UI | 1.0.0",
    "keywords": "Class PositionAsUV1 Inheritance Object UIBehaviour BaseMeshEffect PositionAsUV1 Inherited Members BaseMeshEffect.graphic BaseMeshEffect.OnEnable() BaseMeshEffect.OnDisable() BaseMeshEffect.OnDidApplyAnimationProperties() BaseMeshEffect.ModifyMesh(Mesh) UIBehaviour.Awake() UIBehaviour.Start() UIBehaviour.OnDestroy() UIBehaviour.IsActive() UIBehaviour.OnRectTransformDimensionsChange() UIBehaviour.OnBeforeTransformParentChanged() UIBehaviour.OnTransformParentChanged() UIBehaviour.OnCanvasGroupChanged() UIBehaviour.OnCanvasHierarchyChanged() UIBehaviour.IsDestroyed() Namespace : UnityEngine.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class PositionAsUV1 : BaseMeshEffect, IMeshModifier Constructors PositionAsUV1() Declaration protected PositionAsUV1() Methods ModifyMesh(VertexHelper) Declaration public override void ModifyMesh(VertexHelper vh) Parameters Type Name Description VertexHelper vh Overrides BaseMeshEffect.ModifyMesh(VertexHelper) Extension Methods UIBehaviourExtensions.InvokeOnEnable(UIBehaviour) UIBehaviourExtensions.InvokeOnDisable(UIBehaviour) UIBehaviourExtensions.InvokeAwake(UIBehaviour) UIBehaviourExtensions.InvokeRebuild(UIBehaviour, CanvasUpdate) UIBehaviourExtensions.InvokeLateUpdate(UIBehaviour) UIBehaviourExtensions.InvokeUpdate(UIBehaviour) UIBehaviourExtensions.InvokeOnRectTransformDimensionsChange(UIBehaviour) UIBehaviourExtensions.InvokeOnCanvasGroupChanged(UIBehaviour) UIBehaviourExtensions.InvokeOnDidApplyAnimationProperties(UIBehaviour)"
  },
  "api/UnityEngine.UI.InputField.OnChangeEvent.html": {
    "href": "api/UnityEngine.UI.InputField.OnChangeEvent.html",
    "title": "Class InputField.OnChangeEvent | Unity UI | 1.0.0",
    "keywords": "Class InputField.OnChangeEvent Inheritance Object InputField.OnChangeEvent Namespace : UnityEngine.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] public class OnChangeEvent : UnityEvent<string>"
  },
  "api/UnityEngine.EventSystems.IInitializePotentialDragHandler.html": {
    "href": "api/UnityEngine.EventSystems.IInitializePotentialDragHandler.html",
    "title": "Interface IInitializePotentialDragHandler | Unity UI | 1.0.0",
    "keywords": "Interface IInitializePotentialDragHandler Interface to implement if you wish to receive OnInitializePotentialDrag callbacks. Namespace : UnityEngine.EventSystems <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public interface IInitializePotentialDragHandler : IEventSystemHandler Remarks Criteria for this event is implementation dependent. For example see StandAloneInputModule. Methods OnInitializePotentialDrag(PointerEventData) Called by a BaseInputModule when a drag has been found but before it is valid to begin the drag. Declaration void OnInitializePotentialDrag(PointerEventData eventData) Parameters Type Name Description PointerEventData eventData"
  },
  "api/UnityEngine.EventSystems.BaseInput.html": {
    "href": "api/UnityEngine.EventSystems.BaseInput.html",
    "title": "Class BaseInput | Unity UI | 1.0.0",
    "keywords": "Class BaseInput Interface to the Input system used by the BaseInputModule. With this it is possible to bypass the Input system with your own but still use the same InputModule. For example this can be used to feed fake input into the UI or interface with a different input system. Inheritance Object UIBehaviour BaseInput Inherited Members UIBehaviour.Awake() UIBehaviour.OnEnable() UIBehaviour.Start() UIBehaviour.OnDisable() UIBehaviour.OnDestroy() UIBehaviour.IsActive() UIBehaviour.OnRectTransformDimensionsChange() UIBehaviour.OnBeforeTransformParentChanged() UIBehaviour.OnTransformParentChanged() UIBehaviour.OnDidApplyAnimationProperties() UIBehaviour.OnCanvasGroupChanged() UIBehaviour.OnCanvasHierarchyChanged() UIBehaviour.IsDestroyed() Namespace : UnityEngine.EventSystems <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class BaseInput : UIBehaviour Properties compositionCursorPos Interface to Input.compositionCursorPos. Can be overridden to provide custom input instead of using the Input class. Declaration public virtual Vector2 compositionCursorPos { get; set; } Property Value Type Description Vector2 compositionString Interface to Input.compositionString. Can be overridden to provide custom input instead of using the Input class. Declaration public virtual string compositionString { get; } Property Value Type Description String imeCompositionMode Interface to Input.imeCompositionMode. Can be overridden to provide custom input instead of using the Input class. Declaration public virtual IMECompositionMode imeCompositionMode { get; set; } Property Value Type Description IMECompositionMode mousePosition Interface to Input.mousePosition. Can be overridden to provide custom input instead of using the Input class. Declaration public virtual Vector2 mousePosition { get; } Property Value Type Description Vector2 mousePresent Interface to Input.mousePresent. Can be overridden to provide custom input instead of using the Input class. Declaration public virtual bool mousePresent { get; } Property Value Type Description Boolean mouseScrollDelta Interface to Input.mouseScrollDelta. Can be overridden to provide custom input instead of using the Input class. Declaration public virtual Vector2 mouseScrollDelta { get; } Property Value Type Description Vector2 touchCount Interface to Input.touchCount. Can be overridden to provide custom input instead of using the Input class. Declaration public virtual int touchCount { get; } Property Value Type Description Int32 touchSupported Interface to Input.touchSupported. Can be overridden to provide custom input instead of using the Input class. Declaration public virtual bool touchSupported { get; } Property Value Type Description Boolean Methods GetAxisRaw(String) Interface to Input.GetAxisRaw. Can be overridden to provide custom input instead of using the Input class. Declaration public virtual float GetAxisRaw(string axisName) Parameters Type Name Description String axisName Axis name to check Returns Type Description Single GetButtonDown(String) Interface to Input.GetButtonDown. Can be overridden to provide custom input instead of using the Input class. Declaration public virtual bool GetButtonDown(string buttonName) Parameters Type Name Description String buttonName Button name to get Returns Type Description Boolean GetMouseButton(Int32) Interface to Input.GetMouseButton. Can be overridden to provide custom input instead of using the Input class. Declaration public virtual bool GetMouseButton(int button) Parameters Type Name Description Int32 button Returns Type Description Boolean GetMouseButtonDown(Int32) Interface to Input.GetMouseButtonDown. Can be overridden to provide custom input instead of using the Input class. Declaration public virtual bool GetMouseButtonDown(int button) Parameters Type Name Description Int32 button Returns Type Description Boolean GetMouseButtonUp(Int32) Interface to Input.GetMouseButtonUp. Can be overridden to provide custom input instead of using the Input class. Declaration public virtual bool GetMouseButtonUp(int button) Parameters Type Name Description Int32 button Returns Type Description Boolean GetTouch(Int32) Interface to Input.GetTouch. Can be overridden to provide custom input instead of using the Input class. Declaration public virtual Touch GetTouch(int index) Parameters Type Name Description Int32 index Touch index to get Returns Type Description Touch Extension Methods UIBehaviourExtensions.InvokeOnEnable(UIBehaviour) UIBehaviourExtensions.InvokeOnDisable(UIBehaviour) UIBehaviourExtensions.InvokeAwake(UIBehaviour) UIBehaviourExtensions.InvokeRebuild(UIBehaviour, CanvasUpdate) UIBehaviourExtensions.InvokeLateUpdate(UIBehaviour) UIBehaviourExtensions.InvokeUpdate(UIBehaviour) UIBehaviourExtensions.InvokeOnRectTransformDimensionsChange(UIBehaviour) UIBehaviourExtensions.InvokeOnCanvasGroupChanged(UIBehaviour) UIBehaviourExtensions.InvokeOnDidApplyAnimationProperties(UIBehaviour)"
  },
  "api/UnityEngine.UI.Slider.SliderEvent.html": {
    "href": "api/UnityEngine.UI.Slider.SliderEvent.html",
    "title": "Class Slider.SliderEvent | Unity UI | 1.0.0",
    "keywords": "Class Slider.SliderEvent Inheritance Object Slider.SliderEvent Namespace : UnityEngine.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] public class SliderEvent : UnityEvent<float>"
  },
  "api/UnityEngine.UI.Slider.Direction.html": {
    "href": "api/UnityEngine.UI.Slider.Direction.html",
    "title": "Enum Slider.Direction | Unity UI | 1.0.0",
    "keywords": "Enum Slider.Direction Setting that indicates one of four directions. Namespace : UnityEngine.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public enum Direction Fields Name Description BottomToTop From the bottom to the top. LeftToRight From the left to the right RightToLeft From the right to the left TopToBottom From the top to the bottom."
  },
  "api/UnityEngine.UI.MaskUtilities.html": {
    "href": "api/UnityEngine.UI.MaskUtilities.html",
    "title": "Class MaskUtilities | Unity UI | 1.0.0",
    "keywords": "Class MaskUtilities Mask related utility class. This class provides masking-specific utility functions. Inheritance Object MaskUtilities Namespace : UnityEngine.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class MaskUtilities Methods FindRootSortOverrideCanvas(Transform) Find a root Canvas. Declaration public static Transform FindRootSortOverrideCanvas(Transform start) Parameters Type Name Description Transform start Transform to start the search at going up the hierarchy. Returns Type Description Transform Finds either the most root canvas, or the first canvas that overrides sorting. GetRectMaskForClippable(IClippable) Find the correct RectMask2D for a given IClippable. Declaration public static RectMask2D GetRectMaskForClippable(IClippable clippable) Parameters Type Name Description IClippable clippable Clippable to search from. Returns Type Description RectMask2D The Correct RectMask2D GetRectMasksForClip(RectMask2D, List<RectMask2D>) Search for all RectMask2D that apply to the given RectMask2D (includes self). Declaration public static void GetRectMasksForClip(RectMask2D clipper, List<RectMask2D> masks) Parameters Type Name Description RectMask2D clipper Starting clipping object. List < RectMask2D > masks The list of Rect masks GetStencilDepth(Transform, Transform) Find the stencil depth for a given element. Declaration public static int GetStencilDepth(Transform transform, Transform stopAfter) Parameters Type Name Description Transform transform The starting transform to search. Transform stopAfter Where the search of parents should stop Returns Type Description Int32 What the proper stencil buffer index should be. IsDescendantOrSelf(Transform, Transform) Helper function to determine if the child is a descendant of father or is father. Declaration public static bool IsDescendantOrSelf(Transform father, Transform child) Parameters Type Name Description Transform father The transform to compare against. Transform child The starting transform to search up the hierarchy. Returns Type Description Boolean Is child equal to father or is a descendant. Notify2DMaskStateChanged(Component) Notify all IClippables under the given component that they need to recalculate clipping. Declaration public static void Notify2DMaskStateChanged(Component mask) Parameters Type Name Description Component mask The object thats changed for whose children should be notified. NotifyStencilStateChanged(Component) Notify all IMaskable under the given component that they need to recalculate masking. Declaration public static void NotifyStencilStateChanged(Component mask) Parameters Type Name Description Component mask The object thats changed for whose children should be notified."
  },
  "api/UnityEngine.UI.ILayoutSelfController.html": {
    "href": "api/UnityEngine.UI.ILayoutSelfController.html",
    "title": "Interface ILayoutSelfController | Unity UI | 1.0.0",
    "keywords": "Interface ILayoutSelfController Inherited Members ILayoutController.SetLayoutHorizontal() ILayoutController.SetLayoutVertical() Namespace : UnityEngine.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public interface ILayoutSelfController : ILayoutController"
  },
  "api/UnityEngine.EventSystems.PointerInputModule.MouseButtonEventData.html": {
    "href": "api/UnityEngine.EventSystems.PointerInputModule.MouseButtonEventData.html",
    "title": "Class PointerInputModule.MouseButtonEventData | Unity UI | 1.0.0",
    "keywords": "Class PointerInputModule.MouseButtonEventData Information about a mouse button event. Inheritance Object PointerInputModule.MouseButtonEventData Namespace : UnityEngine.EventSystems <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class MouseButtonEventData Fields buttonData Pointer data associated with the mouse event. Declaration public PointerEventData buttonData Field Value Type Description PointerEventData buttonState The state of the button this frame. Declaration public PointerEventData.FramePressState buttonState Field Value Type Description PointerEventData.FramePressState Methods PressedThisFrame() Was the button pressed this frame? Declaration public bool PressedThisFrame() Returns Type Description Boolean ReleasedThisFrame() Was the button released this frame? Declaration public bool ReleasedThisFrame() Returns Type Description Boolean"
  },
  "api/Core.InputField.CharacterLimitValidation.html": {
    "href": "api/Core.InputField.CharacterLimitValidation.html",
    "title": "Class CharacterLimitValidation | Unity UI | 1.0.0",
    "keywords": "Class CharacterLimitValidation Inheritance Object TestBehaviourBase < InputField > CharacterLimitValidation Inherited Members TestBehaviourBase<UnityEngine.UI.InputField>.m_TestObject TestBehaviourBase<UnityEngine.UI.InputField>.TestSetup() TestBehaviourBase<UnityEngine.UI.InputField>.Teardown() Namespace : Core.InputField <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class CharacterLimitValidation : TestBehaviourBase<InputField> Methods LimitCanNotBeNegative() Declaration public void LimitCanNotBeNegative() TextLengthEqualToLimit() Declaration public void TextLengthEqualToLimit() TextLengthGreaterThanLimit() Declaration public void TextLengthGreaterThanLimit() TextLengthShorterThanLimit() Declaration public void TextLengthShorterThanLimit()"
  },
  "api/UnityEngine.UI.Scrollbar.ScrollEvent.html": {
    "href": "api/UnityEngine.UI.Scrollbar.ScrollEvent.html",
    "title": "Class Scrollbar.ScrollEvent | Unity UI | 1.0.0",
    "keywords": "Class Scrollbar.ScrollEvent Inheritance Object Scrollbar.ScrollEvent Namespace : UnityEngine.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] public class ScrollEvent : UnityEvent<float>"
  },
  "api/UnityEngine.UI.Tests.ImageHook.html": {
    "href": "api/UnityEngine.UI.Tests.ImageHook.html",
    "title": "Class ImageHook | Unity UI | 1.0.0",
    "keywords": "Class ImageHook Inheritance Object UIBehaviour Graphic MaskableGraphic Image ImageHook Inherited Members Image.s_ETC1DefaultUI Image.sprite Image.DisableSpriteOptimizations() Image.overrideSprite Image.type Image.preserveAspect Image.fillCenter Image.fillMethod Image.fillAmount Image.fillClockwise Image.fillOrigin Image.eventAlphaThreshold Image.alphaHitTestMinimumThreshold Image.useSpriteMesh Image.defaultETC1GraphicMaterial Image.mainTexture Image.hasBorder Image.pixelsPerUnitMultiplier Image.pixelsPerUnit Image.multipliedPixelsPerUnit Image.material Image.OnBeforeSerialize() Image.OnAfterDeserialize() Image.SetNativeSize() Image.OnPopulateMesh(VertexHelper) Image.OnEnable() Image.OnDisable() Image.UpdateMaterial() Image.OnCanvasHierarchyChanged() Image.CalculateLayoutInputHorizontal() Image.CalculateLayoutInputVertical() Image.minWidth Image.preferredWidth Image.flexibleWidth Image.minHeight Image.preferredHeight Image.flexibleHeight Image.layoutPriority Image.IsRaycastLocationValid(Vector2, Camera) Image.OnDidApplyAnimationProperties() MaskableGraphic.m_ShouldRecalculateStencil MaskableGraphic.m_MaskMaterial MaskableGraphic.m_IncludeForMasking MaskableGraphic.onCullStateChanged MaskableGraphic.maskable MaskableGraphic.m_ShouldRecalculate MaskableGraphic.m_StencilValue MaskableGraphic.GetModifiedMaterial(Material) MaskableGraphic.Cull(Rect, Boolean) MaskableGraphic.SetClipSoftness(Vector2) MaskableGraphic.OnTransformParentChanged() MaskableGraphic.ParentMaskStateChanged() MaskableGraphic.RecalculateClipping() MaskableGraphic.RecalculateMasking() Graphic.s_DefaultUI Graphic.s_WhiteTexture Graphic.defaultGraphicMaterial Graphic.m_Material Graphic.m_SkipLayoutUpdate Graphic.m_SkipMaterialUpdate Graphic.color Graphic.raycastTarget Graphic.raycastPadding Graphic.m_OnDirtyLayoutCallback Graphic.m_OnDirtyVertsCallback Graphic.m_OnDirtyMaterialCallback Graphic.s_Mesh Graphic.m_CachedMesh Graphic.m_CachedUvs Graphic.useLegacyMeshGeneration Graphic.SetAllDirty() Graphic.SetVerticesDirty() Graphic.OnRectTransformDimensionsChange() Graphic.OnBeforeTransformParentChanged() Graphic.depth Graphic.rectTransform Graphic.canvas Graphic.canvasRenderer Graphic.defaultMaterial Graphic.materialForRendering Graphic.OnDestroy() Graphic.OnCullingChanged() Graphic.Rebuild(CanvasUpdate) Graphic.LayoutComplete() Graphic.GraphicUpdateComplete() Graphic.workerMesh Graphic.OnFillVBO(List<UIVertex>) Graphic.OnPopulateMesh(Mesh) Graphic.Raycast(Vector2, Camera) Graphic.PixelAdjustPoint(Vector2) Graphic.GetPixelAdjustedRect() Graphic.CrossFadeColor(Color, Single, Boolean, Boolean) Graphic.CrossFadeColor(Color, Single, Boolean, Boolean, Boolean) Graphic.CrossFadeAlpha(Single, Single, Boolean) Graphic.RegisterDirtyLayoutCallback(UnityAction) Graphic.UnregisterDirtyLayoutCallback(UnityAction) Graphic.RegisterDirtyVerticesCallback(UnityAction) Graphic.UnregisterDirtyVerticesCallback(UnityAction) Graphic.RegisterDirtyMaterialCallback(UnityAction) Graphic.UnregisterDirtyMaterialCallback(UnityAction) UIBehaviour.Awake() UIBehaviour.Start() UIBehaviour.IsActive() UIBehaviour.OnCanvasGroupChanged() UIBehaviour.IsDestroyed() Namespace : UnityEngine.UI.Tests <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class ImageHook : Image, ICanvasElement, IClippable, IMaskable, IMaterialModifier, ISerializationCallbackReceiver, ILayoutElement, ICanvasRaycastFilter Fields cachedClipRect Declaration public Rect cachedClipRect Field Value Type Description Rect isGeometryUpdated Declaration public bool isGeometryUpdated Field Value Type Description Boolean isLayoutRebuild Declaration public bool isLayoutRebuild Field Value Type Description Boolean isMaterialRebuilt Declaration public bool isMaterialRebuilt Field Value Type Description Boolean Methods ResetTest() Declaration public void ResetTest() SetClipRect(Rect, Boolean) Declaration public override void SetClipRect(Rect clipRect, bool validRect) Parameters Type Name Description Rect clipRect Boolean validRect Overrides MaskableGraphic.SetClipRect(Rect, Boolean) SetLayoutDirty() Declaration public override void SetLayoutDirty() Overrides Graphic.SetLayoutDirty() SetMaterialDirty() Declaration public override void SetMaterialDirty() Overrides Graphic.SetMaterialDirty() UpdateGeometry() Declaration protected override void UpdateGeometry() Overrides Graphic.UpdateGeometry() Extension Methods UIBehaviourExtensions.InvokeOnEnable(UIBehaviour) UIBehaviourExtensions.InvokeOnDisable(UIBehaviour) UIBehaviourExtensions.InvokeAwake(UIBehaviour) UIBehaviourExtensions.InvokeRebuild(UIBehaviour, CanvasUpdate) UIBehaviourExtensions.InvokeLateUpdate(UIBehaviour) UIBehaviourExtensions.InvokeUpdate(UIBehaviour) UIBehaviourExtensions.InvokeOnRectTransformDimensionsChange(UIBehaviour) UIBehaviourExtensions.InvokeOnCanvasGroupChanged(UIBehaviour) UIBehaviourExtensions.InvokeOnDidApplyAnimationProperties(UIBehaviour) GraphicExtension.InvokeOnPopulateMesh(Graphic, VertexHelper)"
  },
  "api/UnityEngine.UI.InputField.html": {
    "href": "api/UnityEngine.UI.InputField.html",
    "title": "Class InputField | Unity UI | 1.0.0",
    "keywords": "Class InputField Turn a simple label into a interactable input field. Inheritance Object UIBehaviour Selectable InputField Inherited Members Selectable.s_Selectables Selectable.s_SelectableCount Selectable.allSelectablesArray Selectable.allSelectableCount Selectable.allSelectables Selectable.AllSelectablesNoAlloc(Selectable[]) Selectable.m_CurrentIndex Selectable.navigation Selectable.transition Selectable.colors Selectable.spriteState Selectable.animationTriggers Selectable.targetGraphic Selectable.interactable Selectable.image Selectable.Awake() Selectable.OnCanvasGroupChanged() Selectable.IsInteractable() Selectable.OnDidApplyAnimationProperties() Selectable.OnTransformParentChanged() Selectable.currentSelectionState Selectable.InstantClearState() Selectable.FindSelectable(Vector3) Selectable.FindSelectableOnLeft() Selectable.FindSelectableOnRight() Selectable.FindSelectableOnUp() Selectable.FindSelectableOnDown() Selectable.OnMove(AxisEventData) Selectable.IsHighlighted() Selectable.IsPressed() Selectable.OnPointerUp(PointerEventData) Selectable.OnPointerEnter(PointerEventData) Selectable.OnPointerExit(PointerEventData) Selectable.Select() UIBehaviour.Start() UIBehaviour.OnDestroy() UIBehaviour.IsActive() UIBehaviour.OnRectTransformDimensionsChange() UIBehaviour.OnBeforeTransformParentChanged() UIBehaviour.OnCanvasHierarchyChanged() UIBehaviour.IsDestroyed() Namespace : UnityEngine.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class InputField : Selectable, IMoveHandler, IPointerDownHandler, IPointerUpHandler, IPointerEnterHandler, IPointerExitHandler, ISelectHandler, IDeselectHandler, IUpdateSelectedHandler, IBeginDragHandler, IDragHandler, IEndDragHandler, IPointerClickHandler, ISubmitHandler, IEventSystemHandler, ICanvasElement, ILayoutElement Constructors InputField() Declaration protected InputField() Fields m_CaretPosition Declaration protected int m_CaretPosition Field Value Type Description Int32 m_CaretSelectPosition Declaration protected int m_CaretSelectPosition Field Value Type Description Int32 m_CaretVisible Declaration protected bool m_CaretVisible Field Value Type Description Boolean m_CursorVerts Declaration protected UIVertex[] m_CursorVerts Field Value Type Description UIVertex [] m_DrawEnd Declaration protected int m_DrawEnd Field Value Type Description Int32 m_DrawStart Declaration protected int m_DrawStart Field Value Type Description Int32 m_Keyboard Declaration protected TouchScreenKeyboard m_Keyboard Field Value Type Description TouchScreenKeyboard m_Mesh Declaration [NonSerialized] protected Mesh m_Mesh Field Value Type Description Mesh m_Placeholder Declaration protected Graphic m_Placeholder Field Value Type Description Graphic m_Text Declaration protected string m_Text Field Value Type Description String m_TextComponent Text Text used to display the input's value. Declaration protected Text m_TextComponent Field Value Type Description Text Properties asteriskChar Declaration public char asteriskChar { get; set; } Property Value Type Description Char cachedInputTextGenerator Declaration protected TextGenerator cachedInputTextGenerator { get; } Property Value Type Description TextGenerator caretBlinkRate The blinking rate of the input caret, defined as the number of times the blink cycle occurs per second. Declaration public float caretBlinkRate { get; set; } Property Value Type Description Single caretColor The custom caret color used if customCaretColor is set. Declaration public Color caretColor { get; set; } Property Value Type Description Color caretPosition Get: Returns the focus position as thats the position that moves around even during selection. Set: Set both the anchor and focus position such that a selection doesn't happen Declaration public int caretPosition { get; set; } Property Value Type Description Int32 caretPositionInternal Current position of the cursor. Getters are public Setters are protected Declaration protected int caretPositionInternal { get; set; } Property Value Type Description Int32 caretSelectPositionInternal Declaration protected int caretSelectPositionInternal { get; set; } Property Value Type Description Int32 caretWidth The width of the caret in pixels. Declaration public int caretWidth { get; set; } Property Value Type Description Int32 characterLimit How many characters the input field is limited to. 0 = infinite. Declaration public int characterLimit { get; set; } Property Value Type Description Int32 Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class Example : MonoBehaviour { public InputField mainInputField; public string playerName; void Start() { //Changes the character limit in the main input field. mainInputField.characterLimit = playerName.Length; } } characterValidation The type of validation to perform on a character Declaration public InputField.CharacterValidation characterValidation { get; set; } Property Value Type Description InputField.CharacterValidation contentType Specifies the type of the input text content. Declaration public InputField.ContentType contentType { get; set; } Property Value Type Description InputField.ContentType Remarks The ContentType affects character validation, keyboard type used (on platforms with on-screen keyboards), whether the InputField accepts multiple lines, and whether the text is autocorrected (on platforms that offer input auto-correction) or is treated as a password where the characters are not shown directly. Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class Example : MonoBehaviour { public InputField mainInputField; public string playerName; void Start() { //Changes the character limit in the main input field. mainInputField.characterLimit = playerName.Length; } } customCaretColor Should a custom caret color be used or should the textComponent.color be used. Declaration public bool customCaretColor { get; set; } Property Value Type Description Boolean flexibleHeight See ILayoutElement.flexibleHeight. Declaration public virtual float flexibleHeight { get; } Property Value Type Description Single Implements ILayoutElement.flexibleHeight flexibleWidth See ILayoutElement.flexibleWidth. Declaration public virtual float flexibleWidth { get; } Property Value Type Description Single Implements ILayoutElement.flexibleWidth inputType The type of input expected. See InputField.InputType. Declaration public InputField.InputType inputType { get; set; } Property Value Type Description InputField.InputType isFocused Declaration public bool isFocused { get; } Property Value Type Description Boolean keyboardType They type of mobile keyboard that will be used. Declaration public TouchScreenKeyboardType keyboardType { get; set; } Property Value Type Description TouchScreenKeyboardType layoutPriority See ILayoutElement.layoutPriority. Declaration public virtual int layoutPriority { get; } Property Value Type Description Int32 Implements ILayoutElement.layoutPriority lineType Declaration public InputField.LineType lineType { get; set; } Property Value Type Description InputField.LineType mesh Declaration protected Mesh mesh { get; } Property Value Type Description Mesh minHeight See ILayoutElement.minHeight. Declaration public virtual float minHeight { get; } Property Value Type Description Single Implements ILayoutElement.minHeight minWidth See ILayoutElement.minWidth. Declaration public virtual float minWidth { get; } Property Value Type Description Single Implements ILayoutElement.minWidth multiLine If the input field supports multiple lines. Declaration public bool multiLine { get; } Property Value Type Description Boolean Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class Example : MonoBehaviour { public InputField mainInputField; public void Update() { //Check to see if the input field is set to allow multiple lines. if (mainInputField.multiLine) { //Set the input field to only allow Single Lines, if it is currently set to allow Multiple lines. mainInputField.lineType = InputField.LineType.SingleLine; //Print to console Debug.Log(\"The main input field is now set to allow single lines only!\"); } } } onEndEdit The Unity Event to call when editing has ended Declaration public InputField.SubmitEvent onEndEdit { get; set; } Property Value Type Description InputField.SubmitEvent Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class Example : MonoBehaviour { public InputField mainInputField; // Checks if there is anything entered into the input field. void LockInput(InputField input) { if (input.text.Length > 0) { Debug.Log(\"Text has been entered\"); } else if (input.text.Length == 0) { Debug.Log(\"Main Input Empty\"); } } public void Start() { //Adds a listener that invokes the \"LockInput\" method when the player finishes editing the main input field. //Passes the main input field into the method when \"LockInput\" is invoked mainInputField.onEndEdit.AddListener(delegate {LockInput(mainInputField); }); } } onValidateInput The function to call to validate the input characters. Declaration public InputField.OnValidateInput onValidateInput { get; set; } Property Value Type Description InputField.OnValidateInput Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class Example : MonoBehaviour { public InputField mainInputField; public void Start() { // Sets the MyValidate method to invoke after the input field's default input validation invoke (default validation happens every time a character is entered into the text field.) mainInputField.onValidateInput += delegate(string input, int charIndex, char addedChar) { return MyValidate(addedChar); }; } private char MyValidate(char charToValidate) { //Checks if a dollar sign is entered.... if (charToValidate == '$') { // ... if it is change it to an empty character. charToValidate = '\\0'; } return charToValidate; } } onValueChange Declaration [Obsolete(\"onValueChange has been renamed to onValueChanged\")] public InputField.OnChangeEvent onValueChange { get; set; } Property Value Type Description InputField.OnChangeEvent onValueChanged Accessor to the OnChangeEvent. Declaration public InputField.OnChangeEvent onValueChanged { get; set; } Property Value Type Description InputField.OnChangeEvent Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class Example : MonoBehaviour { public InputField mainInputField; public void Start() { //Adds a listener to the main input field and invokes a method when the value changes. mainInputField.onValueChange.AddListener(delegate {ValueChangeCheck(); }); } // Invoked when the value of the text field changes. public void ValueChangeCheck() { Debug.Log(\"Value Changed\"); } } placeholder This is an optional ‘empty’ graphic to show that the InputField text field is empty. Note that this ‘empty' graphic still displays even when the InputField is selected (that is; when there is focus on it). A placeholder graphic can be used to show subtle hints or make it more obvious that the control is an InputField. Declaration public Graphic placeholder { get; set; } Property Value Type Description Graphic Remarks If a Text component is used as the placeholder, it's recommended to make the placeholder text look different from the real text of the InputField so they are not easily confused. For example, the placeholder text might be a more subtle color or have lower alpha value. preferredHeight Get the height of all the text if constrained to the height of the RectTransform. Declaration public virtual float preferredHeight { get; } Property Value Type Description Single Implements ILayoutElement.preferredHeight preferredWidth Get the displayed with of all input characters. Declaration public virtual float preferredWidth { get; } Property Value Type Description Single Implements ILayoutElement.preferredWidth readOnly Set the InputField to be read only. Declaration public bool readOnly { get; set; } Property Value Type Description Boolean Remarks Setting read only allows for highlighting of text without allowing modifications via keyboard. selectionAnchorPosition The beginning point of the selection. Declaration public int selectionAnchorPosition { get; set; } Property Value Type Description Int32 Remarks When making a selection with a mouse, the anchor is where in the document the mouse button is initially pressed. Get: Returns the beginning position of selection Set: If Input.compositionString is 0 set the fixed position. selectionColor The color of the highlight to show which characters are selected. Declaration public Color selectionColor { get; set; } Property Value Type Description Color Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class Example : MonoBehaviour { public InputField mainInputField; // Changes the color of the highlight that shows what characters are selected. void ChangeSelectionColor() { mainInputField.selectionColor = Color.red; } } selectionFocusPosition The end point of the selection. Declaration public int selectionFocusPosition { get; set; } Property Value Type Description Int32 Remarks When making a selection with a mouse, the focus is where in the document the mouse button is released. Get: Returns the end position of selection Set: If Input.compositionString is 0 set the variable position. shouldHideMobileInput Should the mobile keyboard input be hidden. This allows for input to happen with a caret in the InputField instead of a OS input box above the keyboard. Declaration public bool shouldHideMobileInput { get; set; } Property Value Type Description Boolean Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class Example : MonoBehaviour { public InputField mainInputField; public void Start() { //This setting can be toggled in the inspector. mainInputField.shouldHideMobileInput = true; } } text Input field's current text value. This is not necessarily the same as what is visible on screen. Declaration public string text { get; set; } Property Value Type Description String Remarks Note that null is invalid value for InputField.text. Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class Example : MonoBehaviour { public InputField mainInputField; public void Start() { mainInputField.text = \"Enter Text Here...\"; } } textComponent The Text component that is going to be used to render the text to screen. Declaration public Text textComponent { get; set; } Property Value Type Description Text touchScreenKeyboard The TouchScreenKeyboard being used to edit the Input Field. Declaration public TouchScreenKeyboard touchScreenKeyboard { get; } Property Value Type Description TouchScreenKeyboard wasCanceled If the InputField was canceled and will revert back to the original text upon DeactivateInputField. Declaration public bool wasCanceled { get; } Property Value Type Description Boolean Methods ActivateInputField() Function to activate the InputField to begin processing Events. Declaration public void ActivateInputField() Remarks Will only activate if deactivated. Examples using UnityEngine; using System.Collections; using UnityEngine.UI; public class Example : MonoBehaviour { public InputField mainInputField; // Activate the main input field when the scene starts. void Start() { mainInputField.ActivateInputField(); } } Append(Char) Append a character to the input field, taking into account the validation of each character. Declaration protected virtual void Append(char input) Parameters Type Name Description Char input Character to append. Append(String) Append the specified text to the end of the current text string. Appends character by character testing validation criteria. Declaration protected virtual void Append(string input) Parameters Type Name Description String input The String to append. CalculateLayoutInputHorizontal() See ILayoutElement.CalculateLayoutInputHorizontal. Declaration public virtual void CalculateLayoutInputHorizontal() Implements ILayoutElement.CalculateLayoutInputHorizontal() CalculateLayoutInputVertical() See ILayoutElement.CalculateLayoutInputVertical. Declaration public virtual void CalculateLayoutInputVertical() Implements ILayoutElement.CalculateLayoutInputVertical() ClampPos(ref Int32) Clamp a value (by reference) between 0 and the current text length. Declaration protected void ClampPos(ref int pos) Parameters Type Name Description Int32 pos The input position to be clampped DeactivateInputField() Function to deactivate the InputField to stop the processing of Events and send OnSubmit if not canceled. Declaration public void DeactivateInputField() Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class Example : MonoBehaviour { public InputField mainInputField; // Deactivates the main input field when the scene starts. void Start() { mainInputField.DeactivateInputField(); } } DoStateTransition(Selectable.SelectionState, Boolean) Declaration protected override void DoStateTransition(Selectable.SelectionState state, bool instant) Parameters Type Name Description Selectable.SelectionState state Boolean instant Overrides Selectable.DoStateTransition(Selectable.SelectionState, Boolean) ForceLabelUpdate() Force the label to update immediatly. This will recalculate the positioning of the caret and the visible text. Declaration public void ForceLabelUpdate() GetCharacterIndexFromPosition(Vector2) Given an input position in local space on the Text return the index for the selection cursor at this position. Declaration protected int GetCharacterIndexFromPosition(Vector2 pos) Parameters Type Name Description Vector2 pos Mouse position. Returns Type Description Int32 Character index with in value. GraphicUpdateComplete() See ICanvasElement.GraphicUpdateComplete. Does nothing by default. Declaration public virtual void GraphicUpdateComplete() Implements ICanvasElement.GraphicUpdateComplete() KeyPressed(Event) Process the Event and perform the appropriate action for that key. Declaration protected InputField.EditState KeyPressed(Event evt) Parameters Type Name Description Event evt The Event that is currently being processed. Returns Type Description InputField.EditState If we should continue processing events or we have hit an end condition. LateUpdate() Update the text based on input. Declaration protected virtual void LateUpdate() LayoutComplete() See ICanvasElement.LayoutComplete. Does nothing by default. Declaration public virtual void LayoutComplete() Implements ICanvasElement.LayoutComplete() MoveTextEnd(Boolean) Move the caret index to end of text. Declaration public void MoveTextEnd(bool shift) Parameters Type Name Description Boolean shift Only move the selection position to facilate selection MoveTextStart(Boolean) Move the caret index to start of text. Declaration public void MoveTextStart(bool shift) Parameters Type Name Description Boolean shift Only move the selection position to facilate selection OnBeginDrag(PointerEventData) Capture the OnBeginDrag callback from the EventSystem and ensure we should listen to the drag events to follow. Declaration public virtual void OnBeginDrag(PointerEventData eventData) Parameters Type Name Description PointerEventData eventData The data passed by the EventSystem Implements IBeginDragHandler.OnBeginDrag(PointerEventData) OnDeselect(BaseEventData) What to do when the event system sends a Deselect Event. Defaults to deactivating the inputfield. Declaration public override void OnDeselect(BaseEventData eventData) Parameters Type Name Description BaseEventData eventData The data sent by the EventSystem Overrides Selectable.OnDeselect(BaseEventData) OnDisable() Declaration protected override void OnDisable() Overrides Selectable.OnDisable() OnDrag(PointerEventData) If we are able to drag, try and select the character range underneath the bounding rect. Declaration public virtual void OnDrag(PointerEventData eventData) Parameters Type Name Description PointerEventData eventData Implements IDragHandler.OnDrag(PointerEventData) OnEnable() Declaration protected override void OnEnable() Overrides Selectable.OnEnable() OnEndDrag(PointerEventData) Capture the OnEndDrag callback from the EventSystem and cancel the listening of drag events. Declaration public virtual void OnEndDrag(PointerEventData eventData) Parameters Type Name Description PointerEventData eventData The eventData sent by the EventSystem. Implements IEndDragHandler.OnEndDrag(PointerEventData) OnFocus() Declaration protected void OnFocus() OnPointerClick(PointerEventData) What to do when the event system sends a pointer click Event Declaration public virtual void OnPointerClick(PointerEventData eventData) Parameters Type Name Description PointerEventData eventData The data on which to process Implements IPointerClickHandler.OnPointerClick(PointerEventData) OnPointerDown(PointerEventData) The action to perform when the event system sends a pointer down Event. Declaration public override void OnPointerDown(PointerEventData eventData) Parameters Type Name Description PointerEventData eventData Overrides Selectable.OnPointerDown(PointerEventData) OnSelect(BaseEventData) What to do when the event system sends a submit Event. Declaration public override void OnSelect(BaseEventData eventData) Parameters Type Name Description BaseEventData eventData The data on which to process Overrides Selectable.OnSelect(BaseEventData) OnSubmit(BaseEventData) Declaration public virtual void OnSubmit(BaseEventData eventData) Parameters Type Name Description BaseEventData eventData Implements ISubmitHandler.OnSubmit(BaseEventData) OnUpdateSelected(BaseEventData) What to do when the event system sends a Update selected Event. Declaration public virtual void OnUpdateSelected(BaseEventData eventData) Parameters Type Name Description BaseEventData eventData The data on which to process. Implements IUpdateSelectedHandler.OnUpdateSelected(BaseEventData) ProcessEvent(Event) Helper function to allow separate events to be processed by the InputField. Declaration public void ProcessEvent(Event e) Parameters Type Name Description Event e The Event to process Rebuild(CanvasUpdate) Rebuild the input fields geometry. (caret and highlight). Declaration public virtual void Rebuild(CanvasUpdate update) Parameters Type Name Description CanvasUpdate update Which update loop we are in. Implements ICanvasElement.Rebuild(CanvasUpdate) ScreenToLocal(Vector2) Declaration [Obsolete(\"This function is no longer used. Please use RectTransformUtility.ScreenPointToLocalPointInRectangle() instead.\")] public Vector2 ScreenToLocal(Vector2 screen) Parameters Type Name Description Vector2 screen Returns Type Description Vector2 SelectAll() Highlight the whole InputField. Declaration protected void SelectAll() Remarks Sets the caretPosition to the length of the text and caretSelectPos to 0. SendOnSubmit() Convenience function to make functionality to send the ::ref::SubmitEvent easier. Declaration protected void SendOnSubmit() SetTextWithoutNotify(String) Set the current text value of the Input field without invoking onValueChanged. Declaration public void SetTextWithoutNotify(string input) Parameters Type Name Description String input Remarks This is not necessarily the same as what is visible on screen. UpdateLabel() Update the Text associated with this input field. Declaration protected void UpdateLabel() Validate(String, Int32, Char) Predefined validation functionality for different characterValidation types. Declaration protected char Validate(string text, int pos, char ch) Parameters Type Name Description String text The whole text string to validate. Int32 pos The position at which the current character is being inserted. Char ch The character that is being inserted Returns Type Description Char The character that should be inserted. Extension Methods UIBehaviourExtensions.InvokeOnEnable(UIBehaviour) UIBehaviourExtensions.InvokeOnDisable(UIBehaviour) UIBehaviourExtensions.InvokeAwake(UIBehaviour) UIBehaviourExtensions.InvokeRebuild(UIBehaviour, CanvasUpdate) UIBehaviourExtensions.InvokeLateUpdate(UIBehaviour) UIBehaviourExtensions.InvokeUpdate(UIBehaviour) UIBehaviourExtensions.InvokeOnRectTransformDimensionsChange(UIBehaviour) UIBehaviourExtensions.InvokeOnCanvasGroupChanged(UIBehaviour) UIBehaviourExtensions.InvokeOnDidApplyAnimationProperties(UIBehaviour) SelectableExtensions.InvokeOnPointerDown(Selectable, PointerEventData) SelectableExtensions.InvokeOnPointerUp(Selectable, PointerEventData) SelectableExtensions.InvokeOnPointerEnter(Selectable, PointerEventData) SelectableExtensions.InvokeOnPointerExit(Selectable, PointerEventData) SelectableExtensions.InvokeTriggerAnimation(Selectable, String)"
  },
  "api/UnityEngine.UI.GridLayoutGroup.Axis.html": {
    "href": "api/UnityEngine.UI.GridLayoutGroup.Axis.html",
    "title": "Enum GridLayoutGroup.Axis | Unity UI | 1.0.0",
    "keywords": "Enum GridLayoutGroup.Axis The grid axis we are looking at. Namespace : UnityEngine.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public enum Axis Remarks As the storage is a [][] we make access easier by passing a axis. Fields Name Description Horizontal Horizontal axis Vertical Vertical axis."
  },
  "api/UnityEditor.EventSystems.PhysicsRaycasterEditor.html": {
    "href": "api/UnityEditor.EventSystems.PhysicsRaycasterEditor.html",
    "title": "Class PhysicsRaycasterEditor | Unity UI | 1.0.0",
    "keywords": "Class PhysicsRaycasterEditor Inheritance Object PhysicsRaycasterEditor Namespace : UnityEditor.EventSystems <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class PhysicsRaycasterEditor : Editor Methods OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/UnityEngine.EventSystems.IEndDragHandler.html": {
    "href": "api/UnityEngine.EventSystems.IEndDragHandler.html",
    "title": "Interface IEndDragHandler | Unity UI | 1.0.0",
    "keywords": "Interface IEndDragHandler Interface to implement if you wish to receive OnEndDrag callbacks. Note: You need to implement IDragHandler in addition to IEndDragHandler. Namespace : UnityEngine.EventSystems <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public interface IEndDragHandler : IEventSystemHandler Remarks Criteria for this event is implementation dependent. For example see StandAloneInputModule. Methods OnEndDrag(PointerEventData) Called by a BaseInputModule when a drag is ended. Declaration void OnEndDrag(PointerEventData eventData) Parameters Type Name Description PointerEventData eventData"
  },
  "api/UnityEngine.UI.MaskableGraphic.CullStateChangedEvent.html": {
    "href": "api/UnityEngine.UI.MaskableGraphic.CullStateChangedEvent.html",
    "title": "Class MaskableGraphic.CullStateChangedEvent | Unity UI | 1.0.0",
    "keywords": "Class MaskableGraphic.CullStateChangedEvent Inheritance Object MaskableGraphic.CullStateChangedEvent Namespace : UnityEngine.UI <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] public class CullStateChangedEvent : UnityEvent<bool>"
  }
}